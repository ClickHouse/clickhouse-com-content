"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[31192],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64821:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={sidebar_position:30,sidebar_label:"Merge"},s="Merge Table Engine",p={unversionedId:"en/engines/table-engines/special/merge",id:"en/engines/table-engines/special/merge",title:"Merge Table Engine",description:"merge}",source:"@site/docs/en/engines/table-engines/special/merge.md",sourceDirName:"en/engines/table-engines/special",slug:"/en/engines/table-engines/special/merge",permalink:"/docs/en/engines/table-engines/special/merge",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,sidebar_label:"Merge"},sidebar:"tutorialSidebar",previous:{title:"Dictionary",permalink:"/docs/en/engines/table-engines/special/dictionary"},next:{title:"File",permalink:"/docs/en/engines/table-engines/special/file"}},c={},u=[{value:"Creating a Table",id:"creating-a-table",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"Virtual Columns",id:"virtual-columns",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"merge"},"Merge Table Engine"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Merge")," engine (not to be confused with ",(0,i.kt)("inlineCode",{parentName:"p"},"MergeTree"),") does not store data itself, but allows reading from any number of other tables simultaneously."),(0,i.kt)("p",null,"Reading is automatically parallelized. Writing to a table is not supported. When reading, the indexes of tables that are actually being read are used, if they exist."),(0,i.kt)("h2",{id:"creating-a-table"},"Creating a Table"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE ... Engine=Merge(db_name, tables_regexp)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Engine Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"db_name")," \u2014 Possible values:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"database name, "),(0,i.kt)("li",{parentName:"ul"},"constant expression that returns a string with a database name, for example, ",(0,i.kt)("inlineCode",{parentName:"li"},"currentDatabase()"),","),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"REGEXP(expression)"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"expression")," is a regular expression to match the DB names."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"tables_regexp")," \u2014 A regular expression to match the table names in the specified DB or DBs."))),(0,i.kt)("p",null,"Regular expressions \u2014 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/google/re2"},"re2"),' (supports a subset of PCRE), case-sensitive.\nSee the notes about escaping symbols in regular expressions in the "match" section.'),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"When selecting tables to read, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Merge")," table itself is not selected, even if it matches the regex. This is to avoid loops.\nIt is possible to create two ",(0,i.kt)("inlineCode",{parentName:"p"},"Merge")," tables that will endlessly try to read each others' data, but this is not a good idea."),(0,i.kt)("p",null,"The typical way to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Merge")," engine is for working with a large number of ",(0,i.kt)("inlineCode",{parentName:"p"},"TinyLog")," tables as if with a single table."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1")),(0,i.kt)("p",null,"Consider two databases ",(0,i.kt)("inlineCode",{parentName:"p"},"ABC_corporate_site")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ABC_store"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"all_visitors")," table will contain IDs from the tables ",(0,i.kt)("inlineCode",{parentName:"p"},"visitors")," in both databases."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE all_visitors (id UInt32) ENGINE=Merge(REGEXP('ABC_*'), 'visitors');\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2")),(0,i.kt)("p",null,"Let's say you have an old table ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchLog_old")," and decided to change partitioning without moving data to a new table ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchLog_new"),", and you need to see data from both tables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE WatchLog_old(date Date, UserId Int64, EventType String, Cnt UInt64) \n    ENGINE=MergeTree(date, (UserId, EventType), 8192);\nINSERT INTO WatchLog_old VALUES ('2018-01-01', 1, 'hit', 3);\n\nCREATE TABLE WatchLog_new(date Date, UserId Int64, EventType String, Cnt UInt64) \n    ENGINE=MergeTree PARTITION BY date ORDER BY (UserId, EventType) SETTINGS index_granularity=8192;\nINSERT INTO WatchLog_new VALUES ('2018-01-02', 2, 'hit', 3);\n\nCREATE TABLE WatchLog as WatchLog_old ENGINE=Merge(currentDatabase(), '^WatchLog');\n\nSELECT * FROM WatchLog;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500UserId\u2500\u252c\u2500EventType\u2500\u252c\u2500Cnt\u2500\u2510\n\u2502 2018-01-01 \u2502      1 \u2502 hit       \u2502   3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500UserId\u2500\u252c\u2500EventType\u2500\u252c\u2500Cnt\u2500\u2510\n\u2502 2018-01-02 \u2502      2 \u2502 hit       \u2502   3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("h2",{id:"virtual-columns"},"Virtual Columns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"_table")," \u2014 Contains the name of the table from which data was read. Type: ",(0,i.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String"),"."),(0,i.kt)("p",{parentName:"li"},"You can set the constant conditions on ",(0,i.kt)("inlineCode",{parentName:"p"},"_table")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE/PREWHERE")," clause (for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"WHERE _table='xyz'"),"). In this case the read operation is performed only for that tables where the condition on ",(0,i.kt)("inlineCode",{parentName:"p"},"_table")," is satisfied, so the ",(0,i.kt)("inlineCode",{parentName:"p"},"_table")," column acts as an index."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See Also")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/en/engines/table-engines/special/#table_engines-virtual_columns"},"Virtual columns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/table-functions/merge"},"merge")," table function")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/table_engines/special/merge/"},"Original article")," "))}m.isMDXComponent=!0}}]);