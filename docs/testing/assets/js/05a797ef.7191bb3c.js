"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[46535],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},11532:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],s={},l="storage_policies",c={unversionedId:"en/operations/system-tables/storage_policies",id:"en/operations/system-tables/storage_policies",title:"storage_policies",description:"systemtables-storagepolicies}",source:"@site/docs/en/operations/system-tables/storage_policies.md",sourceDirName:"en/operations/system-tables",slug:"/en/operations/system-tables/storage_policies",permalink:"/docs/testing/docs/en/operations/system-tables/storage_policies",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"stack_trace",permalink:"/docs/testing/docs/en/operations/system-tables/stack_trace"},next:{title:"table_engines",permalink:"/docs/testing/docs/en/operations/system-tables/table_engines"}},p={},u=[],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"system_tables-storage_policies"},"storage_policies"),(0,i.kt)("p",null,"Contains information about storage policies and volumes defined in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-multiple-volumes_configure"},"server configuration"),"."),(0,i.kt)("p",null,"Columns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"policy_name")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),") \u2014 Name of the storage policy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"volume_name")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),") \u2014 Volume name defined in the storage policy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"volume_priority")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Volume order number in the configuration, the data fills the volumes according this priority, i.e. data during inserts and merges is written to volumes with a lower priority (taking into account other rules: TTL, ",(0,i.kt)("inlineCode",{parentName:"li"},"max_data_part_size"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"move_factor"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"disks")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/array"},"Array(String)"),") \u2014 Disk names, defined in the storage policy."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_data_part_size")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"UInt64"),") \u2014 Maximum size of a data part that can be stored on volume disks (0 \u2014 no limit)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"move_factor")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float64"),") \u2014 Ratio of free disk space. When the ratio exceeds the value of configuration parameter, ClickHouse start to move data to the next volume in order."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefer_not_to_merge")," (",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"UInt8"),") \u2014 Value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"prefer_not_to_merge")," setting. When this setting is enabled, merging data on this volume is not allowed. This allows controlling how ClickHouse works with slow disks.")),(0,i.kt)("p",null,"If the storage policy contains more then one volume, then information for each volume is stored in the individual row of the table."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/system-tables/storage_policies"},"Original article")," "))}d.isMDXComponent=!0}}]);