"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[17743],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95930:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={sidebar_position:34,sidebar_label:"Arithmetic"},s="Arithmetic Functions",u={unversionedId:"en/sql-reference/functions/arithmetic-functions",id:"en/sql-reference/functions/arithmetic-functions",title:"Arithmetic Functions",description:"arithmetic-functions}",source:"@site/docs/en/sql-reference/functions/arithmetic-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/arithmetic-functions",permalink:"/docs/testing/docs/en/sql-reference/functions/arithmetic-functions",tags:[],version:"current",sidebarPosition:34,frontMatter:{sidebar_position:34,sidebar_label:"Arithmetic"},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/docs/testing/docs/en/sql-reference/functions/"},next:{title:"Arrays",permalink:"/docs/testing/docs/en/sql-reference/functions/array-functions"}},p={},c=[{value:"plus(a, b), a + b operator",id:"plusa-b-a-b-operator",level:2},{value:"minus(a, b), a - b operator",id:"minusa-b-a-b-operator",level:2},{value:"multiply(a, b), a * b operator",id:"multiplya-b-a-b-operator",level:2},{value:"divide(a, b), a / b operator",id:"dividea-b-a-b-operator",level:2},{value:"intDiv(a, b)",id:"intdiva-b",level:2},{value:"intDivOrZero(a, b)",id:"intdivorzeroa-b",level:2},{value:"modulo(a, b), a % b operator",id:"modulo",level:2},{value:"moduloOrZero(a, b)",id:"modulo-or-zero",level:2},{value:"negate(a), -a operator",id:"negatea-a-operator",level:2},{value:"abs(a)",id:"arithm_func-abs",level:2},{value:"gcd(a, b)",id:"gcda-b",level:2},{value:"lcm(a, b)",id:"lcma-b",level:2},{value:"max2",id:"max2",level:2},{value:"min2",id:"min2",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arithmetic-functions"},"Arithmetic Functions"),(0,i.kt)("p",null,"For all arithmetic functions, the result type is calculated as the smallest number type that the result fits in, if there is such a type. The minimum is taken simultaneously based on the number of bits, whether it is signed, and whether it floats. If there are not enough bits, the highest bit type is taken."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(0), toTypeName(0 + 0), toTypeName(0 + 0 + 0), toTypeName(0 + 0 + 0 + 0)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toTypeName(0)\u2500\u252c\u2500toTypeName(plus(0, 0))\u2500\u252c\u2500toTypeName(plus(plus(0, 0), 0))\u2500\u252c\u2500toTypeName(plus(plus(plus(0, 0), 0), 0))\u2500\u2510\n\u2502 UInt8         \u2502 UInt16                 \u2502 UInt32                          \u2502 UInt64                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"Arithmetic functions work for any pair of types from UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, or Float64."),(0,i.kt)("p",null,"Overflow is produced the same way as in C++."),(0,i.kt)("h2",{id:"plusa-b-a-b-operator"},"plus(a, b), a + b operator"),(0,i.kt)("p",null,"Calculates the sum of the numbers.\nYou can also add integer numbers with a date or date and time. In the case of a date, adding an integer means adding the corresponding number of days. For a date with time, it means adding the corresponding number of seconds."),(0,i.kt)("h2",{id:"minusa-b-a-b-operator"},"minus(a, b), a - b operator"),(0,i.kt)("p",null,"Calculates the difference. The result is always signed."),(0,i.kt)("p",null,"You can also calculate integer numbers from a date or date with time. The idea is the same \u2013 see above for \u2018plus\u2019."),(0,i.kt)("h2",{id:"multiplya-b-a-b-operator"},"multiply(a, b), a ","*"," b operator"),(0,i.kt)("p",null,"Calculates the product of the numbers."),(0,i.kt)("h2",{id:"dividea-b-a-b-operator"},"divide(a, b), a / b operator"),(0,i.kt)("p",null,"Calculates the quotient of the numbers. The result type is always a floating-point type.\nIt is not integer division. For integer division, use the \u2018intDiv\u2019 function.\nWhen dividing by zero you get \u2018inf\u2019, \u2018-inf\u2019, or \u2018nan\u2019."),(0,i.kt)("h2",{id:"intdiva-b"},"intDiv(a, b)"),(0,i.kt)("p",null,"Calculates the quotient of the numbers. Divides into integers, rounding down (by the absolute value).\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one."),(0,i.kt)("h2",{id:"intdivorzeroa-b"},"intDivOrZero(a, b)"),(0,i.kt)("p",null,"Differs from \u2018intDiv\u2019 in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one."),(0,i.kt)("h2",{id:"modulo"},"modulo(a, b), a % b operator"),(0,i.kt)("p",null,"Calculates the remainder after division.\nIf arguments are floating-point numbers, they are pre-converted to integers by dropping the decimal portion.\nThe remainder is taken in the same sense as in C++. Truncated division is used for negative numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one."),(0,i.kt)("h2",{id:"modulo-or-zero"},"moduloOrZero(a, b)"),(0,i.kt)("p",null,"Differs from ",(0,i.kt)("a",{parentName:"p",href:"#modulo"},"modulo")," in that it returns zero when the divisor is zero."),(0,i.kt)("h2",{id:"negatea-a-operator"},"negate(a), -a operator"),(0,i.kt)("p",null,"Calculates a number with the reverse sign. The result is always signed."),(0,i.kt)("h2",{id:"arithm_func-abs"},"abs(a)"),(0,i.kt)("p",null,"Calculates the absolute value of the number (a). That is, if a \\< 0, it returns -a. For unsigned types it does not do anything. For signed integer types, it returns an unsigned number."),(0,i.kt)("h2",{id:"gcda-b"},"gcd(a, b)"),(0,i.kt)("p",null,"Returns the greatest common divisor of the numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one."),(0,i.kt)("h2",{id:"lcma-b"},"lcm(a, b)"),(0,i.kt)("p",null,"Returns the least common multiple of the numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one."),(0,i.kt)("h2",{id:"max2"},"max2"),(0,i.kt)("p",null,"Compares two values and returns the maximum. The returned value is converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float64"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"max2(value1, value2)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 First value. ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int/UInt")," or ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 Second value. ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int/UInt")," or ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned value")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The maximum of two values.")),(0,i.kt)("p",null,"Type: ",(0,i.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT max2(-1, 2);\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500max2(-1, 2)\u2500\u2510\n\u2502           2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("h2",{id:"min2"},"min2"),(0,i.kt)("p",null,"Compares two values and returns the minimum. The returned value is converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float64"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"max2(value1, value2)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 First value. ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int/UInt")," or ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 Second value. ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int/UInt")," or ",(0,i.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned value")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The minimum of two values.")),(0,i.kt)("p",null,"Type: ",(0,i.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT min2(-1, 2);\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500min2(-1, 2)\u2500\u2510\n\u2502          -1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}d.isMDXComponent=!0}}]);