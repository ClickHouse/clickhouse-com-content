"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[45298],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92947:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=["components"],l={sidebar_position:11,sidebar_label:"PostgreSQL"},o="PostgreSQL",p={unversionedId:"en/engines/table-engines/integrations/postgresql",id:"en/engines/table-engines/integrations/postgresql",title:"PostgreSQL",description:"postgresql}",source:"@site/docs/en/engines/table-engines/integrations/postgresql.md",sourceDirName:"en/engines/table-engines/integrations",slug:"/en/engines/table-engines/integrations/postgresql",permalink:"/docs/testing/docs/en/engines/table-engines/integrations/postgresql",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,sidebar_label:"PostgreSQL"},sidebar:"tutorialSidebar",previous:{title:"RabbitMQ",permalink:"/docs/testing/docs/en/engines/table-engines/integrations/rabbitmq"},next:{title:"ExternalDistributed",permalink:"/docs/testing/docs/en/engines/table-engines/integrations/ExternalDistributed"}},c={},u=[{value:"Creating a Table",id:"creating-a-table",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Usage Example",id:"usage-example",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"postgresql"},"PostgreSQL"),(0,s.kt)("p",null,"The PostgreSQL engine allows to perform ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"INSERT")," queries on data that is stored on a remote PostgreSQL server."),(0,s.kt)("h2",{id:"creating-a-table"},"Creating a Table"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],\n    ...\n) ENGINE = PostgreSQL('host:port', 'database', 'table', 'user', 'password'[, `schema`]);\n")),(0,s.kt)("p",null,"See a detailed description of the ",(0,s.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/statements/create/table#create-table-query"},"CREATE TABLE")," query."),(0,s.kt)("p",null,"The table structure can differ from the original PostgreSQL table structure:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Column names should be the same as in the original PostgreSQL table, but you can use just some of these columns and in any order."),(0,s.kt)("li",{parentName:"ul"},"Column types may differ from those in the original PostgreSQL table. ClickHouse tries to ",(0,s.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/engines/database-engines/postgresql#data_types-support"},"cast")," values to the ClickHouse data types."),(0,s.kt)("li",{parentName:"ul"},"The ",(0,s.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/settings/#external-table-functions-use-nulls"},"external_table_functions_use_nulls")," setting defines how to handle Nullable columns. Default value: 1. If 0, the table function does not make Nullable columns and inserts default values instead of nulls. This is also applicable for NULL values inside arrays.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Engine Parameters")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"host:port")," \u2014 PostgreSQL server address."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"database")," \u2014 Remote database name."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"table")," \u2014 Remote table name."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"user")," \u2014 PostgreSQL user."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"password")," \u2014 User password."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"schema")," \u2014 Non-default table schema. Optional."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on conflict ...")," \u2014 example: ",(0,s.kt)("inlineCode",{parentName:"li"},"ON CONFLICT DO NOTHING"),". Optional. Note: adding this option will make insertion less efficient.")),(0,s.kt)("p",null,"or via config (since version 21.11):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"<named_collections>\n    <postgres1>\n        <host></host>\n        <port></port>\n        <username></username>\n        <password></password>\n        <table></table>\n    </postgres1>\n    <postgres2>\n        <host></host>\n        <port></port>\n        <username></username>\n        <password></password>\n    </postgres2>\n</named_collections>\n")),(0,s.kt)("p",null,"Some parameters can be overriden by key value arguments:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM postgresql(postgres1, schema='schema1', table='table1');\n")),(0,s.kt)("h2",{id:"implementation-details"},"Implementation Details"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," queries on PostgreSQL side run as ",(0,s.kt)("inlineCode",{parentName:"p"},"COPY (SELECT ...) TO STDOUT")," inside read-only PostgreSQL transaction with commit after each ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," query."),(0,s.kt)("p",null,"Simple ",(0,s.kt)("inlineCode",{parentName:"p"},"WHERE")," clauses such as ",(0,s.kt)("inlineCode",{parentName:"p"},"="),", ",(0,s.kt)("inlineCode",{parentName:"p"},"!="),", ",(0,s.kt)("inlineCode",{parentName:"p"},">"),", ",(0,s.kt)("inlineCode",{parentName:"p"},">="),", ",(0,s.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"<="),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"IN")," are executed on the PostgreSQL server."),(0,s.kt)("p",null,"All joins, aggregations, sorting, ",(0,s.kt)("inlineCode",{parentName:"p"},"IN [ array ]")," conditions and the ",(0,s.kt)("inlineCode",{parentName:"p"},"LIMIT")," sampling constraint are executed in ClickHouse only after the query to PostgreSQL finishes."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"INSERT")," queries on PostgreSQL side run as ",(0,s.kt)("inlineCode",{parentName:"p"},'COPY "table_name" (field1, field2, ... fieldN) FROM STDIN')," inside PostgreSQL transaction with auto-commit after each ",(0,s.kt)("inlineCode",{parentName:"p"},"INSERT")," statement."),(0,s.kt)("p",null,"PostgreSQL ",(0,s.kt)("inlineCode",{parentName:"p"},"Array")," types are converted into ClickHouse arrays."),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Be careful - in PostgreSQL an array data, created like a ",(0,s.kt)("inlineCode",{parentName:"p"},"type_name[]"),", may contain multi-dimensional arrays of different dimensions in different table rows in same column. But in ClickHouse it is only allowed to have multidimensional arrays of the same count of dimensions in all table rows in same column."))),(0,s.kt)("p",null,"Supports multiple replicas that must be listed by ",(0,s.kt)("inlineCode",{parentName:"p"},"|"),". For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test_replicas (id UInt32, name String) ENGINE = PostgreSQL(`postgres{2|3|4}:5432`, 'clickhouse', 'test_replicas', 'postgres', 'mysecretpassword');\n")),(0,s.kt)("p",null,"Replicas priority for PostgreSQL dictionary source is supported. The bigger the number in map, the less the priority. The highest priority is ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,s.kt)("p",null,"In the example below replica ",(0,s.kt)("inlineCode",{parentName:"p"},"example01-1")," has the highest priority:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},"<postgresql>\n    <port>5432</port>\n    <user>clickhouse</user>\n    <password>qwerty</password>\n    <replica>\n        <host>example01-1</host>\n        <priority>1</priority>\n    </replica>\n    <replica>\n        <host>example01-2</host>\n        <priority>2</priority>\n    </replica>\n    <db>db_name</db>\n    <table>table_name</table>\n    <where>id=10</where>\n    <invalidate_query>SQL_QUERY</invalidate_query>\n</postgresql>\n</source>\n")),(0,s.kt)("h2",{id:"usage-example"},"Usage Example"),(0,s.kt)("p",null,"Table in PostgreSQL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'postgres=# CREATE TABLE "public"."test" (\n"int_id" SERIAL,\n"int_nullable" INT NULL DEFAULT NULL,\n"float" FLOAT NOT NULL,\n"str" VARCHAR(100) NOT NULL DEFAULT \'\',\n"float_nullable" FLOAT NULL DEFAULT NULL,\nPRIMARY KEY (int_id));\n\nCREATE TABLE\n\npostgres=# INSERT INTO test (int_id, str, "float") VALUES (1,\'test\',2);\nINSERT 0 1\n\npostgresql> SELECT * FROM test;\n  int_id | int_nullable | float | str  | float_nullable\n --------+--------------+-------+------+----------------\n       1 |              |     2 | test |\n (1 row)\n')),(0,s.kt)("p",null,"Table in ClickHouse, retrieving data from the PostgreSQL table created above:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE default.postgresql_table\n(\n    `float_nullable` Nullable(Float32),\n    `str` String,\n    `int_id` Int32\n)\nENGINE = PostgreSQL('localhost:5432', 'public', 'test', 'postges_user', 'postgres_password');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM postgresql_table WHERE str IN ('test');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500float_nullable\u2500\u252c\u2500str\u2500\u2500\u252c\u2500int_id\u2500\u2510\n\u2502           \u1d3a\u1d41\u1d38\u1d38 \u2502 test \u2502      1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("p",null,"Using Non-default Schema:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'postgres=# CREATE SCHEMA "nice.schema";\n\npostgres=# CREATE TABLE "nice.schema"."nice.table" (a integer);\n\npostgres=# INSERT INTO "nice.schema"."nice.table" SELECT i FROM generate_series(0, 99) as t(i)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE pg_table_schema_with_dots (a UInt32)\n        ENGINE PostgreSQL('localhost:5432', 'clickhouse', 'nice.table', 'postgrsql_user', 'password', 'nice.schema');\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"See Also")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/table-functions/postgresql"},"The ",(0,s.kt)("inlineCode",{parentName:"a"},"postgresql")," table function")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/dictionaries/external-dictionaries/external-dicts-dict-sources#dicts-external_dicts_dict_sources-postgresql"},"Using PostgreSQL as a source of external dictionary"))),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/engines/table-engines/integrations/postgresql/"},"Original article")," "))}d.isMDXComponent=!0}}]);