"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[61575],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},92178:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={sidebar_position:36,sidebar_label:"Comparison"},c="Comparison Functions",l={unversionedId:"en/sql-reference/functions/comparison-functions",id:"en/sql-reference/functions/comparison-functions",title:"Comparison Functions",description:"comparison-functions}",source:"@site/docs/en/sql-reference/functions/comparison-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/comparison-functions",permalink:"/docs/testing/docs/en/sql-reference/functions/comparison-functions",tags:[],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36,sidebar_label:"Comparison"},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/docs/testing/docs/en/sql-reference/functions/array-functions"},next:{title:"Logical",permalink:"/docs/testing/docs/en/sql-reference/functions/logical-functions"}},u={},p=[{value:"equals, a = b and a == b operator",id:"function-equals",level:2},{value:"notEquals, a != b and a &lt;&gt; b operator",id:"function-notequals",level:2},{value:"less, &lt; operator",id:"function-less",level:2},{value:"greater, &gt; operator",id:"function-greater",level:2},{value:"lessOrEquals, &lt;= operator",id:"function-lessorequals",level:2},{value:"greaterOrEquals, &gt;= operator",id:"function-greaterorequals",level:2}],f={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"comparison-functions"},"Comparison Functions"),(0,a.kt)("p",null,"Comparison functions always return 0 or 1 (Uint8)."),(0,a.kt)("p",null,"The following types can be compared:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"numbers"),(0,a.kt)("li",{parentName:"ul"},"strings and fixed strings"),(0,a.kt)("li",{parentName:"ul"},"dates"),(0,a.kt)("li",{parentName:"ul"},"dates with times")),(0,a.kt)("p",null,"within each group, but not between different groups."),(0,a.kt)("p",null,"For example, you can\u2019t compare a date with a string. You have to use a function to convert the string to a date, or vice versa."),(0,a.kt)("p",null,"Strings are compared by bytes. A shorter string is smaller than all strings that start with it and that contain at least one more character."),(0,a.kt)("h2",{id:"function-equals"},"equals, a = b and a == b operator"),(0,a.kt)("h2",{id:"function-notequals"},"notEquals, a != b and a \\<",">"," b operator"),(0,a.kt)("h2",{id:"function-less"},"less, \\< operator"),(0,a.kt)("h2",{id:"function-greater"},"greater, ",">"," operator"),(0,a.kt)("h2",{id:"function-lessorequals"},"lessOrEquals, \\<= operator"),(0,a.kt)("h2",{id:"function-greaterorequals"},"greaterOrEquals, ",">","= operator"))}d.isMDXComponent=!0}}]);