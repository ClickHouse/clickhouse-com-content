"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[33080],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),k=l,c=d["".concat(p,".").concat(k)]||d[k]||m[k]||r;return n?a.createElement(c,i(i({ref:t},u),{},{components:n})):a.createElement(c,i({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81173:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],o={sidebar_position:38,sidebar_label:"Type Conversion"},p="Type Conversion Functions",s={unversionedId:"en/sql-reference/functions/type-conversion-functions",id:"en/sql-reference/functions/type-conversion-functions",title:"Type Conversion Functions",description:"type-conversion-functions}",source:"@site/docs/en/sql-reference/functions/type-conversion-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/type-conversion-functions",permalink:"/docs/testing/docs/en/sql-reference/functions/type-conversion-functions",tags:[],version:"current",sidebarPosition:38,frontMatter:{sidebar_position:38,sidebar_label:"Type Conversion"},sidebar:"tutorialSidebar",previous:{title:"Logical",permalink:"/docs/testing/docs/en/sql-reference/functions/logical-functions"},next:{title:"Dates and Times",permalink:"/docs/testing/docs/en/sql-reference/functions/date-time-functions"}},u={},m=[{value:"Common Issues of Numeric Conversions",id:"numeric-conversion-issues",level:2},{value:"toInt(8|16|32|64|128|256)",id:"toint8163264128256",level:2},{value:"toInt(8|16|32|64|128|256)OrZero",id:"toint8163264orzero",level:2},{value:"toInt(8|16|32|64|128|256)OrNull",id:"toint8163264128256ornull",level:2},{value:"toInt(8|16|32|64|128|256)OrDefault",id:"toint8163264128256orDefault",level:2},{value:"toUInt(8|16|32|64|256)",id:"touint8163264256",level:2},{value:"toUInt(8|16|32|64|256)OrZero",id:"touint8163264256orzero",level:2},{value:"toUInt(8|16|32|64|256)OrNull",id:"touint8163264256ornull",level:2},{value:"toUInt(8|16|32|64|256)OrDefault",id:"touint8163264256ordefault",level:2},{value:"toFloat(32|64)",id:"tofloat3264",level:2},{value:"toFloat(32|64)OrZero",id:"tofloat3264orzero",level:2},{value:"toFloat(32|64)OrNull",id:"tofloat3264ornull",level:2},{value:"toFloat(32|64)OrDefault",id:"tofloat3264ordefault",level:2},{value:"toDate",id:"todate",level:2},{value:"toDateOrZero",id:"todateorzero",level:2},{value:"toDateOrNull",id:"todateornull",level:2},{value:"toDateOrDefault",id:"todateordefault",level:2},{value:"toDateTime",id:"todatetime",level:2},{value:"toDateTimeOrZero",id:"todatetimeorzero",level:2},{value:"toDateTimeOrNull",id:"todatetimeornull",level:2},{value:"toDateTimeOrDefault",id:"todatetimeordefault",level:2},{value:"toDate32",id:"todate32",level:2},{value:"toDate32OrZero",id:"todate32-or-zero",level:2},{value:"toDate32OrNull",id:"todate32-or-null",level:2},{value:"toDate32OrDefault",id:"todate32-or-default",level:2},{value:"toDecimal(32|64|128|256)",id:"todecimal3264128256",level:2},{value:"toDecimal(32|64|128|256)OrNull",id:"todecimal3264128256ornull",level:2},{value:"toDecimal(32|64|128|256)OrDefault",id:"todecimal3264128256ordefault",level:2},{value:"toDecimal(32|64|128|256)OrZero",id:"todecimal3264128256orzero",level:2},{value:"toString",id:"tostring",level:2},{value:"toFixedString(s, N)",id:"tofixedstrings-n",level:2},{value:"toStringCutToZero(s)",id:"tostringcuttozeros",level:2},{value:"reinterpretAsUInt(8|16|32|64)",id:"reinterpretasuint8163264",level:2},{value:"reinterpretAsInt(8|16|32|64)",id:"reinterpretasint8163264",level:2},{value:"reinterpretAsFloat(32|64)",id:"reinterpretasfloat3264",level:2},{value:"reinterpretAsDate",id:"reinterpretasdate",level:2},{value:"reinterpretAsDateTime",id:"reinterpretasdatetime",level:2},{value:"reinterpretAsString",id:"type_conversion_functions-reinterpretAsString",level:2},{value:"reinterpretAsFixedString",id:"reinterpretasfixedstring",level:2},{value:"reinterpretAsUUID",id:"reinterpretasuuid",level:2},{value:"reinterpret(x, T)",id:"type_conversion_function-reinterpret",level:2},{value:"CAST(x, T)",id:"type_conversion_function-cast",level:2},{value:"accurateCast(x, T)",id:"type_conversion_function-accurate-cast",level:2},{value:"accurateCastOrNull(x, T)",id:"type_conversion_function-accurate-cast_or_null",level:2},{value:"accurateCastOrDefault(x, T, default_value)",id:"type_conversion_function-accurate-cast_or_default",level:2},{value:"toInterval(Year|Quarter|Month|Week|Day|Hour|Minute|Second)",id:"function-tointerval",level:2},{value:"parseDateTimeBestEffort",id:"parsedatetimebesteffort",level:2},{value:"parseDateTime32BestEffort",id:"parsedatetime32besteffort",level:2},{value:"parseDateTimeBestEffortUS",id:"parsedatetimebesteffortUS",level:2},{value:"parseDateTimeBestEffortOrNull",id:"parsedatetimebesteffortornull",level:2},{value:"parseDateTime32BestEffortOrNull",id:"parsedatetime32besteffortornull",level:2},{value:"parseDateTimeBestEffortOrZero",id:"parsedatetimebesteffortorzero",level:2},{value:"parseDateTime32BestEffortOrZero",id:"parsedatetime32besteffortorzero",level:2},{value:"parseDateTimeBestEffortUSOrNull",id:"parsedatetimebesteffortusornull",level:2},{value:"parseDateTimeBestEffortUSOrZero",id:"parsedatetimebesteffortusorzero",level:2},{value:"parseDateTime64BestEffort",id:"parsedatetime64besteffort",level:2},{value:"parseDateTime64BestEffortOrNull",id:"parsedatetime32besteffortornull",level:2},{value:"parseDateTime64BestEffortOrZero",id:"parsedatetime64besteffortorzero",level:2},{value:"toLowCardinality",id:"tolowcardinality",level:2},{value:"toUnixTimestamp64Milli",id:"tounixtimestamp64milli",level:2},{value:"toUnixTimestamp64Micro",id:"tounixtimestamp64micro",level:2},{value:"toUnixTimestamp64Nano",id:"tounixtimestamp64nano",level:2},{value:"fromUnixTimestamp64Milli",id:"fromunixtimestamp64milli",level:2},{value:"fromUnixTimestamp64Micro",id:"fromunixtimestamp64micro",level:2},{value:"fromUnixTimestamp64Nano",id:"fromunixtimestamp64nano",level:2},{value:"formatRow",id:"formatrow",level:2},{value:"formatRowNoNewline",id:"formatrownonewline",level:2},{value:"snowflakeToDateTime",id:"snowflaketodatetime",level:2},{value:"snowflakeToDateTime64",id:"snowflaketodatetime64",level:2},{value:"dateTimeToSnowflake",id:"datetimetosnowflake",level:2},{value:"dateTime64ToSnowflake",id:"datetime64tosnowflake",level:2}],d={toc:m};function k(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"type-conversion-functions"},"Type Conversion Functions"),(0,r.kt)("h2",{id:"numeric-conversion-issues"},"Common Issues of Numeric Conversions"),(0,r.kt)("p",null,"When you convert a value from one to another data type, you should remember that in common case, it is an unsafe operation that can lead to a data loss. A data loss can occur if you try to fit value from a larger data type to a smaller data type, or if you convert values between different data types."),(0,r.kt)("p",null,"ClickHouse has the ",(0,r.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/language/implicit_conversion"},"same behavior as C++ programs"),"."),(0,r.kt)("h2",{id:"toint8163264128256"},"toInt(8","|","16","|","32","|","64","|","128","|","256)"),(0,r.kt)("p",null,"Converts an input value to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int")," data type. This function family includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toInt8(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int8")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toInt16(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int16")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toInt32(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int32")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toInt64(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toInt128(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int128")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toInt256(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int256")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"Integer value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Int8"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int16"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Int128")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Int256")," data type."),(0,r.kt)("p",null,"Functions use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero"},"rounding towards zero"),", meaning they truncate fractional digits of numbers."),(0,r.kt)("p",null,"The behavior of functions for the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/float#data_type-float-nan-inf"},"NaN and Inf")," arguments is undefined. Remember about ",(0,r.kt)("a",{parentName:"p",href:"#numeric-conversion-issues"},"numeric convertions issues"),", when using the functions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64(nan), toInt32(32), toInt16('16'), toInt8(8.8);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500toInt64(nan)\u2500\u252c\u2500toInt32(32)\u2500\u252c\u2500toInt16('16')\u2500\u252c\u2500toInt8(8.8)\u2500\u2510\n\u2502 -9223372036854775808 \u2502          32 \u2502            16 \u2502           8 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"toint8163264orzero"},"toInt(8","|","16","|","32","|","64","|","128","|","256)OrZero"),(0,r.kt)("p",null,"It takes an argument of type String and tries to parse it into Int (8 ","|"," 16 ","|"," 32 ","|"," 64 ","|"," 128 ","|"," 256). If failed, returns 0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64OrZero('123123'), toInt8OrZero('123qwe123');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toInt64OrZero('123123')\u2500\u252c\u2500toInt8OrZero('123qwe123')\u2500\u2510\n\u2502                  123123 \u2502                         0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"toint8163264128256ornull"},"toInt(8","|","16","|","32","|","64","|","128","|","256)OrNull"),(0,r.kt)("p",null,"It takes an argument of type String and tries to parse it into Int (8 ","|"," 16 ","|"," 32 ","|"," 64 ","|"," 128 ","|"," 256). If failed, returns NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64OrNull('123123'), toInt8OrNull('123qwe123');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toInt64OrNull('123123')\u2500\u252c\u2500toInt8OrNull('123qwe123')\u2500\u2510\n\u2502                  123123 \u2502                      \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"toint8163264128256orDefault"},"toInt(8","|","16","|","32","|","64","|","128","|","256)OrDefault"),(0,r.kt)("p",null,"It takes an argument of type String and tries to parse it into Int (8 ","|"," 16 ","|"," 32 ","|"," 64 ","|"," 128 ","|"," 256). If failed, returns the default type value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toInt64OrDefault('123123', cast('-1' as Int64)), toInt8OrDefault('123qwe123', cast('-1' as Int8));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toInt64OrDefault('123123', CAST('-1', 'Int64'))\u2500\u252c\u2500toInt8OrDefault('123qwe123', CAST('-1', 'Int8'))\u2500\u2510\n\u2502                                          123123 \u2502                                               -1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"touint8163264256"},"toUInt(8","|","16","|","32","|","64","|","256)"),(0,r.kt)("p",null,"Converts an input value to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"UInt")," data type. This function family includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toUInt8(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toUInt16(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt16")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toUInt32(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toUInt64(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt64")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toUInt256(expr)")," \u2014 Results in the ",(0,r.kt)("inlineCode",{parentName:"li"},"UInt256")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/syntax#syntax-expressions"},"Expression")," returning a number or a string with the decimal representation of a number. Binary, octal, and hexadecimal representations of numbers are not supported. Leading zeroes are stripped.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"Integer value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt16"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt64")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"UInt256")," data type."),(0,r.kt)("p",null,"Functions use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rounding#Rounding_towards_zero"},"rounding towards zero"),", meaning they truncate fractional digits of numbers."),(0,r.kt)("p",null,"The behavior of functions for negative agruments and for the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/float#data_type-float-nan-inf"},"NaN and Inf")," arguments is undefined. If you pass a string with a negative number, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"'-32'"),", ClickHouse raises an exception. Remember about ",(0,r.kt)("a",{parentName:"p",href:"#numeric-conversion-issues"},"numeric convertions issues"),", when using the functions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toUInt64(nan), toUInt32(-32), toUInt16('16'), toUInt8(8.8);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500toUInt64(nan)\u2500\u252c\u2500toUInt32(-32)\u2500\u252c\u2500toUInt16('16')\u2500\u252c\u2500toUInt8(8.8)\u2500\u2510\n\u2502 9223372036854775808 \u2502    4294967264 \u2502             16 \u2502            8 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"touint8163264256orzero"},"toUInt(8","|","16","|","32","|","64","|","256)OrZero"),(0,r.kt)("h2",{id:"touint8163264256ornull"},"toUInt(8","|","16","|","32","|","64","|","256)OrNull"),(0,r.kt)("h2",{id:"touint8163264256ordefault"},"toUInt(8","|","16","|","32","|","64","|","256)OrDefault"),(0,r.kt)("h2",{id:"tofloat3264"},"toFloat(32","|","64)"),(0,r.kt)("h2",{id:"tofloat3264orzero"},"toFloat(32","|","64)OrZero"),(0,r.kt)("h2",{id:"tofloat3264ornull"},"toFloat(32","|","64)OrNull"),(0,r.kt)("h2",{id:"tofloat3264ordefault"},"toFloat(32","|","64)OrDefault"),(0,r.kt)("h2",{id:"todate"},"toDate"),(0,r.kt)("p",null,"Alias: ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE"),"."),(0,r.kt)("h2",{id:"todateorzero"},"toDateOrZero"),(0,r.kt)("h2",{id:"todateornull"},"toDateOrNull"),(0,r.kt)("h2",{id:"todateordefault"},"toDateOrDefault"),(0,r.kt)("h2",{id:"todatetime"},"toDateTime"),(0,r.kt)("h2",{id:"todatetimeorzero"},"toDateTimeOrZero"),(0,r.kt)("h2",{id:"todatetimeornull"},"toDateTimeOrNull"),(0,r.kt)("h2",{id:"todatetimeordefault"},"toDateTimeOrDefault"),(0,r.kt)("h2",{id:"todate32"},"toDate32"),(0,r.kt)("p",null,"Converts the argument to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/date32"},"Date32")," data type. If the value is outside the range returns the border values supported by ",(0,r.kt)("inlineCode",{parentName:"p"},"Date32"),". If the argument has ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/date"},"Date")," type, borders of ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," are taken into account."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toDate32(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 The value. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"UInt32")," or ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/date"},"Date"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A calendar date.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/date32"},"Date32"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The value is within the range:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate32('1955-01-01') AS value, toTypeName(value);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1925-01-01'))\u2500\u2510\n\u2502 1955-01-01 \u2502 Date32                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"The value is outside the range:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate32('1924-01-01') AS value, toTypeName(value);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1925-01-01'))\u2500\u2510\n\u2502 1925-01-01 \u2502 Date32                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"With ",(0,r.kt)("inlineCode",{parentName:"li"},"Date"),"-type argument:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate32(toDate('1924-01-01')) AS value, toTypeName(value);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32(toDate('1924-01-01')))\u2500\u2510\n\u2502 1970-01-01 \u2502 Date32                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todate32-or-zero"},"toDate32OrZero"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("a",{parentName:"p",href:"#todate32"},"toDate32")," but returns the min value of ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/date32"},"Date32")," if invalid argument is received."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate32OrZero('1924-01-01'), toDate32OrZero('');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toDate32OrZero('1924-01-01')\u2500\u252c\u2500toDate32OrZero('')\u2500\u2510\n\u2502                   1925-01-01 \u2502         1925-01-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todate32-or-null"},"toDate32OrNull"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("a",{parentName:"p",href:"#todate32"},"toDate32")," but returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," if invalid argument is received."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDate32OrNull('1955-01-01'), toDate32OrNull('');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toDate32OrNull('1955-01-01')\u2500\u252c\u2500toDate32OrNull('')\u2500\u2510\n\u2502                   1955-01-01 \u2502               \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todate32-or-default"},"toDate32OrDefault"),(0,r.kt)("p",null,"Converts the argument to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/date32"},"Date32")," data type. If the value is outside the range returns the lower border value supported by ",(0,r.kt)("inlineCode",{parentName:"p"},"Date32"),". If the argument has ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/date"},"Date")," type, borders of ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," are taken into account. Returns default value if invalid argument is received."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    toDate32OrDefault('1930-01-01', toDate32('2020-01-01')),\n    toDate32OrDefault('xx1930-01-01', toDate32('2020-01-01'));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toDate32OrDefault('1930-01-01', toDate32('2020-01-01'))\u2500\u252c\u2500toDate32OrDefault('xx1930-01-01', toDate32('2020-01-01'))\u2500\u2510\n\u2502                                              1930-01-01 \u2502                                                2020-01-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todecimal3264128256"},"toDecimal(32","|","64","|","128","|","256)"),(0,r.kt)("p",null,"Converts ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/decimal"},"Decimal")," data type with precision of ",(0,r.kt)("inlineCode",{parentName:"p"},"S"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," can be a number or a string. The ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," (scale) parameter specifies the number of decimal places."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal32(value, S)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal64(value, S)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal128(value, S)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal256(value, S)"))),(0,r.kt)("h2",{id:"todecimal3264128256ornull"},"toDecimal(32","|","64","|","128","|","256)OrNull"),(0,r.kt)("p",null,"Converts an input string to a ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/decimal"},"Nullable(Decimal(P,S))")," data type value. This family of functions include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal32OrNull(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable(Decimal32(S))")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal64OrNull(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable(Decimal64(S))")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal128OrNull(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable(Decimal128(S))")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal256OrNull(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Nullable(Decimal256(S))")," data type.")),(0,r.kt)("p",null,"These functions should be used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"toDecimal*()")," functions, if you prefer to get a ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," value instead of an exception in the event of an input value parsing error."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/syntax#syntax-expressions"},"Expression"),", returns a value in the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String")," data type. ClickHouse expects the textual representation of the decimal number. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"'1.111'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," \u2014 Scale, the number of decimal places in the resulting value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"A value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable(Decimal(P,S))")," data type. The value contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ClickHouse interprets the input string as a number."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL"),", if ClickHouse can\u2019t interpret the input string as a number or if the input number contains more than ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrNull(toString(-1.111), 5) AS val, toTypeName(val);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500val\u2500\u252c\u2500toTypeName(toDecimal32OrNull(toString(-1.111), 5))\u2500\u2510\n\u2502 -1.111 \u2502 Nullable(Decimal(9, 5))                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrNull(toString(-1.111), 2) AS val, toTypeName(val);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500val\u2500\u252c\u2500toTypeName(toDecimal32OrNull(toString(-1.111), 2))\u2500\u2510\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 Nullable(Decimal(9, 2))                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todecimal3264128256ordefault"},"toDecimal(32","|","64","|","128","|","256)OrDefault"),(0,r.kt)("p",null,"Converts an input string to a ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/decimal"},"Decimal(P,S)")," data type value. This family of functions include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal32OrDefault(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal32(S)")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal64OrDefault(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal64(S)")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal128OrDefault(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal128(S)")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal256OrDefault(expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal256(S)")," data type.")),(0,r.kt)("p",null,"These functions should be used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"toDecimal*()")," functions, if you prefer to get a default value instead of an exception in the event of an input value parsing error."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/syntax#syntax-expressions"},"Expression"),", returns a value in the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String")," data type. ClickHouse expects the textual representation of the decimal number. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"'1.111'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," \u2014 Scale, the number of decimal places in the resulting value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"A value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal(P,S)")," data type. The value contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ClickHouse interprets the input string as a number."),(0,r.kt)("li",{parentName:"ul"},"Default ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal(P,S)")," data type value, if ClickHouse can\u2019t interpret the input string as a number or if the input number contains more than ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrDefault(toString(-1.111), 5) AS val, toTypeName(val);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500val\u2500\u252c\u2500toTypeName(toDecimal32OrDefault(toString(-1.111), 5))\u2500\u2510\n\u2502 -1.111 \u2502 Decimal(9, 5)                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrDefault(toString(-1.111), 2) AS val, toTypeName(val);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500val\u2500\u252c\u2500toTypeName(toDecimal32OrDefault(toString(-1.111), 2))\u2500\u2510\n\u2502   0 \u2502 Decimal(9, 2)                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"todecimal3264128256orzero"},"toDecimal(32","|","64","|","128","|","256)OrZero"),(0,r.kt)("p",null,"Converts an input value to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/decimal"},"Decimal(P,S)")," data type. This family of functions include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal32OrZero( expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal32(S)")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal64OrZero( expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal64(S)")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal128OrZero( expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal128(S)")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toDecimal256OrZero( expr, S)")," \u2014 Results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Decimal256(S)")," data type.")),(0,r.kt)("p",null,"These functions should be used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"toDecimal*()")," functions, if you prefer to get a ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," value instead of an exception in the event of an input value parsing error."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/syntax#syntax-expressions"},"Expression"),", returns a value in the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String")," data type. ClickHouse expects the textual representation of the decimal number. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"'1.111'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," \u2014 Scale, the number of decimal places in the resulting value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"A value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable(Decimal(P,S))")," data type. The value contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ClickHouse interprets the input string as a number."),(0,r.kt)("li",{parentName:"ul"},"0 with ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places, if ClickHouse can\u2019t interpret the input string as a number or if the input number contains more than ",(0,r.kt)("inlineCode",{parentName:"li"},"S")," decimal places.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrZero(toString(-1.111), 5) AS val, toTypeName(val);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500val\u2500\u252c\u2500toTypeName(toDecimal32OrZero(toString(-1.111), 5))\u2500\u2510\n\u2502 -1.111 \u2502 Decimal(9, 5)                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toDecimal32OrZero(toString(-1.111), 2) AS val, toTypeName(val);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500val\u2500\u252c\u2500toTypeName(toDecimal32OrZero(toString(-1.111), 2))\u2500\u2510\n\u2502 0.00 \u2502 Decimal(9, 2)                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tostring"},"toString"),(0,r.kt)("p",null,"Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times.\nAll these functions accept one argument."),(0,r.kt)("p",null,"When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can\u2019t be parsed, an exception is thrown and the request is canceled."),(0,r.kt)("p",null,"When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.\nWhen converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch."),(0,r.kt)("p",null,"The date and date-with-time formats for the toDate/toDateTime functions are defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"YYYY-MM-DD\nYYYY-MM-DD hh:mm:ss\n")),(0,r.kt)("p",null,"As an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing \u2018toDate(unix_timestamp)\u2019, which otherwise would be an error and would require writing the more cumbersome \u2018toDate(toDateTime(unix_timestamp))\u2019."),(0,r.kt)("p",null,"Conversion between a date and date with time is performed the natural way: by adding a null time or dropping the time."),(0,r.kt)("p",null,"Conversion between numeric types uses the same rules as assignments between different numeric types in C++."),(0,r.kt)("p",null,"Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: ",(0,r.kt)("inlineCode",{parentName:"p"},"Asia/Yekaterinburg")," In this case, the time is formatted according to the specified time zone."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    now() AS now_local,\n    toString(now(), 'Asia/Yekaterinburg') AS now_yekat;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500now_local\u2500\u252c\u2500now_yekat\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 00:11:21 \u2502 2016-06-15 02:11:21 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Also see the ",(0,r.kt)("inlineCode",{parentName:"p"},"toUnixTimestamp")," function."),(0,r.kt)("h2",{id:"tofixedstrings-n"},"toFixedString(s, N)"),(0,r.kt)("p",null,"Converts a String type argument to a FixedString(N) type (a string with fixed length N). N must be a constant.\nIf the string has fewer bytes than N, it is padded with null bytes to the right. If the string has more bytes than N, an exception is thrown."),(0,r.kt)("h2",{id:"tostringcuttozeros"},"toStringCutToZero(s)"),(0,r.kt)("p",null,"Accepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toFixedString('foo', 8) AS s, toStringCutToZero(s) AS s_cut;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo\\0\\0\\0\\0\\0 \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toFixedString('foo\\0bar', 8) AS s, toStringCutToZero(s) AS s_cut;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo\\0bar\\0 \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"reinterpretasuint8163264"},"reinterpretAsUInt(8","|","16","|","32","|","64)"),(0,r.kt)("h2",{id:"reinterpretasint8163264"},"reinterpretAsInt(8","|","16","|","32","|","64)"),(0,r.kt)("h2",{id:"reinterpretasfloat3264"},"reinterpretAsFloat(32","|","64)"),(0,r.kt)("h2",{id:"reinterpretasdate"},"reinterpretAsDate"),(0,r.kt)("h2",{id:"reinterpretasdatetime"},"reinterpretAsDateTime"),(0,r.kt)("p",null,"These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn\u2019t long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch."),(0,r.kt)("h2",{id:"type_conversion_functions-reinterpretAsString"},"reinterpretAsString"),(0,r.kt)("p",null,"This function accepts a number or date or date with time, and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long."),(0,r.kt)("h2",{id:"reinterpretasfixedstring"},"reinterpretAsFixedString"),(0,r.kt)("p",null,"This function accepts a number or date or date with time, and returns a FixedString containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a FixedString that is one byte long."),(0,r.kt)("h2",{id:"reinterpretasuuid"},"reinterpretAsUUID"),(0,r.kt)("p",null,"Accepts 16 bytes string and returns UUID containing bytes representing the corresponding value in network byte order (big-endian). If the string isn't long enough, the function works as if the string is padded with the necessary number of null bytes to the end. If the string longer than 16 bytes, the extra bytes at the end are ignored."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"reinterpretAsUUID(fixed_string)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fixed_string")," \u2014 Big-endian byte string. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/fixedstring#fixedstring"},"FixedString"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The UUID type value. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/uuid#uuid-data-type"},"UUID"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"String to UUID."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reinterpretAsUUID(reverse(unhex('000102030405060708090a0b0c0d0e0f')));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500reinterpretAsUUID(reverse(unhex('000102030405060708090a0b0c0d0e0f')))\u2500\u2510\n\u2502                                  08090a0b-0c0d-0e0f-0001-020304050607 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Going back and forth from String to UUID."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    generateUUIDv4() AS uuid,\n    identity(lower(hex(reverse(reinterpretAsString(uuid))))) AS str,\n    reinterpretAsUUID(reverse(unhex(str))) AS uuid2\nSELECT uuid = uuid2;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500equals(uuid, uuid2)\u2500\u2510\n\u2502                   1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"type_conversion_function-reinterpret"},"reinterpret(x, T)"),(0,r.kt)("p",null,"Uses the same source in-memory bytes sequence for ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," value and reinterprets it to destination type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"reinterpret(x, type)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Any type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," \u2014 Destination type. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Destination type value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reinterpret(toInt8(-1), 'UInt8') as int_to_uint,\n    reinterpret(toInt8(1), 'Float32') as int_to_float,\n    reinterpret('1', 'UInt32') as string_to_int;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500int_to_uint\u2500\u252c\u2500int_to_float\u2500\u252c\u2500string_to_int\u2500\u2510\n\u2502         255 \u2502        1e-45 \u2502            49 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"type_conversion_function-cast"},"CAST(x, T)"),(0,r.kt)("p",null,"Converts an input value to the specified data type. Unlike the ",(0,r.kt)("a",{parentName:"p",href:"#type_conversion_function-reinterpret"},"reinterpret")," function, ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," tries to present the same value using the new data type. If the conversion can not be done then an exception is raised.\nSeveral syntax variants are supported."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CAST(x, T)\nCAST(x AS t)\nx::t\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 A value to convert. May be of any type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")," \u2014 The name of the target data type. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"t")," \u2014 The target data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Converted value.")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If the input value does not fit the bounds of the target type, the result overflows. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST(-1, 'UInt8')")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"255"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    CAST(toInt8(-1), 'UInt8') AS cast_int_to_uint,\n    CAST(1.5 AS Decimal(3,2)) AS cast_float_to_decimal,\n    '1'::Int32 AS cast_string_to_int;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500cast_int_to_uint\u2500\u252c\u2500cast_float_to_decimal\u2500\u252c\u2500cast_string_to_int\u2500\u2510\n\u2502              255 \u2502                  1.50 \u2502                  1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    '2016-06-15 23:00:00' AS timestamp,\n    CAST(timestamp AS DateTime) AS datetime,\n    CAST(timestamp AS Date) AS date,\n    CAST(timestamp, 'String') AS string,\n    CAST(timestamp, 'FixedString(22)') AS fixed_string;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500timestamp\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500datetime\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500fixed_string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00\\0\\0\\0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Conversion to FixedString(N) only works for arguments of type ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,r.kt)("p",null,"Type conversion to ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/nullable"},"Nullable")," and back is supported."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(x) FROM t_null;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toTypeName(x)\u2500\u2510\n\u2502 Int8          \u2502\n\u2502 Int8          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(CAST(x, 'Nullable(UInt16)')) FROM t_null;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toTypeName(CAST(x, 'Nullable(UInt16)'))\u2500\u2510\n\u2502 Nullable(UInt16)                        \u2502\n\u2502 Nullable(UInt16)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/settings/#cast_keep_nullable"},"cast_keep_nullable")," setting")),(0,r.kt)("h2",{id:"type_conversion_function-accurate-cast"},"accurateCast(x, T)"),(0,r.kt)("p",null,"Converts ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," data type."),(0,r.kt)("p",null,"The difference from ",(0,r.kt)("a",{parentName:"p",href:"#type_conversion_function-cast"},"cast(x, T)")," is that ",(0,r.kt)("inlineCode",{parentName:"p"},"accurateCast")," does not allow overflow of numeric types during cast if type value ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," does not fit the bounds of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),". For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"accurateCast(-1, 'UInt8')")," throws an exception."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT cast(-1, 'UInt8') as uint8;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500uint8\u2500\u2510\n\u2502   255 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT accurateCast(-1, 'UInt8') as uint8;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Code: 70. DB::Exception: Received from localhost:9000. DB::Exception: Value in column Int8 cannot be safely converted into type UInt8: While processing accurateCast(-1, 'UInt8') AS uint8.\n")),(0,r.kt)("h2",{id:"type_conversion_function-accurate-cast_or_null"},"accurateCastOrNull(x, T)"),(0,r.kt)("p",null,"Converts input value ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," to the specified data type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),". Always returns ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/nullable"},"Nullable")," type and returns ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/syntax#null-literal"},"NULL")," if the casted value is not representable in the target type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"accurateCastOrNull(x, T)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Input value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")," \u2014 The name of the returned data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The value, converted to the specified data type ",(0,r.kt)("inlineCode",{parentName:"li"},"T"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(accurateCastOrNull(5, 'UInt8'));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toTypeName(accurateCastOrNull(5, 'UInt8'))\u2500\u2510\n\u2502 Nullable(UInt8)                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    accurateCastOrNull(-1, 'UInt8') as uint8,\n    accurateCastOrNull(128, 'Int8') as int8,\n    accurateCastOrNull('Test', 'FixedString(2)') as fixed_string;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500uint8\u2500\u252c\u2500int8\u2500\u252c\u2500fixed_string\u2500\u2510\n\u2502  \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"type_conversion_function-accurate-cast_or_default"},"accurateCastOrDefault(x, T","[, default_value]",")"),(0,r.kt)("p",null,"Converts input value ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," to the specified data type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),". Returns default type value or ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value")," if specified if the casted value is not representable in the target type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"accurateCastOrDefault(x, T)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Input value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")," \u2014 The name of the returned data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default_value")," \u2014 Default value of returned data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The value converted to the specified data type ",(0,r.kt)("inlineCode",{parentName:"li"},"T"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(accurateCastOrDefault(5, 'UInt8'));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toTypeName(accurateCastOrDefault(5, 'UInt8'))\u2500\u2510\n\u2502 UInt8                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    accurateCastOrDefault(-1, 'UInt8') as uint8,\n    accurateCastOrDefault(-1, 'UInt8', 5) as uint8_default,\n    accurateCastOrDefault(128, 'Int8') as int8,\n    accurateCastOrDefault(128, 'Int8', 5) as int8_default,\n    accurateCastOrDefault('Test', 'FixedString(2)') as fixed_string,\n    accurateCastOrDefault('Test', 'FixedString(2)', 'Te') as fixed_string_default;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500uint8\u2500\u252c\u2500uint8_default\u2500\u252c\u2500int8\u2500\u252c\u2500int8_default\u2500\u252c\u2500fixed_string\u2500\u252c\u2500fixed_string_default\u2500\u2510\n\u2502     0 \u2502             5 \u2502    0 \u2502            5 \u2502              \u2502 Te                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"function-tointerval"},"toInterval(Year","|","Quarter","|","Month","|","Week","|","Day","|","Hour","|","Minute","|","Second)"),(0,r.kt)("p",null,"Converts a Number type argument to an ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/special-data-types/interval"},"Interval")," data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toIntervalSecond(number)\ntoIntervalMinute(number)\ntoIntervalHour(number)\ntoIntervalDay(number)\ntoIntervalWeek(number)\ntoIntervalMonth(number)\ntoIntervalQuarter(number)\ntoIntervalYear(number)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")," \u2014 Duration of interval. Positive integer number.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The value in ",(0,r.kt)("inlineCode",{parentName:"li"},"Interval")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH\n    toDate('2019-01-01') AS date,\n    INTERVAL 1 WEEK AS interval_week,\n    toIntervalWeek(1) AS interval_to_week\nSELECT\n    date + interval_week,\n    date + interval_to_week;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500plus(date, interval_week)\u2500\u252c\u2500plus(date, interval_to_week)\u2500\u2510\n\u2502                2019-01-08 \u2502                   2019-01-08 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"parsedatetimebesteffort"},"parseDateTimeBestEffort"),(0,r.kt)("h2",{id:"parsedatetime32besteffort"},"parseDateTime32BestEffort"),(0,r.kt)("p",null,"Converts a date and time in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String")," representation to ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/datetime#data_type-datetime"},"DateTime")," data type."),(0,r.kt)("p",null,"The function parses ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601"),", ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc1123#page-55"},"RFC 1123 - 5.2.14 RFC-822 Date and Time Specification"),", ClickHouse\u2019s and some other date and time formats."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"parseDateTimeBestEffort(time_string [, time_zone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," \u2014 String containing a date and time to convert. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 Time zone. The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the time zone. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Supported non-standard formats")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string containing 9..10 digit ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"unix timestamp"),"."),(0,r.kt)("li",{parentName:"ul"},"A string with a date and a time component: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMMDDhhmmss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD/MM/YYYY hh:mm:ss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD-MM-YY hh:mm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss"),", etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a date, but no time component: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY*MM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD/MM/YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD-MM-YY")," etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a day and time: ",(0,r.kt)("inlineCode",{parentName:"li"},"DD"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh:mm"),". In this case ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM")," are substituted as ",(0,r.kt)("inlineCode",{parentName:"li"},"2000-01"),"."),(0,r.kt)("li",{parentName:"ul"},"A string that includes the date and time along with time zone offset information: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss \xb1h:mm"),", etc. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"2020-12-12 17:36:00 -5:00"),".")),(0,r.kt)("p",null,"For all of the formats with separator the function parses months names expressed by their full name or by the first three letters of a month name. Examples: ",(0,r.kt)("inlineCode",{parentName:"p"},"24/DEC/18"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"24-Dec-18"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"01-September-2018"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffort('12/12/2020 12:12:57')\nAS parseDateTimeBestEffort;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffort\u2500\u2510\n\u2502     2020-12-12 12:12:57 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffort('Sat, 18 Aug 2018 07:22:16 GMT', 'Asia/Istanbul')\nAS parseDateTimeBestEffort;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffort\u2500\u2510\n\u2502     2018-08-18 10:22:16 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffort('1284101485')\nAS parseDateTimeBestEffort;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffort\u2500\u2510\n\u2502     2015-07-07 12:04:41 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffort('2018-12-12 10:12:12')\nAS parseDateTimeBestEffort;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffort\u2500\u2510\n\u2502     2018-12-12 10:12:12 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffort('10 20:19');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffort('10 20:19')\u2500\u2510\n\u2502                 2000-01-10 20:19:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://xkcd.com/1179/"},"ISO 8601 announcement by @xkcd")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc1123"},"RFC 1123")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#todate"},"toDate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#todatetime"},"toDateTime"))),(0,r.kt)("h2",{id:"parsedatetimebesteffortUS"},"parseDateTimeBestEffortUS"),(0,r.kt)("p",null,"This function is similar to ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffort"},"parseDateTimeBestEffort"),", the only difference is that this function prefers US date format (",(0,r.kt)("inlineCode",{parentName:"p"},"MM/DD/YYYY")," etc.) in case of ambiguity."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"parseDateTimeBestEffortUS(time_string [, time_zone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," \u2014 String containing a date and time to convert. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 Time zone. The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the time zone. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Supported non-standard formats")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string containing 9..10 digit ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"unix timestamp"),"."),(0,r.kt)("li",{parentName:"ul"},"A string with a date and a time component: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMMDDhhmmss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY hh:mm:ss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM-DD-YY hh:mm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss"),", etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a date, but no time component: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY*MM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM-DD-YY")," etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a day and time: ",(0,r.kt)("inlineCode",{parentName:"li"},"DD"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh:mm"),". In this case, ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM")," are substituted as ",(0,r.kt)("inlineCode",{parentName:"li"},"2000-01"),"."),(0,r.kt)("li",{parentName:"ul"},"A string that includes the date and time along with time zone offset information: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss \xb1h:mm"),", etc. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"2020-12-12 17:36:00 -5:00"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUS('09/12/2020 12:12:57')\nAS parseDateTimeBestEffortUS;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUS\u2500\u2510\n\u2502     2020-09-12 12:12:57   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2014\u2014\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUS('09-12-2020 12:12:57')\nAS parseDateTimeBestEffortUS;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUS\u2500\u2510\n\u2502     2020-09-12 12:12:57   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2014\u2014\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUS('09.12.2020 12:12:57')\nAS parseDateTimeBestEffortUS;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUS\u2500\u2510\n\u2502     2020-09-12 12:12:57   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2014\u2014\u2518\n")),(0,r.kt)("h2",{id:"parsedatetimebesteffortornull"},"parseDateTimeBestEffortOrNull"),(0,r.kt)("h2",{id:"parsedatetime32besteffortornull"},"parseDateTime32BestEffortOrNull"),(0,r.kt)("p",null,"Same as for ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffort"},"parseDateTimeBestEffort")," except that it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," when it encounters a date format that cannot be processed."),(0,r.kt)("h2",{id:"parsedatetimebesteffortorzero"},"parseDateTimeBestEffortOrZero"),(0,r.kt)("h2",{id:"parsedatetime32besteffortorzero"},"parseDateTime32BestEffortOrZero"),(0,r.kt)("p",null,"Same as for ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffort"},"parseDateTimeBestEffort")," except that it returns zero date or zero date time when it encounters a date format that cannot be processed."),(0,r.kt)("h2",{id:"parsedatetimebesteffortusornull"},"parseDateTimeBestEffortUSOrNull"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffortUS"},"parseDateTimeBestEffortUS")," function except that it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," when it encounters a date format that cannot be processed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"parseDateTimeBestEffortUSOrNull(time_string[, time_zone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," \u2014 String containing a date or date with time to convert. The date must be in the US date format (",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY"),", etc). ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-timezone"},"Timezone"),". The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the timezone. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Supported non-standard formats")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string containing 9..10 digit ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"unix timestamp"),"."),(0,r.kt)("li",{parentName:"ul"},"A string with a date and a time components: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMMDDhhmmss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY hh:mm:ss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM-DD-YY hh:mm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss"),", etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a date, but no time component: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY*MM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM-DD-YY"),", etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a day and time: ",(0,r.kt)("inlineCode",{parentName:"li"},"DD"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh:mm"),". In this case, ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM")," are substituted with ",(0,r.kt)("inlineCode",{parentName:"li"},"2000-01"),"."),(0,r.kt)("li",{parentName:"ul"},"A string that includes date and time along with timezone offset information: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss \xb1h:mm"),", etc. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"2020-12-12 17:36:00 -5:00"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime")," data type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," if the input string cannot be converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrNull('02/10/2021 21:12:57') AS parseDateTimeBestEffortUSOrNull;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrNull\u2500\u2510\n\u2502             2021-02-10 21:12:57 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrNull('02-10-2021 21:12:57 GMT', 'Asia/Istanbul') AS parseDateTimeBestEffortUSOrNull;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrNull\u2500\u2510\n\u2502             2021-02-11 00:12:57 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrNull('02.10.2021') AS parseDateTimeBestEffortUSOrNull;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrNull\u2500\u2510\n\u2502             2021-02-10 00:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrNull('10.2021') AS parseDateTimeBestEffortUSOrNull;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrNull\u2500\u2510\n\u2502                            \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"parsedatetimebesteffortusorzero"},"parseDateTimeBestEffortUSOrZero"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffortUS"},"parseDateTimeBestEffortUS")," function except that it returns zero date (",(0,r.kt)("inlineCode",{parentName:"p"},"1970-01-01"),") or zero date with time (",(0,r.kt)("inlineCode",{parentName:"p"},"1970-01-01 00:00:00"),") when it encounters a date format that cannot be processed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"parseDateTimeBestEffortUSOrZero(time_string[, time_zone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," \u2014 String containing a date or date with time to convert. The date must be in the US date format (",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY"),", etc). ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-timezone"},"Timezone"),". The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the timezone. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Supported non-standard formats")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string containing 9..10 digit ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"unix timestamp"),"."),(0,r.kt)("li",{parentName:"ul"},"A string with a date and a time components: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMMDDhhmmss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY hh:mm:ss"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM-DD-YY hh:mm"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss"),", etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a date, but no time component: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYYMM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY*MM"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM/DD/YYYY"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"MM-DD-YY"),", etc."),(0,r.kt)("li",{parentName:"ul"},"A string with a day and time: ",(0,r.kt)("inlineCode",{parentName:"li"},"DD"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"DD hh:mm"),". In this case, ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM")," are substituted with ",(0,r.kt)("inlineCode",{parentName:"li"},"2000-01"),"."),(0,r.kt)("li",{parentName:"ul"},"A string that includes date and time along with timezone offset information: ",(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD hh:mm:ss \xb1h:mm"),", etc. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"2020-12-12 17:36:00 -5:00"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime")," data type."),(0,r.kt)("li",{parentName:"ul"},"Zero date or zero date with time if the input string cannot be converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrZero('02/10/2021 21:12:57') AS parseDateTimeBestEffortUSOrZero;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrZero\u2500\u2510\n\u2502             2021-02-10 21:12:57 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrZero('02-10-2021 21:12:57 GMT', 'Asia/Istanbul') AS parseDateTimeBestEffortUSOrZero;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrZero\u2500\u2510\n\u2502             2021-02-11 00:12:57 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrZero('02.10.2021') AS parseDateTimeBestEffortUSOrZero;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrZero\u2500\u2510\n\u2502             2021-02-10 00:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTimeBestEffortUSOrZero('02.2021') AS parseDateTimeBestEffortUSOrZero;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500parseDateTimeBestEffortUSOrZero\u2500\u2510\n\u2502             1970-01-01 00:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"parsedatetime64besteffort"},"parseDateTime64BestEffort"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffort"},"parseDateTimeBestEffort")," function but also parse milliseconds and microseconds and returns ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/functions/type-conversion-functions#data_type-datetime"},"DateTime")," data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"parseDateTime64BestEffort(time_string [, precision [, time_zone]])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," \u2014 String containing a date or date with time to convert. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"precision")," \u2014 Required precision. ",(0,r.kt)("inlineCode",{parentName:"li"},"3")," \u2014 for milliseconds, ",(0,r.kt)("inlineCode",{parentName:"li"},"6")," \u2014 for microseconds. Default \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"3"),". Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-timezone"},"Timezone"),". The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the timezone. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT parseDateTime64BestEffort('2021-01-01') AS a, toTypeName(a) AS t\nUNION ALL\nSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346') AS a, toTypeName(a) AS t\nUNION ALL\nSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',6) AS a, toTypeName(a) AS t\nUNION ALL\nSELECT parseDateTime64BestEffort('2021-01-01 01:01:00.12346',3,'Asia/Istanbul') AS a, toTypeName(a) AS t\nFORMAT PrettyCompactMonoBlock;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u252c\u2500t\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2021-01-01 01:01:00.123000 \u2502 DateTime64(3)                  \u2502\n\u2502 2021-01-01 00:00:00.000000 \u2502 DateTime64(3)                  \u2502\n\u2502 2021-01-01 01:01:00.123460 \u2502 DateTime64(6)                  \u2502\n\u2502 2020-12-31 22:01:00.123000 \u2502 DateTime64(3, 'Asia/Istanbul') \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"parsedatetime32besteffortornull"},"parseDateTime64BestEffortOrNull"),(0,r.kt)("p",null,"Same as for ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetime64besteffort"},"parseDateTime64BestEffort")," except that it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," when it encounters a date format that cannot be processed."),(0,r.kt)("h2",{id:"parsedatetime64besteffortorzero"},"parseDateTime64BestEffortOrZero"),(0,r.kt)("p",null,"Same as for ",(0,r.kt)("a",{parentName:"p",href:"#parsedatetimebesteffort"},"parseDateTime64BestEffort")," except that it returns zero date or zero date time when it encounters a date format that cannot be processed."),(0,r.kt)("h2",{id:"tolowcardinality"},"toLowCardinality"),(0,r.kt)("p",null,"Converts input parameter to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/lowcardinality"},"LowCardianlity")," version of same data type."),(0,r.kt)("p",null,"To convert data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"LowCardinality")," data type use the ",(0,r.kt)("a",{parentName:"p",href:"#type_conversion_function-cast"},"CAST")," function. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST(x as String)"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toLowCardinality(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/syntax#syntax-expressions"},"Expression")," resulting in one of the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/#data_types"},"supported data types"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Result of ",(0,r.kt)("inlineCode",{parentName:"li"},"expr"),".")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"LowCardinality(expr_result_type)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toLowCardinality('1');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toLowCardinality('1')\u2500\u2510\n\u2502 1                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tounixtimestamp64milli"},"toUnixTimestamp64Milli"),(0,r.kt)("h2",{id:"tounixtimestamp64micro"},"toUnixTimestamp64Micro"),(0,r.kt)("h2",{id:"tounixtimestamp64nano"},"toUnixTimestamp64Nano"),(0,r.kt)("p",null,"Converts a ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime64")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64")," value with fixed sub-second precision. Input value is scaled up or down appropriately depending on it precision."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The output value is a timestamp in UTC, not in the timezone of ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime64"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toUnixTimestamp64Milli(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 DateTime64 value with any precision.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH toDateTime64('2019-09-16 19:20:12.345678910', 6) AS dt64\nSELECT toUnixTimestamp64Milli(dt64);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toUnixTimestamp64Milli(dt64)\u2500\u2510\n\u2502                1568650812345 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH toDateTime64('2019-09-16 19:20:12.345678910', 6) AS dt64\nSELECT toUnixTimestamp64Nano(dt64);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toUnixTimestamp64Nano(dt64)\u2500\u2510\n\u2502         1568650812345678000 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"fromunixtimestamp64milli"},"fromUnixTimestamp64Milli"),(0,r.kt)("h2",{id:"fromunixtimestamp64micro"},"fromUnixTimestamp64Micro"),(0,r.kt)("h2",{id:"fromunixtimestamp64nano"},"fromUnixTimestamp64Nano"),(0,r.kt)("p",null,"Converts an ",(0,r.kt)("inlineCode",{parentName:"p"},"Int64")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime64")," value with fixed sub-second precision and optional timezone. Input value is scaled up or down appropriately depending on it\u2019s precision. Please note that input value is treated as UTC timestamp, not timestamp at given (or implicit) timezone."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"fromUnixTimestamp64Milli(value [, ti])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64")," value with any precision."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timezone")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," (optional) timezone name of the result.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," converted to the ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime64")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH CAST(1234567891011, 'Int64') AS i64\nSELECT fromUnixTimestamp64Milli(i64, 'UTC');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500fromUnixTimestamp64Milli(i64, 'UTC')\u2500\u2510\n\u2502              2009-02-13 23:31:31.011 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"formatrow"},"formatRow"),(0,r.kt)("p",null,"Converts arbitrary expressions into a string via given format."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"formatRow(format, x, y, ...)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"format")," \u2014 Text format. For example, ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/interfaces/formats#csv"},"CSV"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/interfaces/formats#tabseparated"},"TSV"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x"),",",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", ... \u2014 Expressions.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A formatted string (for text formats it's usually terminated with the new line character).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT formatRow('CSV', number, 'good')\nFROM numbers(3);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'\u250c\u2500formatRow(\'CSV\', number, \'good\')\u2500\u2510\n\u2502 0,"good"\n                         \u2502\n\u2502 1,"good"\n                         \u2502\n\u2502 2,"good"\n                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,r.kt)("h2",{id:"formatrownonewline"},"formatRowNoNewline"),(0,r.kt)("p",null,"Converts arbitrary expressions into a string via given format. The function trims the last ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n")," if any."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"formatRowNoNewline(format, x, y, ...)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"format")," \u2014 Text format. For example, ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/interfaces/formats#csv"},"CSV"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/interfaces/formats#tabseparated"},"TSV"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x"),",",(0,r.kt)("inlineCode",{parentName:"li"},"y"),", ... \u2014 Expressions.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A formatted string.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT formatRowNoNewline('CSV', number, 'good')\nFROM numbers(3);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'\u250c\u2500formatRowNoNewline(\'CSV\', number, \'good\')\u2500\u2510\n\u2502 0,"good"                                  \u2502\n\u2502 1,"good"                                  \u2502\n\u2502 2,"good"                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,r.kt)("h2",{id:"snowflaketodatetime"},"snowflakeToDateTime"),(0,r.kt)("p",null,"Extracts time from ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Snowflake_ID"},"Snowflake ID")," as ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime")," format."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"snowflakeToDateTime(value [, time_zone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Snowflake ID. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int64"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-timezone"},"Timezone"),". The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the timezone. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input value converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT snowflakeToDateTime(CAST('1426860702823350272', 'Int64'), 'UTC');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\n\u250c\u2500snowflakeToDateTime(CAST('1426860702823350272', 'Int64'), 'UTC')\u2500\u2510\n\u2502                                              2021-08-15 10:57:56 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"snowflaketodatetime64"},"snowflakeToDateTime64"),(0,r.kt)("p",null,"Extracts time from ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Snowflake_ID"},"Snowflake ID")," as ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/datetime64"},"DateTime64")," format."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"snowflakeToDateTime64(value [, time_zone])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Snowflake ID. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int64"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time_zone")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-timezone"},"Timezone"),". The function parses ",(0,r.kt)("inlineCode",{parentName:"li"},"time_string")," according to the timezone. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input value converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime64"},"DateTime64")," data type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT snowflakeToDateTime64(CAST('1426860802823350272', 'Int64'), 'UTC');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\n\u250c\u2500snowflakeToDateTime64(CAST('1426860802823350272', 'Int64'), 'UTC')\u2500\u2510\n\u2502                                            2021-08-15 10:58:19.841 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"datetimetosnowflake"},"dateTimeToSnowflake"),(0,r.kt)("p",null,"Converts ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime")," value to the first ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Snowflake_ID"},"Snowflake ID")," at the giving time."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dateTimeToSnowflake(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Date and time. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime"},"DateTime"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input value converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int64")," data type as the first Snowflake ID at that time.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai') AS dt SELECT dateTimeToSnowflake(dt);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dateTimeToSnowflake(dt)\u2500\u2510\n\u2502     1426860702823350272 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"datetime64tosnowflake"},"dateTime64ToSnowflake"),(0,r.kt)("p",null,"Convert ",(0,r.kt)("a",{parentName:"p",href:"/docs/testing/docs/en/sql-reference/data-types/datetime64"},"DateTime64")," to the first ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Snowflake_ID"},"Snowflake ID")," at the giving time."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dateTime64ToSnowflake(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Date and time. ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/datetime64"},"DateTime64"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Input value converted to the ",(0,r.kt)("a",{parentName:"li",href:"/docs/testing/docs/en/sql-reference/data-types/int-uint"},"Int64")," data type as the first Snowflake ID at that time.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH toDateTime64('2021-08-15 18:57:56.492', 3, 'Asia/Shanghai') AS dt64 SELECT dateTime64ToSnowflake(dt64);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dateTime64ToSnowflake(dt64)\u2500\u2510\n\u2502         1426860704886947840 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}k.isMDXComponent=!0}}]);