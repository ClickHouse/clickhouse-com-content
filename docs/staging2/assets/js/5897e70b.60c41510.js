"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[34245],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),b=m(n),c=i,d=b["".concat(o,".").concat(c)]||b[c]||p[c]||r;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=b;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},17:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],s={sidebar_position:10,sidebar_label:"RabbitMQ"},o="RabbitMQ Engine",m={unversionedId:"en/engines/table-engines/integrations/rabbitmq",id:"en/engines/table-engines/integrations/rabbitmq",title:"RabbitMQ Engine",description:"rabbitmq-engine}",source:"@site/docs/en/engines/table-engines/integrations/rabbitmq.md",sourceDirName:"en/engines/table-engines/integrations",slug:"/en/engines/table-engines/integrations/rabbitmq",permalink:"/docs/staging2/docs/en/engines/table-engines/integrations/rabbitmq",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,sidebar_label:"RabbitMQ"},sidebar:"tutorialSidebar",previous:{title:"EmbeddedRocksDB",permalink:"/docs/staging2/docs/en/engines/table-engines/integrations/embedded-rocksdb"},next:{title:"PostgreSQL",permalink:"/docs/staging2/docs/en/engines/table-engines/integrations/postgresql"}},u={},p=[{value:"Creating a Table",id:"table_engine-rabbitmq-creating-a-table",level:2},{value:"Description",id:"description",level:2},{value:"Virtual Columns",id:"virtual-columns",level:2}],b={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rabbitmq-engine"},"RabbitMQ Engine"),(0,r.kt)("p",null,"This engine allows integrating ClickHouse with ",(0,r.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com"},"RabbitMQ"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RabbitMQ")," lets you:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Publish or subscribe to data flows."),(0,r.kt)("li",{parentName:"ul"},"Process streams as they become available.")),(0,r.kt)("h2",{id:"table_engine-rabbitmq-creating-a-table"},"Creating a Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n) ENGINE = RabbitMQ SETTINGS\n    rabbitmq_host_port = 'host:port' [or rabbitmq_address = 'amqp(s)://guest:guest@localhost/vhost'],\n    rabbitmq_exchange_name = 'exchange_name',\n    rabbitmq_format = 'data_format'[,]\n    [rabbitmq_exchange_type = 'exchange_type',]\n    [rabbitmq_routing_key_list = 'key1,key2,...',]\n    [rabbitmq_secure = 0,]\n    [rabbitmq_row_delimiter = 'delimiter_symbol',]\n    [rabbitmq_schema = '',]\n    [rabbitmq_num_consumers = N,]\n    [rabbitmq_num_queues = N,]\n    [rabbitmq_queue_base = 'queue',]\n    [rabbitmq_deadletter_exchange = 'dl-exchange',]\n    [rabbitmq_persistent = 0,]\n    [rabbitmq_skip_broken_messages = N,]\n    [rabbitmq_max_block_size = N,]\n    [rabbitmq_flush_interval_ms = N]\n    [rabbitmq_queue_settings_list = 'x-dead-letter-exchange=my-dlx,x-max-length=10,x-overflow=reject-publish']\n")),(0,r.kt)("p",null,"Required parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_host_port")," \u2013 host:port (for example, ",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:5672"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_exchange_name")," \u2013 RabbitMQ exchange name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_format")," \u2013 Message format. Uses the same notation as the SQL ",(0,r.kt)("inlineCode",{parentName:"li"},"FORMAT")," function, such as ",(0,r.kt)("inlineCode",{parentName:"li"},"JSONEachRow"),". For more information, see the ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging2/docs/en/interfaces/formats"},"Formats")," section.")),(0,r.kt)("p",null,"Optional parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_exchange_type")," \u2013 The type of RabbitMQ exchange: ",(0,r.kt)("inlineCode",{parentName:"li"},"direct"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"fanout"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"topic"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"headers"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"consistent_hash"),". Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"fanout"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_routing_key_list")," \u2013 A comma-separated list of routing keys."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_row_delimiter")," \u2013 Delimiter character, which ends the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_schema")," \u2013 Parameter that must be used if the format requires a schema definition. For example, ",(0,r.kt)("a",{parentName:"li",href:"https://capnproto.org/"},"Cap\u2019n Proto")," requires the path to the schema file and the name of the root ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.capnp:Message")," object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_consumers")," \u2013 The number of consumers per table. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),". Specify more consumers if the throughput of one consumer is insufficient."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_queues")," \u2013 Total number of queues. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),". Increasing this number can significantly improve performance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_queue_base")," - Specify a hint for queue names. Use cases of this setting are described below."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_deadletter_exchange")," - Specify name for a ",(0,r.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/dlx.html"},"dead letter exchange"),". You can create another table with this exchange name and collect messages in cases when they are republished to dead letter exchange. By default dead letter exchange is not specified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_persistent")," - If set to 1 (true), in insert query delivery mode will be set to 2 (marks messages as 'persistent'). Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_skip_broken_messages")," \u2013 RabbitMQ message parser tolerance to schema-incompatible messages per block. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),". If ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_skip_broken_messages = N")," then the engine skips ",(0,r.kt)("em",{parentName:"li"},"N")," RabbitMQ messages that cannot be parsed (a message equals a row of data)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_max_block_size")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_flush_interval_ms")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_queue_settings_list")," - allows to set RabbitMQ settings when creating a queue. Available settings: ",(0,r.kt)("inlineCode",{parentName:"li"},"x-max-length"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-max-length-bytes"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-message-ttl"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-expires"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-priority"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-max-priority"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-overflow"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-dead-letter-exchange"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"x-queue-type"),". The ",(0,r.kt)("inlineCode",{parentName:"li"},"durable")," setting is enabled automatically for the queue.")),(0,r.kt)("p",null,"SSL connection:"),(0,r.kt)("p",null,"Use either ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_secure = 1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"amqps")," in connection address: ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_address = 'amqps://guest:guest@localhost/vhost'"),".\nThe default behaviour of the used library is not to check if the created TLS connection is sufficiently secure. Whether the certificate is expired, self-signed, missing or invalid: the connection is simply permitted. More strict checking of certificates can possibly be implemented in the future."),(0,r.kt)("p",null,"Also format settings can be added along with rabbitmq-related settings."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"  CREATE TABLE queue (\n    key UInt64,\n    value UInt64,\n    date DateTime\n  ) ENGINE = RabbitMQ SETTINGS rabbitmq_host_port = 'localhost:5672',\n                            rabbitmq_exchange_name = 'exchange1',\n                            rabbitmq_format = 'JSONEachRow',\n                            rabbitmq_num_consumers = 5,\n                            date_time_input_format = 'best_effort';\n")),(0,r.kt)("p",null,"The RabbitMQ server configuration should be added using the ClickHouse config file."),(0,r.kt)("p",null,"Required configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"}," <rabbitmq>\n    <username>root</username>\n    <password>clickhouse</password>\n </rabbitmq>\n")),(0,r.kt)("p",null,"Additional configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"}," <rabbitmq>\n    <vhost>clickhouse</vhost>\n </rabbitmq>\n")),(0,r.kt)("h2",{id:"description"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," is not particularly useful for reading messages (except for debugging), because each message can be read only once. It is more practical to create real-time threads using ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging2/docs/en/sql-reference/statements/create/view"},"materialized views"),". To do this:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use the engine to create a RabbitMQ consumer and consider it a data stream."),(0,r.kt)("li",{parentName:"ol"},"Create a table with the desired structure."),(0,r.kt)("li",{parentName:"ol"},"Create a materialized view that converts data from the engine and puts it into a previously created table.")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"MATERIALIZED VIEW")," joins the engine, it starts collecting data in the background. This allows you to continually receive messages from RabbitMQ and convert them to the required format using ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT"),".\nOne RabbitMQ table can have as many materialized views as you like."),(0,r.kt)("p",null,"Data can be channeled based on ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_exchange_type")," and the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_routing_key_list"),".\nThere can be no more than one exchange per table. One exchange can be shared between multiple tables - it enables routing into multiple tables at the same time."),(0,r.kt)("p",null,"Exchange type options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"direct")," - Routing is based on the exact matching of keys. Example table key list: ",(0,r.kt)("inlineCode",{parentName:"li"},"key1,key2,key3,key4,key5"),", message key can equal any of them."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fanout")," - Routing to all tables (where exchange name is the same) regardless of the keys."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topic")," - Routing is based on patterns with dot-separated keys. Examples: ",(0,r.kt)("inlineCode",{parentName:"li"},"*.logs"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"records.*.*.2020"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"*.2018,*.2019,*.2020"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headers")," - Routing is based on ",(0,r.kt)("inlineCode",{parentName:"li"},"key=value")," matches with a setting ",(0,r.kt)("inlineCode",{parentName:"li"},"x-match=all")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"x-match=any"),". Example table key list: ",(0,r.kt)("inlineCode",{parentName:"li"},"x-match=all,format=logs,type=report,year=2020"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consistent_hash")," - Data is evenly distributed between all bound tables (where the exchange name is the same). Note that this exchange type must be enabled with RabbitMQ plugin: ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq-plugins enable rabbitmq_consistent_hash_exchange"),".")),(0,r.kt)("p",null,"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_queue_base")," may be used for the following cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"to let different tables share queues, so that multiple consumers could be registered for the same queues, which makes a better performance. If using ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_consumers")," and/or ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_queues")," settings, the exact match of queues is achieved in case these parameters are the same."),(0,r.kt)("li",{parentName:"ul"},"to be able to restore reading from certain durable queues when not all messages were successfully consumed. To resume consumption from one specific queue - set its name in ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_queue_base")," setting and do not specify ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_consumers")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_queues")," (defaults to 1). To resume consumption from all queues, which were declared for a specific table - just specify the same settings: ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_queue_base"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_consumers"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq_num_queues"),". By default, queue names will be unique to tables."),(0,r.kt)("li",{parentName:"ul"},"to reuse queues as they are declared durable and not auto-deleted. (Can be deleted via any of RabbitMQ CLI tools.)")),(0,r.kt)("p",null,"To improve performance, received messages are grouped into blocks the size of ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging2/docs/en/operations/server-configuration-parameters/settings#settings-max_insert_block_size"},"max_insert_block_size"),". If the block wasn\u2019t formed within ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging2/docs/en/operations/server-configuration-parameters/settings"},"stream_flush_interval_ms")," milliseconds, the data will be flushed to the table regardless of the completeness of the block."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_num_consumers")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_num_queues")," settings are specified along with ",(0,r.kt)("inlineCode",{parentName:"p"},"rabbitmq_exchange_type"),", then:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rabbitmq-consistent-hash-exchange")," plugin must be enabled."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message_id")," property of the published messages must be specified (unique for each message/batch).")),(0,r.kt)("p",null,"For insert query there is message metadata, which is added for each published message: ",(0,r.kt)("inlineCode",{parentName:"p"},"messageID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"republished")," flag (true, if published more than once) - can be accessed via message headers."),(0,r.kt)("p",null,"Do not use the same table for inserts and materialized views."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"  CREATE TABLE queue (\n    key UInt64,\n    value UInt64\n  ) ENGINE = RabbitMQ SETTINGS rabbitmq_host_port = 'localhost:5672',\n                            rabbitmq_exchange_name = 'exchange1',\n                            rabbitmq_exchange_type = 'headers',\n                            rabbitmq_routing_key_list = 'format=logs,type=report,year=2020',\n                            rabbitmq_format = 'JSONEachRow',\n                            rabbitmq_num_consumers = 5;\n\n  CREATE TABLE daily (key UInt64, value UInt64)\n    ENGINE = MergeTree() ORDER BY key;\n\n  CREATE MATERIALIZED VIEW consumer TO daily\n    AS SELECT key, value FROM queue;\n\n  SELECT key, value FROM daily ORDER BY key;\n")),(0,r.kt)("h2",{id:"virtual-columns"},"Virtual Columns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_exchange_name")," - RabbitMQ exchange name."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_channel_id")," - ChannelID, on which consumer, who received the message, was declared."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_delivery_tag")," - DeliveryTag of the received message. Scoped per channel."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_redelivered")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"redelivered")," flag of the message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_message_id")," - messageID of the received message; non-empty if was set, when message was published."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_timestamp")," - timestamp of the received message; non-empty if was set, when message was published.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/engines/table-engines/integrations/rabbitmq/"},"Original article")," "))}c.isMDXComponent=!0}}]);