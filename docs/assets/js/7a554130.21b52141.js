"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[31479],{3905:function(e,t,l){l.d(t,{Zo:function(){return o},kt:function(){return c}});var n=l(67294);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function p(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?p(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):p(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function u(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},p=Object.keys(e);for(n=0;n<p.length;n++)l=p[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)l=p[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var s=n.createContext({}),i=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},o=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,p=e.originalType,s=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),k=i(l),c=a,d=k["".concat(s,".").concat(c)]||k[c]||m[c]||p;return l?n.createElement(d,r(r({ref:t},o),{},{components:l})):n.createElement(d,r({ref:t},o))}));function c(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=l.length,r=new Array(p);r[0]=k;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,r[1]=u;for(var i=2;i<p;i++)r[i]=l[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}k.displayName="MDXCreateElement"},89181:function(e,t,l){l.r(t),l.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return u},metadata:function(){return i},toc:function(){return m}});var n=l(87462),a=l(63366),p=(l(67294),l(3905)),r=["components"],u={sidebar_position:66,sidebar_label:"Tuples"},s="Functions for Working with Tuples",i={unversionedId:"en/sql-reference/functions/tuple-functions",id:"en/sql-reference/functions/tuple-functions",title:"Functions for Working with Tuples",description:"tuple-functions}",source:"@site/docs/en/sql-reference/functions/tuple-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/tuple-functions",permalink:"/docs/en/sql-reference/functions/tuple-functions",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/functions/tuple-functions.md",tags:[],version:"current",sidebarPosition:66,frontMatter:{sidebar_position:66,sidebar_label:"Tuples"},sidebar:"tutorialSidebar",previous:{title:"Introspection",permalink:"/docs/en/sql-reference/functions/introspection"},next:{title:"Encryption",permalink:"/docs/en/sql-reference/functions/encryption-functions"}},o={},m=[{value:"tuple",id:"tuple",level:2},{value:"tupleElement",id:"tupleelement",level:2},{value:"untuple",id:"untuple",level:2},{value:"tupleHammingDistance",id:"tuplehammingdistance",level:2},{value:"tupleToNameValuePairs",id:"tupletonamevaluepairs",level:2},{value:"tuplePlus",id:"tupleplus",level:2},{value:"tupleMinus",id:"tupleminus",level:2},{value:"tupleMultiply",id:"tuplemultiply",level:2},{value:"tupleDivide",id:"tupledivide",level:2},{value:"tupleNegate",id:"tuplenegate",level:2},{value:"tupleMultiplyByNumber",id:"tuplemultiplybynumber",level:2},{value:"tupleDivideByNumber",id:"tupledividebynumber",level:2},{value:"dotProduct",id:"dotproduct",level:2},{value:"L1Norm",id:"l1norm",level:2},{value:"L2Norm",id:"l2norm",level:2},{value:"LinfNorm",id:"linfnorm",level:2},{value:"LpNorm",id:"lpnorm",level:2},{value:"L1Distance",id:"l1distance",level:2},{value:"L2Distance",id:"l2distance",level:2},{value:"LinfDistance",id:"linfdistance",level:2},{value:"LpDistance",id:"lpdistance",level:2},{value:"L1Normalize",id:"l1normalize",level:2},{value:"L2Normalize",id:"l2normalize",level:2},{value:"LinfNormalize",id:"linfnormalize",level:2},{value:"LpNormalize",id:"lpnormalize",level:2},{value:"cosineDistance",id:"cosinedistance",level:2}],k={toc:m};function c(e){var t=e.components,l=(0,a.Z)(e,r);return(0,p.kt)("wrapper",(0,n.Z)({},k,l,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"tuple-functions"},"Functions for Working with Tuples"),(0,p.kt)("h2",{id:"tuple"},"tuple"),(0,p.kt)("p",null,"A function that allows grouping multiple columns.\nFor columns with the types T1, T2, \u2026, it returns a Tuple(T1, T2, \u2026) type tuple containing these columns. There is no cost to execute the function.\nTuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can\u2019t be written to a table."),(0,p.kt)("p",null,"The function implements the operator ",(0,p.kt)("inlineCode",{parentName:"p"},"(x, y, \u2026)"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tuple(x, y, \u2026)\n")),(0,p.kt)("h2",{id:"tupleelement"},"tupleElement"),(0,p.kt)("p",null,"A function that allows getting a column from a tuple.\n\u2018N\u2019 is the column index, starting from 1. \u2018N\u2019 must be a constant. \u2018N\u2019 must be a strict postive integer no greater than the size of the tuple.\nThere is no cost to execute the function."),(0,p.kt)("p",null,"The function implements the operator ",(0,p.kt)("inlineCode",{parentName:"p"},"x.N"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleElement(tuple, n)\n")),(0,p.kt)("h2",{id:"untuple"},"untuple"),(0,p.kt)("p",null,"Performs syntactic substitution of ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple#tuplet1-t2"},"tuple")," elements in the call location."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"untuple(x)\n")),(0,p.kt)("p",null,"You can use the ",(0,p.kt)("inlineCode",{parentName:"p"},"EXCEPT")," expression to skip columns as a result of the query."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"x")," \u2014 A ",(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," function, column, or tuple of elements. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"None.")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Examples")),(0,p.kt)("p",null,"Input table:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500key\u2500\u252c\u2500v1\u2500\u252c\u2500v2\u2500\u252c\u2500v3\u2500\u252c\u2500v4\u2500\u252c\u2500v5\u2500\u252c\u2500v6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 10 \u2502 20 \u2502 40 \u2502 30 \u2502 15 \u2502 (33,'ab') \u2502\n\u2502   2 \u2502 25 \u2502 65 \u2502 70 \u2502 40 \u2502  6 \u2502 (44,'cd') \u2502\n\u2502   3 \u2502 57 \u2502 30 \u2502 20 \u2502 10 \u2502  5 \u2502 (55,'ef') \u2502\n\u2502   4 \u2502 55 \u2502 12 \u2502  7 \u2502 80 \u2502 90 \u2502 (66,'gh') \u2502\n\u2502   5 \u2502 30 \u2502 50 \u2502 70 \u2502 25 \u2502 55 \u2502 (77,'kl') \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,"Example of using a ",(0,p.kt)("inlineCode",{parentName:"p"},"Tuple"),"-type column as the ",(0,p.kt)("inlineCode",{parentName:"p"},"untuple")," function parameter:"),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT untuple(v6) FROM kv;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500_ut_1\u2500\u252c\u2500_ut_2\u2500\u2510\n\u2502    33 \u2502 ab    \u2502\n\u2502    44 \u2502 cd    \u2502\n\u2502    55 \u2502 ef    \u2502\n\u2502    66 \u2502 gh    \u2502\n\u2502    77 \u2502 kl    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,"Note: the names are implementation specific and are subject to change. You should not assume specific names of the columns after application of the ",(0,p.kt)("inlineCode",{parentName:"p"},"untuple"),"."),(0,p.kt)("p",null,"Example of using an ",(0,p.kt)("inlineCode",{parentName:"p"},"EXCEPT")," expression:"),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT untuple((* EXCEPT (v2, v3),)) FROM kv;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500key\u2500\u252c\u2500v1\u2500\u252c\u2500v4\u2500\u252c\u2500v5\u2500\u252c\u2500v6\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 10 \u2502 30 \u2502 15 \u2502 (33,'ab') \u2502\n\u2502   2 \u2502 25 \u2502 40 \u2502  6 \u2502 (44,'cd') \u2502\n\u2502   3 \u2502 57 \u2502 10 \u2502  5 \u2502 (55,'ef') \u2502\n\u2502   4 \u2502 55 \u2502 80 \u2502 90 \u2502 (66,'gh') \u2502\n\u2502   5 \u2502 30 \u2502 25 \u2502 55 \u2502 (77,'kl') \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"See Also")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"))),(0,p.kt)("h2",{id:"tuplehammingdistance"},"tupleHammingDistance"),(0,p.kt)("p",null,"Returns the ",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hamming_distance"},"Hamming Distance")," between two tuples of the same size."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleHammingDistance(tuple1, tuple2)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,"Tuples should have the same type of the elements."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"The Hamming distance.")),(0,p.kt)("p",null,"Type: The result type is calculed the same way it is for ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/arithmetic-functions"},"Arithmetic functions"),", based on the number of elements in the input tuples."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    toTypeName(tupleHammingDistance(tuple(0), tuple(0))) AS t1,\n    toTypeName(tupleHammingDistance((0, 0), (0, 0))) AS t2,\n    toTypeName(tupleHammingDistance((0, 0, 0), (0, 0, 0))) AS t3,\n    toTypeName(tupleHammingDistance((0, 0, 0, 0), (0, 0, 0, 0))) AS t4,\n    toTypeName(tupleHammingDistance((0, 0, 0, 0, 0), (0, 0, 0, 0, 0))) AS t5\n")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500t1\u2500\u2500\u2500\u2500\u252c\u2500t2\u2500\u2500\u2500\u2500\u2500\u252c\u2500t3\u2500\u2500\u2500\u2500\u2500\u252c\u2500t4\u2500\u2500\u2500\u2500\u2500\u252c\u2500t5\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 UInt8 \u2502 UInt16 \u2502 UInt32 \u2502 UInt64 \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Examples")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleHammingDistance((1, 2, 3), (3, 2, 1)) AS HammingDistance;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500HammingDistance\u2500\u2510\n\u2502               2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,"Can be used with ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/hash-functions#ngramminhash"},"MinHash")," functions for detection of semi-duplicate strings:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleHammingDistance(wordShingleMinHash(string), wordShingleMinHashCaseInsensitive(string)) as HammingDistance FROM (SELECT 'ClickHouse is a column-oriented database management system for online analytical processing of queries.' AS string);\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500HammingDistance\u2500\u2510\n\u2502               2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tupletonamevaluepairs"},"tupleToNameValuePairs"),(0,p.kt)("p",null,"Turns a named tuple into an array of (name, value) pairs. For a ",(0,p.kt)("inlineCode",{parentName:"p"},"Tuple(a T, b T, ..., c T)")," returns ",(0,p.kt)("inlineCode",{parentName:"p"},"Array(Tuple(String, T), ...)"),"\nin which the ",(0,p.kt)("inlineCode",{parentName:"p"},"Strings")," represents the named fields of the tuple and ",(0,p.kt)("inlineCode",{parentName:"p"},"T")," are the values associated with those names. All values in the tuple should be of the same type."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleToNameValuePairs(tuple)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 Named tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")," with any types of values.")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"An array with (name, value) pairs.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"(",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String"),", ...))."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE tupletest (`col` Tuple(user_ID UInt64, session_ID UInt64) ENGINE = Memory;\n\nINSERT INTO tupletest VALUES (tuple( 100, 2502)), (tuple(1,100));\n\nSELECT tupleToNameValuePairs(col) FROM tupletest;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleToNameValuePairs(col)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [('user_ID',100),('session_ID',2502)] \u2502\n\u2502 [('user_ID',1),('session_ID',100)]    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,"It is possible to transform colums to rows using this function:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE tupletest (`col` Tuple(CPU Float64, Memory Float64, Disk Float64)) ENGINE = Memory;\n\nINSERT INTO tupletest VALUES(tuple(3.3, 5.5, 6.6));\n\nSELECT arrayJoin(tupleToNameValuePairs(col))FROM tupletest;\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayJoin(tupleToNameValuePairs(col))\u2500\u2510\n\u2502 ('CPU',3.3)                           \u2502\n\u2502 ('Memory',5.5)                        \u2502\n\u2502 ('Disk',6.6)                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("p",null,"If you pass a simple tuple to the function, ClickHouse uses the indexes of the values as their names:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleToNameValuePairs(tuple(3, 2, 1));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleToNameValuePairs(tuple(3, 2, 1))\u2500\u2510\n\u2502 [('1',3),('2',2),('3',1)]             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tupleplus"},"tuplePlus"),(0,p.kt)("p",null,"Calculates the sum of corresponding values of two tuples of the same size."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tuplePlus(tuple1, tuple2)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"vectorSum"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with the sum.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tuplePlus((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tuplePlus((1, 2), (2, 3))\u2500\u2510\n\u2502 (3,5)                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tupleminus"},"tupleMinus"),(0,p.kt)("p",null,"Calculates the subtraction of corresponding values of two tuples of the same size."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleMinus(tuple1, tuple2)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"vectorDifference"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with the result of subtraction.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleMinus((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleMinus((1, 2), (2, 3))\u2500\u2510\n\u2502 (-1,-1)                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tuplemultiply"},"tupleMultiply"),(0,p.kt)("p",null,"Calculates the multiplication of corresponding values of two tuples of the same size."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleMultiply(tuple1, tuple2)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with the multiplication.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleMultiply((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleMultiply((1, 2), (2, 3))\u2500\u2510\n\u2502 (2,6)                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tupledivide"},"tupleDivide"),(0,p.kt)("p",null,"Calculates the division of corresponding values of two tuples of the same size. Note that division by zero will return ",(0,p.kt)("inlineCode",{parentName:"p"},"inf"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleDivide(tuple1, tuple2)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with the result of division.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleDivide((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleDivide((1, 2), (2, 3))\u2500\u2510\n\u2502 (0.5,0.6666666666666666)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tuplenegate"},"tupleNegate"),(0,p.kt)("p",null,"Calculates the negation of the tuple values."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleNegate(tuple)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with the result of negation.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleNegate((1,  2));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleNegate((1, 2))\u2500\u2510\n\u2502 (-1,-2)             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tuplemultiplybynumber"},"tupleMultiplyByNumber"),(0,p.kt)("p",null,"Returns a tuple with all values multiplied by a number."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleMultiplyByNumber(tuple, number)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"number")," \u2014 Multiplier. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"Int/UInt"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/float"},"Float")," or ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with multiplied values.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleMultiplyByNumber((1, 2), -2.1);\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleMultiplyByNumber((1, 2), -2.1)\u2500\u2510\n\u2502 (-2.1,-4.2)                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"tupledividebynumber"},"tupleDivideByNumber"),(0,p.kt)("p",null,"Returns a tuple with all values divided by a number. Note that division by zero will return ",(0,p.kt)("inlineCode",{parentName:"p"},"inf"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"tupleDivideByNumber(tuple, number)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"number")," \u2014 Divider. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"Int/UInt"),", ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/float"},"Float")," or ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Tuple with divided values.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tupleDivideByNumber((1, 2), 0.5);\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tupleDivideByNumber((1, 2), 0.5)\u2500\u2510\n\u2502 (2,4)                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"dotproduct"},"dotProduct"),(0,p.kt)("p",null,"Calculates the scalar product of two tuples of the same size."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"dotProduct(tuple1, tuple2)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"scalarProduct"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Scalar product.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"Int/UInt"),", ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float")," or ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dotProduct((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dotProduct((1, 2), (2, 3))\u2500\u2510\n\u2502                          8 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"l1norm"},"L1Norm"),(0,p.kt)("p",null,"Calculates the sum of absolute values of a tuple."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"L1Norm(tuple)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normL1"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"L1-norm or ",(0,p.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Taxicab_geometry"},"taxicab geometry")," distance.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"),", ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float")," or ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT L1Norm((1, 2));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500L1Norm((1, 2))\u2500\u2510\n\u2502              3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"l2norm"},"L2Norm"),(0,p.kt)("p",null,"Calculates the square root of the sum of the squares of the tuple values."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"L2Norm(tuple)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normL2"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"L2-norm or ",(0,p.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Euclidean_distance"},"Euclidean distance"),".")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT L2Norm((1, 2));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500L2Norm((1, 2))\u2500\u2510\n\u2502 2.23606797749979 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"linfnorm"},"LinfNorm"),(0,p.kt)("p",null,"Calculates the maximum of absolute values of a tuple."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"LinfNorm(tuple)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normLinf"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Linf-norm or the maximum absolute value.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LinfNorm((1, -2));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500LinfNorm((1, -2))\u2500\u2510\n\u2502                 2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"lpnorm"},"LpNorm"),(0,p.kt)("p",null,"Calculates the root of ",(0,p.kt)("inlineCode",{parentName:"p"},"p"),"-th power of the sum of the absolute values of a tuple in the power of ",(0,p.kt)("inlineCode",{parentName:"p"},"p"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"LpNorm(tuple, p)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normLp"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"p")," \u2014 The power. Possible values: real number in ",(0,p.kt)("inlineCode",{parentName:"li"},"[1; inf)"),". ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt")," or ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm"},"Lp-norm"))),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LpNorm((1, -2), 2);\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500LpNorm((1, -2), 2)\u2500\u2510\n\u2502   2.23606797749979 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"l1distance"},"L1Distance"),(0,p.kt)("p",null,"Calculates the distance between two points (the values of the tuples are the coordinates) in ",(0,p.kt)("inlineCode",{parentName:"p"},"L1")," space (1-norm (",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Taxicab_geometry"},"taxicab geometry")," distance))."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"L1Distance(tuple1, tuple2)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"distanceL1"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"1-norm distance.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT L1Distance((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500L1Distance((1, 2), (2, 3))\u2500\u2510\n\u2502                          2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"l2distance"},"L2Distance"),(0,p.kt)("p",null,"Calculates the distance between two points (the values of the tuples are the coordinates) in Euclidean space (",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Euclidean_distance"},"Euclidean distance"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"L2Distance(tuple1, tuple2)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"distanceL2"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"2-norm distance.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT L2Distance((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500L2Distance((1, 2), (2, 3))\u2500\u2510\n\u2502         1.4142135623730951 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"linfdistance"},"LinfDistance"),(0,p.kt)("p",null,"Calculates the distance between two points (the values of the tuples are the coordinates) in ",(0,p.kt)("inlineCode",{parentName:"p"},"L_{inf}")," space (",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Norm_(mathematics)#Maximum_norm_(special_case_of:_infinity_norm,_uniform_norm,_or_supremum_norm)"},"maximum norm"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"LinfDistance(tuple1, tuple2)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"distanceLinf"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Infinity-norm distance.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LinfDistance((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500LinfDistance((1, 2), (2, 3))\u2500\u2510\n\u2502                            1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"lpdistance"},"LpDistance"),(0,p.kt)("p",null,"Calculates the distance between two points (the values of the tuples are the coordinates) in ",(0,p.kt)("inlineCode",{parentName:"p"},"Lp")," space (",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm"},"p-norm distance"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"LpDistance(tuple1, tuple2, p)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"distanceLp"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"p")," \u2014 The power. Possible values: real number from ",(0,p.kt)("inlineCode",{parentName:"li"},"[1; inf)"),". ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt")," or ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"p-norm distance.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LpDistance((1, 2), (2, 3), 3);\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500LpDistance((1, 2), (2, 3), 3)\u2500\u2510\n\u2502            1.2599210498948732 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"l1normalize"},"L1Normalize"),(0,p.kt)("p",null,"Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in ",(0,p.kt)("inlineCode",{parentName:"p"},"L1")," space (",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Taxicab_geometry"},"taxicab geometry"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"L1Normalize(tuple)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normalizeL1"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Unit vector.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")," of ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT L1Normalize((1, 2));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500L1Normalize((1, 2))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (0.3333333333333333,0.6666666666666666) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"l2normalize"},"L2Normalize"),(0,p.kt)("p",null,"Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in Euclidean space (using ",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Euclidean_distance"},"Euclidean distance"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"L2Normalize(tuple)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normalizeL1"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Unit vector.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")," of ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT L2Normalize((3, 4));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500L2Normalize((3, 4))\u2500\u2510\n\u2502 (0.6,0.8)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"linfnormalize"},"LinfNormalize"),(0,p.kt)("p",null,"Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in ",(0,p.kt)("inlineCode",{parentName:"p"},"L_{inf}")," space (using ",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Norm_(mathematics)#Maximum_norm_(special_case_of:_infinity_norm,_uniform_norm,_or_supremum_norm)"},"maximum norm"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"LinfNormalize(tuple)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normalizeLinf "),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Unit vector.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")," of ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LinfNormalize((3, 4));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500LinfNormalize((3, 4))\u2500\u2510\n\u2502 (0.75,1)              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"lpnormalize"},"LpNormalize"),(0,p.kt)("p",null,"Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in ",(0,p.kt)("inlineCode",{parentName:"p"},"Lp")," space (using ",(0,p.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm"},"p-norm"),")."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"LpNormalize(tuple, p)\n")),(0,p.kt)("p",null,"Alias: ",(0,p.kt)("inlineCode",{parentName:"p"},"normalizeLp "),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple")," \u2014 ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"p")," \u2014 The power. Possible values: any number from [1;inf). ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt")," or ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Unit vector.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")," of ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LpNormalize((3, 4),5);\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500LpNormalize((3, 4), 5)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (0.7187302630182624,0.9583070173576831) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,p.kt)("h2",{id:"cosinedistance"},"cosineDistance"),(0,p.kt)("p",null,"Calculates the cosine distance between two vectors (the values of the tuples are the coordinates). The less the returned value is, the more similar are the vectors."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Syntax")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"cosineDistance(tuple1, tuple2)\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Arguments")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple1")," \u2014 First tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),"."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tuple2")," \u2014 Second tuple. ",(0,p.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple"),".")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returned value")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"Cosine of the angle between two vectors substracted from one.")),(0,p.kt)("p",null,"Type: ",(0,p.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/float"},"Float"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example")),(0,p.kt)("p",null,"Query:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT cosineDistance((1, 2), (2, 3));\n")),(0,p.kt)("p",null,"Result:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500cosineDistance((1, 2), (2, 3))\u2500\u2510\n\u2502           0.007722123286332261 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}c.isMDXComponent=!0}}]);