"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[49729],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),k=p(n),m=s,h=k["".concat(o,".").concat(m)]||k[m]||c[m]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=k;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},21885:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(87462),s=n(63366),r=(n(67294),n(3905)),i=["components"],l={sidebar_position:41,sidebar_label:"For Searching in Strings"},o="Functions for Searching in Strings",p={unversionedId:"en/sql-reference/functions/string-search-functions",id:"en/sql-reference/functions/string-search-functions",title:"Functions for Searching in Strings",description:"functions-for-searching-strings}",source:"@site/docs/en/sql-reference/functions/string-search-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/string-search-functions",permalink:"/docs/en/sql-reference/functions/string-search-functions",editUrl:"https://github.com/ClickHouse/ClickHouse/tree/master/docs/en/sql-reference/functions/string-search-functions.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{sidebar_position:41,sidebar_label:"For Searching in Strings"},sidebar:"tutorialSidebar",previous:{title:"Strings",permalink:"/docs/en/sql-reference/functions/string-functions"},next:{title:"For Replacing in Strings",permalink:"/docs/en/sql-reference/functions/string-replace-functions"}},u={},c=[{value:"position(haystack, needle), locate(haystack, needle)",id:"position",level:2},{value:"positionCaseInsensitive",id:"positioncaseinsensitive",level:2},{value:"positionUTF8",id:"positionutf8",level:2},{value:"positionCaseInsensitiveUTF8",id:"positioncaseinsensitiveutf8",level:2},{value:"multiSearchAllPositions",id:"multisearchallpositions",level:2},{value:"multiSearchAllPositionsUTF8",id:"multiSearchAllPositionsUTF8",level:2},{value:"multiSearchFirstPosition(haystack, [needle<sub>1</sub>, needle<sub>2</sub>, \u2026, needle<sub>n</sub>])",id:"multisearchfirstposition",level:2},{value:"multiSearchFirstIndex(haystack, [needle<sub>1</sub>, needle<sub>2</sub>, \u2026, needle<sub>n</sub>])",id:"multisearchfirstindexhaystack-needle1-needle2-needlen",level:2},{value:"multiSearchAny(haystack, [needle<sub>1</sub>, needle<sub>2</sub>, \u2026, needle<sub>n</sub>])",id:"function-multisearchany",level:2},{value:"match(haystack, pattern)",id:"matchhaystack-pattern",level:2},{value:"multiMatchAny(haystack, [pattern<sub>1</sub>, pattern<sub>2</sub>, \u2026, pattern<sub>n</sub>])",id:"multimatchanyhaystack-pattern1-pattern2-patternn",level:2},{value:"multiMatchAnyIndex(haystack, [pattern<sub>1</sub>, pattern<sub>2</sub>, \u2026, pattern<sub>n</sub>])",id:"multimatchanyindexhaystack-pattern1-pattern2-patternn",level:2},{value:"multiMatchAllIndices(haystack, [pattern<sub>1</sub>, pattern<sub>2</sub>, \u2026, pattern<sub>n</sub>])",id:"multimatchallindiceshaystack-pattern1-pattern2-patternn",level:2},{value:"multiFuzzyMatchAny(haystack, distance, [pattern<sub>1</sub>, pattern<sub>2</sub>, \u2026, pattern<sub>n</sub>])",id:"multifuzzymatchanyhaystack-distance-pattern1-pattern2-patternn",level:2},{value:"multiFuzzyMatchAnyIndex(haystack, distance, [pattern<sub>1</sub>, pattern<sub>2</sub>, \u2026, pattern<sub>n</sub>])",id:"multifuzzymatchanyindexhaystack-distance-pattern1-pattern2-patternn",level:2},{value:"multiFuzzyMatchAllIndices(haystack, distance, [pattern<sub>1</sub>, pattern<sub>2</sub>, \u2026, pattern<sub>n</sub>])",id:"multifuzzymatchallindiceshaystack-distance-pattern1-pattern2-patternn",level:2},{value:"extract(haystack, pattern)",id:"extracthaystack-pattern",level:2},{value:"extractAll(haystack, pattern)",id:"extractallhaystack-pattern",level:2},{value:"extractAllGroupsHorizontal",id:"extractallgroups-horizontal",level:2},{value:"extractAllGroupsVertical",id:"extractallgroups-vertical",level:2},{value:"like(haystack, pattern), haystack LIKE pattern operator",id:"function-like",level:2},{value:"notLike(haystack, pattern), haystack NOT LIKE pattern operator",id:"function-notlike",level:2},{value:"ilike",id:"ilike",level:2},{value:"ngramDistance(haystack, needle)",id:"ngramdistancehaystack-needle",level:2},{value:"ngramSearch(haystack, needle)",id:"ngramsearchhaystack-needle",level:2},{value:"countSubstrings",id:"countSubstrings",level:2},{value:"countSubstringsCaseInsensitive",id:"countSubstringsCaseInsensitive",level:2},{value:"countSubstringsCaseInsensitiveUTF8",id:"countSubstringsCaseInsensitiveUTF8",level:2},{value:"countMatches(haystack, pattern)",id:"countmatcheshaystack-pattern",level:2}],k={toc:c};function m(e){var t=e.components,n=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"functions-for-searching-strings"},"Functions for Searching in Strings"),(0,r.kt)("p",null,"The search is case-sensitive by default in all these functions. There are separate variants for case insensitive search."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Functions for ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/string-replace-functions"},"replacing")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/string-functions"},"other manipulations with strings")," are described separately."))),(0,r.kt)("h2",{id:"position"},"position(haystack, needle), locate(haystack, needle)"),(0,r.kt)("p",null,"Searches for the substring ",(0,r.kt)("inlineCode",{parentName:"p"},"needle")," in the string ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack"),"."),(0,r.kt)("p",null,"Returns the position (in bytes) of the found substring in the string, starting from 1."),(0,r.kt)("p",null,"For a case-insensitive search, use the function ",(0,r.kt)("a",{parentName:"p",href:"#positioncaseinsensitive"},"positionCaseInsensitive"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"position(haystack, needle[, start_pos])\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"position(needle IN haystack)\n")),(0,r.kt)("p",null,"Alias: ",(0,r.kt)("inlineCode",{parentName:"p"},"locate(haystack, needle[, start_pos])"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Syntax of ",(0,r.kt)("inlineCode",{parentName:"p"},"position(needle IN haystack)")," provides SQL-compatibility, the function works the same way as to ",(0,r.kt)("inlineCode",{parentName:"p"},"position(haystack, needle)"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 String, in which substring will to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 Substring to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2013 Position of the first character in the string to start search. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"),". Optional.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Starting position in bytes (counting from 1), if substring was found."),(0,r.kt)("li",{parentName:"ul"},"0, if the substring was not found.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"The phrase \u201cHello, world!\u201d contains a set of bytes representing a single-byte encoded text. The function returns some expected result:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT position('Hello, world!', '!');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500position('Hello, world!', '!')\u2500\u2510\n\u2502                             13 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    position('Hello, world!', 'o', 1),\n    position('Hello, world!', 'o', 7)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500position('Hello, world!', 'o', 1)\u2500\u252c\u2500position('Hello, world!', 'o', 7)\u2500\u2510\n\u2502                                 5 \u2502                                 9 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The same phrase in Russian contains characters which can\u2019t be represented using a single byte. The function returns some unexpected result (use ",(0,r.kt)("a",{parentName:"p",href:"#positionutf8"},"positionUTF8")," function for multi-byte encoded text):"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT position('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', '!');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500position('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', '!')\u2500\u2510\n\u2502                            21 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples for POSITION(needle IN haystack) syntax")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 3 = position('c' IN 'abc');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500equals(3, position('abc', 'c'))\u2500\u2510\n\u2502                               1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 6 = position('/' IN s) FROM (SELECT 'Hello/World' AS s);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500equals(6, position(s, '/'))\u2500\u2510\n\u2502                           1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"positioncaseinsensitive"},"positionCaseInsensitive"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("a",{parentName:"p",href:"#position"},"position")," returns the position (in bytes) of the found substring in the string, starting from 1. Use the function for a case-insensitive search."),(0,r.kt)("p",null,"Works under the assumption that the string contains a set of bytes representing a single-byte encoded text. If this assumption is not met and a character can\u2019t be represented using a single byte, the function does not throw an exception and returns some unexpected result. If character can be represented using two bytes, it will use two bytes and so on."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"positionCaseInsensitive(haystack, needle[, start_pos])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 String, in which substring will to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 Substring to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2014 Optional parameter, position of the first character in the string to start search. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Starting position in bytes (counting from 1), if substring was found."),(0,r.kt)("li",{parentName:"ul"},"0, if the substring was not found.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT positionCaseInsensitive('Hello, world!', 'hello');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500positionCaseInsensitive('Hello, world!', 'hello')\u2500\u2510\n\u2502                                                 1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"positionutf8"},"positionUTF8"),(0,r.kt)("p",null,"Returns the position (in Unicode points) of the found substring in the string, starting from 1."),(0,r.kt)("p",null,"Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, the function does not throw an exception and returns some unexpected result. If character can be represented using two Unicode points, it will use two and so on."),(0,r.kt)("p",null,"For a case-insensitive search, use the function ",(0,r.kt)("a",{parentName:"p",href:"#positioncaseinsensitiveutf8"},"positionCaseInsensitiveUTF8"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"positionUTF8(haystack, needle[, start_pos])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 String, in which substring will to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 Substring to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2014 Optional parameter, position of the first character in the string to start search. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Starting position in Unicode points (counting from 1), if substring was found."),(0,r.kt)("li",{parentName:"ul"},"0, if the substring was not found.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"The phrase \u201cHello, world!\u201d in Russian contains a set of Unicode points representing a single-point encoded text. The function returns some expected result:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT positionUTF8('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', '!');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500positionUTF8('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', '!')\u2500\u2510\n\u2502                                12 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The phrase \u201cSalut, \xe9tudiante!\u201d, where character ",(0,r.kt)("inlineCode",{parentName:"p"},"\xe9")," can be represented using a one point (",(0,r.kt)("inlineCode",{parentName:"p"},"U+00E9"),") or two points (",(0,r.kt)("inlineCode",{parentName:"p"},"U+0065U+0301"),") the function can be returned some unexpected result:"),(0,r.kt)("p",null,"Query for the letter ",(0,r.kt)("inlineCode",{parentName:"p"},"\xe9"),", which is represented one Unicode point ",(0,r.kt)("inlineCode",{parentName:"p"},"U+00E9"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT positionUTF8('Salut, \xe9tudiante!', '!');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500positionUTF8('Salut, \xe9tudiante!', '!')\u2500\u2510\n\u2502                                     17 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query for the letter ",(0,r.kt)("inlineCode",{parentName:"p"},"\xe9"),", which is represented two Unicode points ",(0,r.kt)("inlineCode",{parentName:"p"},"U+0065U+0301"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT positionUTF8('Salut, \xe9tudiante!', '!');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500positionUTF8('Salut, \xe9tudiante!', '!')\u2500\u2510\n\u2502                                     18 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"positioncaseinsensitiveutf8"},"positionCaseInsensitiveUTF8"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("a",{parentName:"p",href:"#positionutf8"},"positionUTF8"),", but is case-insensitive. Returns the position (in Unicode points) of the found substring in the string, starting from 1."),(0,r.kt)("p",null,"Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, the function does not throw an exception and returns some unexpected result. If character can be represented using two Unicode points, it will use two and so on."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"positionCaseInsensitiveUTF8(haystack, needle[, start_pos])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 String, in which substring will to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 Substring to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2014 Optional parameter, position of the first character in the string to start search. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Starting position in Unicode points (counting from 1), if substring was found."),(0,r.kt)("li",{parentName:"ul"},"0, if the substring was not found.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT positionCaseInsensitiveUTF8('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', '\u041c\u0438\u0440');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500positionCaseInsensitiveUTF8('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!', '\u041c\u0438\u0440')\u2500\u2510\n\u2502                                                  9 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"multisearchallpositions"},"multiSearchAllPositions"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/string-search-functions#position"},"position")," but returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Array")," of positions (in bytes) of the found corresponding substrings in the string. Positions are indexed starting from 1."),(0,r.kt)("p",null,"The search is performed on sequences of bytes without respect to string encoding and collation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For case-insensitive ASCII search, use the function ",(0,r.kt)("inlineCode",{parentName:"li"},"multiSearchAllPositionsCaseInsensitive"),"."),(0,r.kt)("li",{parentName:"ul"},"For search in UTF-8, use the function ",(0,r.kt)("a",{parentName:"li",href:"#multiSearchAllPositionsUTF8"},"multiSearchAllPositionsUTF8"),"."),(0,r.kt)("li",{parentName:"ul"},"For case-insensitive UTF-8 search, use the function multiSearchAllPositionsCaseInsensitiveUTF8.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"multiSearchAllPositions(haystack, [needle1, needle2, ..., needlen])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 String, in which substring will to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 Substring to be searched. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Array of starting positions in bytes (counting from 1), if the corresponding substring was found and 0 if not found.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT multiSearchAllPositions('Hello, World!', ['hello', '!', 'world']);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500multiSearchAllPositions('Hello, World!', ['hello', '!', 'world'])\u2500\u2510\n\u2502 [0,13,0]                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"multiSearchAllPositionsUTF8"},"multiSearchAllPositionsUTF8"),(0,r.kt)("p",null,"See ",(0,r.kt)("inlineCode",{parentName:"p"},"multiSearchAllPositions"),"."),(0,r.kt)("h2",{id:"multisearchfirstposition"},"multiSearchFirstPosition(haystack, ","[","needle",(0,r.kt)("sub",null,"1"),", needle",(0,r.kt)("sub",null,"2"),", \u2026, needle",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," but returns the leftmost offset of the string ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," that is matched to some of the needles."),(0,r.kt)("p",null,"For a case-insensitive search or/and in UTF-8 format use functions ",(0,r.kt)("inlineCode",{parentName:"p"},"multiSearchFirstPositionCaseInsensitive, multiSearchFirstPositionUTF8, multiSearchFirstPositionCaseInsensitiveUTF8"),"."),(0,r.kt)("h2",{id:"multisearchfirstindexhaystack-needle1-needle2-needlen"},"multiSearchFirstIndex(haystack, ","[","needle",(0,r.kt)("sub",null,"1"),", needle",(0,r.kt)("sub",null,"2"),", \u2026, needle",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"Returns the index ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," (starting from 1) of the leftmost found needle",(0,r.kt)("sub",null,"i")," in the string ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," and 0 otherwise."),(0,r.kt)("p",null,"For a case-insensitive search or/and in UTF-8 format use functions ",(0,r.kt)("inlineCode",{parentName:"p"},"multiSearchFirstIndexCaseInsensitive, multiSearchFirstIndexUTF8, multiSearchFirstIndexCaseInsensitiveUTF8"),"."),(0,r.kt)("h2",{id:"function-multisearchany"},"multiSearchAny(haystack, ","[","needle",(0,r.kt)("sub",null,"1"),", needle",(0,r.kt)("sub",null,"2"),", \u2026, needle",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"Returns 1, if at least one string needle",(0,r.kt)("sub",null,"i")," matches the string ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," and 0 otherwise."),(0,r.kt)("p",null,"For a case-insensitive search or/and in UTF-8 format use functions ",(0,r.kt)("inlineCode",{parentName:"p"},"multiSearchAnyCaseInsensitive, multiSearchAnyUTF8, multiSearchAnyCaseInsensitiveUTF8"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In all ",(0,r.kt)("inlineCode",{parentName:"p"},"multiSearch*")," functions the number of needles should be less than 2",(0,r.kt)("sup",null,"8")," because of implementation specification."))),(0,r.kt)("h2",{id:"matchhaystack-pattern"},"match(haystack, pattern)"),(0,r.kt)("p",null,"Checks whether the string matches the ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," regular expression. A ",(0,r.kt)("inlineCode",{parentName:"p"},"re2")," regular expression. The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/re2/wiki/Syntax"},"syntax")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"re2")," regular expressions is more limited than the syntax of the Perl regular expressions."),(0,r.kt)("p",null,"Returns 0 if it does not match, or 1 if it matches."),(0,r.kt)("p",null,"The regular expression works with the string as if it is a set of bytes. The regular expression can\u2019t contain null bytes.\nFor patterns to search for substrings in a string, it is better to use LIKE or \u2018position\u2019, since they work much faster."),(0,r.kt)("h2",{id:"multimatchanyhaystack-pattern1-pattern2-patternn"},"multiMatchAny(haystack, ","[","pattern",(0,r.kt)("sub",null,"1"),", pattern",(0,r.kt)("sub",null,"2"),", \u2026, pattern",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"match"),", but returns 0 if none of the regular expressions are matched and 1 if any of the patterns matches. It uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/intel/hyperscan"},"hyperscan")," library. For patterns to search substrings in a string, it is better to use ",(0,r.kt)("inlineCode",{parentName:"p"},"multiSearchAny")," since it works much faster."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The length of any of the ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," string must be less than 2",(0,r.kt)("sup",null,"32")," bytes otherwise the exception is thrown. This restriction takes place because of hyperscan API."))),(0,r.kt)("h2",{id:"multimatchanyindexhaystack-pattern1-pattern2-patternn"},"multiMatchAnyIndex(haystack, ","[","pattern",(0,r.kt)("sub",null,"1"),", pattern",(0,r.kt)("sub",null,"2"),", \u2026, pattern",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"multiMatchAny"),", but returns any index that matches the haystack."),(0,r.kt)("h2",{id:"multimatchallindiceshaystack-pattern1-pattern2-patternn"},"multiMatchAllIndices(haystack, ","[","pattern",(0,r.kt)("sub",null,"1"),", pattern",(0,r.kt)("sub",null,"2"),", \u2026, pattern",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"multiMatchAny"),", but returns the array of all indicies that match the haystack in any order."),(0,r.kt)("h2",{id:"multifuzzymatchanyhaystack-distance-pattern1-pattern2-patternn"},"multiFuzzyMatchAny(haystack, distance, ","[","pattern",(0,r.kt)("sub",null,"1"),", pattern",(0,r.kt)("sub",null,"2"),", \u2026, pattern",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"multiMatchAny"),", but returns 1 if any pattern matches the haystack within a constant ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Edit_distance"},"edit distance"),". This function relies on the experimental feature of ",(0,r.kt)("a",{parentName:"p",href:"https://intel.github.io/hyperscan/dev-reference/compilation.html#approximate-matching"},"hyperscan")," library, and can be slow for some corner cases. The performance depends on the edit distance value and patterns used, but it's always more expensive compared to a non-fuzzy variants."),(0,r.kt)("h2",{id:"multifuzzymatchanyindexhaystack-distance-pattern1-pattern2-patternn"},"multiFuzzyMatchAnyIndex(haystack, distance, ","[","pattern",(0,r.kt)("sub",null,"1"),", pattern",(0,r.kt)("sub",null,"2"),", \u2026, pattern",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"multiFuzzyMatchAny"),", but returns any index that matches the haystack within a constant edit distance."),(0,r.kt)("h2",{id:"multifuzzymatchallindiceshaystack-distance-pattern1-pattern2-patternn"},"multiFuzzyMatchAllIndices(haystack, distance, ","[","pattern",(0,r.kt)("sub",null,"1"),", pattern",(0,r.kt)("sub",null,"2"),", \u2026, pattern",(0,r.kt)("sub",null,"n"),"]",")"),(0,r.kt)("p",null,"The same as ",(0,r.kt)("inlineCode",{parentName:"p"},"multiFuzzyMatchAny"),", but returns the array of all indices in any order that match the haystack within a constant edit distance."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"multiFuzzyMatch*")," functions do not support UTF-8 regular expressions, and such expressions are treated as bytes because of hyperscan restriction."))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To turn off all functions that use hyperscan, use setting ",(0,r.kt)("inlineCode",{parentName:"p"},"SET allow_hyperscan = 0;"),"."))),(0,r.kt)("h2",{id:"extracthaystack-pattern"},"extract(haystack, pattern)"),(0,r.kt)("p",null,"Extracts a fragment of a string using a regular expression. If \u2018haystack\u2019 does not match the \u2018pattern\u2019 regex, an empty string is returned. If the regex does not contain subpatterns, it takes the fragment that matches the entire regex. Otherwise, it takes the fragment that matches the first subpattern."),(0,r.kt)("h2",{id:"extractallhaystack-pattern"},"extractAll(haystack, pattern)"),(0,r.kt)("p",null,"Extracts all the fragments of a string using a regular expression. If \u2018haystack\u2019 does not match the \u2018pattern\u2019 regex, an empty string is returned. Returns an array of strings consisting of all matches to the regex. In general, the behavior is the same as the \u2018extract\u2019 function (it takes the first subpattern, or the entire expression if there isn\u2019t a subpattern)."),(0,r.kt)("h2",{id:"extractallgroups-horizontal"},"extractAllGroupsHorizontal"),(0,r.kt)("p",null,"Matches all groups of the ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," string using the ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," regular expression. Returns an array of arrays, where the first array includes all fragments matching the first group, the second array - matching the second group, etc."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"extractAllGroupsHorizontal")," function is slower than ",(0,r.kt)("a",{parentName:"p",href:"#extractallgroups-vertical"},"extractAllGroupsVertical"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"extractAllGroupsHorizontal(haystack, pattern)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 Input string. Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 Regular expression with ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/google/re2/wiki/Syntax"},"re2 syntax"),". Must contain groups, each group enclosed in parentheses. If ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," contains no groups, an exception is thrown. Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," does not match the ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," regex, an array of empty arrays is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT extractAllGroupsHorizontal(\'abc=111, def=222, ghi=333\', \'("[^"]+"|\\\\w+)=("[^"]+"|\\\\w+)\');\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500extractAllGroupsHorizontal('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)')\u2500\u2510\n\u2502 [['abc','def','ghi'],['111','222','333']]                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#extractallgroups-vertical"},"extractAllGroupsVertical"))),(0,r.kt)("h2",{id:"extractallgroups-vertical"},"extractAllGroupsVertical"),(0,r.kt)("p",null,"Matches all groups of the ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," string using the ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," regular expression. Returns an array of arrays, where each array includes matching fragments from every group. Fragments are grouped in order of appearance in the ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"extractAllGroupsVertical(haystack, pattern)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 Input string. Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 Regular expression with ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/google/re2/wiki/Syntax"},"re2 syntax"),". Must contain groups, each group enclosed in parentheses. If ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," contains no groups, an exception is thrown. Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," does not match the ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," regex, an empty array is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT extractAllGroupsVertical(\'abc=111, def=222, ghi=333\', \'("[^"]+"|\\\\w+)=("[^"]+"|\\\\w+)\');\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500extractAllGroupsVertical('abc=111, def=222, ghi=333', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)')\u2500\u2510\n\u2502 [['abc','111'],['def','222'],['ghi','333']]                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#extractallgroups-horizontal"},"extractAllGroupsHorizontal"))),(0,r.kt)("h2",{id:"function-like"},"like(haystack, pattern), haystack LIKE pattern operator"),(0,r.kt)("p",null,"Checks whether a string matches a simple regular expression.\nThe regular expression can contain the metasymbols ",(0,r.kt)("inlineCode",{parentName:"p"},"%")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%")," indicates any quantity of any bytes (including zero characters)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"_")," indicates any one byte."),(0,r.kt)("p",null,"Use the backslash (",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),") for escaping metasymbols. See the note on escaping in the description of the \u2018match\u2019 function."),(0,r.kt)("p",null,"For regular expressions like ",(0,r.kt)("inlineCode",{parentName:"p"},"%needle%"),", the code is more optimal and works as fast as the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," function.\nFor other regular expressions, the code is the same as for the \u2018match\u2019 function."),(0,r.kt)("h2",{id:"function-notlike"},"notLike(haystack, pattern), haystack NOT LIKE pattern operator"),(0,r.kt)("p",null,"The same thing as \u2018like\u2019, but negative."),(0,r.kt)("h2",{id:"ilike"},"ilike"),(0,r.kt)("p",null,"Case insensitive variant of ",(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions/#function-like"},"like")," function. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ILIKE")," operator instead of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ilike")," function."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ilike(haystack, pattern)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 Input string. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 If ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," does not contain percent signs or underscores, then the ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," only represents the string itself. An underscore (",(0,r.kt)("inlineCode",{parentName:"li"},"_"),") in ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," stands for (matches) any single character. A percent sign (",(0,r.kt)("inlineCode",{parentName:"li"},"%"),") matches any sequence of zero or more characters.")),(0,r.kt)("p",null,"Some ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"'abc' ILIKE 'abc'    true\n'abc' ILIKE 'a%'     true\n'abc' ILIKE '_b_'    true\n'abc' ILIKE 'c'      false\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"True, if the string matches ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern"),"."),(0,r.kt)("li",{parentName:"ul"},"False, if the string does not match ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Input table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u2500\u252c\u2500days\u2500\u2510\n\u2502  1 \u2502 January  \u2502   31 \u2502\n\u2502  2 \u2502 February \u2502   29 \u2502\n\u2502  3 \u2502 March    \u2502   31 \u2502\n\u2502  4 \u2502 April    \u2502   30 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM Months WHERE ilike(name, '%j%');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u252c\u2500days\u2500\u2510\n\u2502  1 \u2502 January \u2502   31 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/sql-reference/functions/string-search-functions/#function-like"},"like")," ")),(0,r.kt)("h2",{id:"ngramdistancehaystack-needle"},"ngramDistance(haystack, needle)"),(0,r.kt)("p",null,"Calculates the 4-gram distance between ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"needle"),": counts the symmetric difference between two multisets of 4-grams and normalizes it by the sum of their cardinalities. Returns float number from 0 to 1 \u2013 the closer to zero, the more strings are similar to each other. If the constant ",(0,r.kt)("inlineCode",{parentName:"p"},"needle")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," is more than 32Kb, throws an exception. If some of the non-constant ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"needle")," strings are more than 32Kb, the distance is always one."),(0,r.kt)("p",null,"For case-insensitive search or/and in UTF-8 format use functions ",(0,r.kt)("inlineCode",{parentName:"p"},"ngramDistanceCaseInsensitive, ngramDistanceUTF8, ngramDistanceCaseInsensitiveUTF8"),"."),(0,r.kt)("h2",{id:"ngramsearchhaystack-needle"},"ngramSearch(haystack, needle)"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"ngramDistance")," but calculates the non-symmetric difference between ",(0,r.kt)("inlineCode",{parentName:"p"},"needle")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack")," \u2013 the number of n-grams from needle minus the common number of n-grams normalized by the number of ",(0,r.kt)("inlineCode",{parentName:"p"},"needle")," n-grams. The closer to one, the more likely ",(0,r.kt)("inlineCode",{parentName:"p"},"needle")," is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack"),". Can be useful for fuzzy string search."),(0,r.kt)("p",null,"For case-insensitive search or/and in UTF-8 format use functions ",(0,r.kt)("inlineCode",{parentName:"p"},"ngramSearchCaseInsensitive, ngramSearchUTF8, ngramSearchCaseInsensitiveUTF8"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"For UTF-8 case we use 3-gram distance. All these are not perfectly fair n-gram distances. We use 2-byte hashes to hash n-grams and then calculate the (non-)symmetric difference between these hash tables \u2013 collisions may occur. With UTF-8 case-insensitive format we do not use fair ",(0,r.kt)("inlineCode",{parentName:"p"},"tolower")," function \u2013 we zero the 5-th bit (starting from zero) of each codepoint byte and first bit of zeroth byte if bytes more than one \u2013 this works for Latin and mostly for all Cyrillic letters."))),(0,r.kt)("h2",{id:"countSubstrings"},"countSubstrings"),(0,r.kt)("p",null,"Returns the number of substring occurrences."),(0,r.kt)("p",null,"For a case-insensitive search, use ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/string-search-functions#countSubstringsCaseInsensitive"},"countSubstringsCaseInsensitive")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/string-search-functions#countSubstringsCaseInsensitiveUTF8"},"countSubstringsCaseInsensitiveUTF8")," functions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"countSubstrings(haystack, needle[, start_pos])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 The string to search in. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 The substring to search for. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2013 Position of the first character in the string to start search. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number of occurrences.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstrings('foobar.com', '.');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstrings('foobar.com', '.')\u2500\u2510\n\u2502                                  1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstrings('aaaa', 'aa');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstrings('aaaa', 'aa')\u2500\u2510\n\u2502                             2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstrings('abc___abc', 'abc', 4);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstrings('abc___abc', 'abc', 4)\u2500\u2510\n\u2502                                      1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"countSubstringsCaseInsensitive"},"countSubstringsCaseInsensitive"),(0,r.kt)("p",null,"Returns the number of substring occurrences case-insensitive."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"countSubstringsCaseInsensitive(haystack, needle[, start_pos])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 The string to search in. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 The substring to search for. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2014 Position of the first character in the string to start search. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number of occurrences.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstringsCaseInsensitive('aba', 'B');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstringsCaseInsensitive('aba', 'B')\u2500\u2510\n\u2502                                          1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstringsCaseInsensitive('foobar.com', 'CoM');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstringsCaseInsensitive('foobar.com', 'CoM')\u2500\u2510\n\u2502                                                   1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstringsCaseInsensitive('abC___abC', 'aBc', 2);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstringsCaseInsensitive('abC___abC', 'aBc', 2)\u2500\u2510\n\u2502                                                     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"countSubstringsCaseInsensitiveUTF8"},"countSubstringsCaseInsensitiveUTF8"),(0,r.kt)("p",null,"Returns the number of substring occurrences in ",(0,r.kt)("inlineCode",{parentName:"p"},"UTF-8")," case-insensitive."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstringsCaseInsensitiveUTF8(haystack, needle[, start_pos])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 The string to search in. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"needle")," \u2014 The substring to search for. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_pos")," \u2014 Position of the first character in the string to start search. Optional. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Number of occurrences.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstringsCaseInsensitiveUTF8('\u0430\u0431\u0432', 'A');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstringsCaseInsensitiveUTF8('\u0430\u0431\u0432', 'A')\u2500\u2510\n\u2502                                              1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countSubstringsCaseInsensitiveUTF8('\u0430\u0411\u0432__\u0410\u0431\u0412__\u0430\u0431\u0432', '\u0410\u0431\u0432');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countSubstringsCaseInsensitiveUTF8('\u0430\u0411\u0432__\u0410\u0431\u0412__\u0430\u0431\u0432', '\u0410\u0431\u0432')\u2500\u2510\n\u2502                                                          3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"countmatcheshaystack-pattern"},"countMatches(haystack, pattern)"),(0,r.kt)("p",null,"Returns the number of regular expression matches for a ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"haystack"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"countMatches(haystack, pattern)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"haystack")," \u2014 The string to search in. ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/syntax#syntax-string-literal"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 The regular expression with ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/google/re2/wiki/Syntax"},"re2 syntax"),". ",(0,r.kt)("a",{parentName:"li",href:"/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of matches.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countMatches('foobar.com', 'o+');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countMatches('foobar.com', 'o+')\u2500\u2510\n\u2502                                2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countMatches('aaaa', 'aa');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countMatches('aaaa', 'aa')\u2500\u2500\u2500\u2500\u2510\n\u2502                             2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}m.isMDXComponent=!0}}]);