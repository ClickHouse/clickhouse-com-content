"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[53503],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(a),k=r,N=u["".concat(s,".").concat(k)]||u[k]||m[k]||l;return a?n.createElement(N,i(i({ref:t},d),{},{components:a})):n.createElement(N,i({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},50651:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=["components"],o={sidebar_position:21,sidebar_label:"Input and Output Formats"},s="Formats for Input and Output Data",p={unversionedId:"en/interfaces/formats",id:"en/interfaces/formats",title:"Formats for Input and Output Data",description:"formats}",source:"@site/docs/en/interfaces/formats.md",sourceDirName:"en/interfaces",slug:"/en/interfaces/formats",permalink:"/docs/en/interfaces/formats",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21,sidebar_label:"Input and Output Formats"},sidebar:"tutorialSidebar",previous:{title:"MySQL Interface",permalink:"/docs/en/interfaces/mysql"},next:{title:"JDBC Driver",permalink:"/docs/en/interfaces/jdbc"}},d={},m=[{value:"TabSeparated",id:"tabseparated",level:2},{value:"Data Formatting",id:"data-formatting",level:3},{value:"TabSeparatedRaw",id:"tabseparatedraw",level:2},{value:"TabSeparatedWithNames",id:"tabseparatedwithnames",level:2},{value:"TabSeparatedWithNamesAndTypes",id:"tabseparatedwithnamesandtypes",level:2},{value:"TabSeparatedRawWithNames",id:"tabseparatedrawwithnames",level:2},{value:"TabSeparatedRawWithNamesAndTypes",id:"tabseparatedrawwithnamesandtypes",level:2},{value:"Template",id:"format-template",level:2},{value:"TemplateIgnoreSpaces",id:"templateignorespaces",level:2},{value:"TSKV",id:"tskv",level:2},{value:"CSV",id:"csv",level:2},{value:"CSVWithNames",id:"csvwithnames",level:2},{value:"CSVWithNamesAndTypes",id:"csvwithnamesandtypes",level:2},{value:"CustomSeparated",id:"format-customseparated",level:2},{value:"CustomSeparatedWithNames",id:"customseparatedwithnames",level:2},{value:"CustomSeparatedWithNamesAndTypes",id:"customseparatedwithnamesandtypes",level:2},{value:"JSON",id:"json",level:2},{value:"JSONStrings",id:"jsonstrings",level:2},{value:"JSONAsString",id:"jsonasstring",level:2},{value:"JSONCompact",id:"jsoncompact",level:2},{value:"JSONCompactStrings",id:"jsoncompactstrings",level:2},{value:"JSONEachRow",id:"jsoneachrow",level:2},{value:"JSONStringsEachRow",id:"jsonstringseachrow",level:2},{value:"JSONCompactEachRow",id:"jsoncompacteachrow",level:2},{value:"JSONCompactStringsEachRow",id:"jsoncompactstringseachrow",level:2},{value:"JSONEachRowWithProgress",id:"jsoneachrowwithprogress",level:2},{value:"JSONStringsEachRowWithProgress",id:"jsonstringseachrowwithprogress",level:2},{value:"JSONCompactEachRowWithNames",id:"jsoncompacteachrowwithnames",level:2},{value:"JSONCompactEachRowWithNamesAndTypes",id:"jsoncompacteachrowwithnamesandtypes",level:2},{value:"JSONCompactStringsEachRowWithNames",id:"jsoncompactstringseachrowwithnames",level:2},{value:"JSONCompactStringsEachRowWithNamesAndTypes",id:"jsoncompactstringseachrowwithnamesandtypes",level:2},{value:"Inserting Data",id:"inserting-data",level:3},{value:"Selecting Data",id:"selecting-data",level:3},{value:"Usage of Nested Structures",id:"jsoneachrow-nested",level:3},{value:"Native",id:"native",level:2},{value:"Null",id:"null",level:2},{value:"Pretty",id:"pretty",level:2},{value:"PrettyCompact",id:"prettycompact",level:2},{value:"PrettyCompactMonoBlock",id:"prettycompactmonoblock",level:2},{value:"PrettyNoEscapes",id:"prettynoescapes",level:2},{value:"PrettyCompactNoEscapes",id:"prettycompactnoescapes",level:3},{value:"PrettySpaceNoEscapes",id:"prettyspacenoescapes",level:3},{value:"PrettySpace",id:"prettyspace",level:2},{value:"RowBinary",id:"rowbinary",level:2},{value:"RowBinaryWithNames",id:"rowbinarywithnames",level:2},{value:"RowBinaryWithNamesAndTypes",id:"rowbinarywithnamesandtypes",level:2},{value:"Values",id:"data-format-values",level:2},{value:"Vertical",id:"vertical",level:2},{value:"XML",id:"xml",level:2},{value:"CapnProto",id:"capnproto",level:2},{value:"Data Types Matching",id:"data_types-matching-capnproto",level:3},{value:"Inserting and Selecting Data",id:"inserting-and-selecting-data-capnproto",level:3},{value:"Protobuf",id:"protobuf",level:2},{value:"ProtobufSingle",id:"protobufsingle",level:2},{value:"Avro",id:"data-format-avro",level:2},{value:"Data Types Matching",id:"data_types-matching",level:3},{value:"Inserting Data",id:"inserting-data-1",level:3},{value:"Selecting Data",id:"selecting-data-1",level:3},{value:"AvroConfluent",id:"data-format-avro-confluent",level:2},{value:"Data Types Matching",id:"data_types-matching-1",level:3},{value:"Usage",id:"usage",level:3},{value:"Parquet",id:"data-format-parquet",level:2},{value:"Data Types Matching",id:"data_types-matching-2",level:3},{value:"Inserting and Selecting Data",id:"inserting-and-selecting-data",level:3},{value:"Arrow",id:"data-format-arrow",level:2},{value:"Data Types Matching",id:"data_types-matching-arrow",level:3},{value:"Inserting Data",id:"inserting-data-arrow",level:3},{value:"Selecting Data",id:"selecting-data-arrow",level:3},{value:"ArrowStream",id:"data-format-arrow-stream",level:2},{value:"ORC",id:"data-format-orc",level:2},{value:"Data Types Matching",id:"data_types-matching-3",level:3},{value:"Inserting Data",id:"inserting-data-2",level:3},{value:"Selecting Data",id:"selecting-data-2",level:3},{value:"LineAsString",id:"lineasstring",level:2},{value:"Regexp",id:"data-format-regexp",level:2},{value:"Format Schema",id:"formatschema",level:2},{value:"Skipping Errors",id:"skippingerrors",level:2},{value:"RawBLOB",id:"rawblob",level:2},{value:"MsgPack",id:"msgpack",level:2},{value:"Data Types Matching",id:"data-types-matching-msgpack",level:3}],u={toc:m};function k(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"formats"},"Formats for Input and Output Data"),(0,l.kt)("p",null,"ClickHouse can accept and return data in various formats. A format supported for input can be used to parse the data provided to ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT"),"s, to perform ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT"),"s from a file-backed table such as File, URL or HDFS, or to read an external dictionary. A format supported for output can be used to arrange the\nresults of a ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT"),", and to perform ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT"),"s into a file-backed table."),(0,l.kt)("p",null,"The supported formats are:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Format"),(0,l.kt)("th",{parentName:"tr",align:null},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Output"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tabseparated"},"TabSeparated")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tabseparatedraw"},"TabSeparatedRaw")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tabseparatedwithnames"},"TabSeparatedWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tabseparatedrawwithnames"},"TabSeparatedRawWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tabseparatedrawwithnamesandtypes"},"TabSeparatedRawWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#format-template"},"Template")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#templateignorespaces"},"TemplateIgnoreSpaces")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#csv"},"CSV")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#csvwithnames"},"CSVWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#csvwithnamesandtypes"},"CSVWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#format-customseparated"},"CustomSeparated")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#customseparatedwithnames"},"CustomSeparatedWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#customseparatedwithnamesandtypes"},"CustomSeparatedWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-values"},"Values")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#vertical"},"Vertical")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#json"},"JSON")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsonasstring"},"JSONAsString")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsonstrings"},"JSONStrings")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompact"},"JSONCompact")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompactstrings"},"JSONCompactStrings")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoneachrow"},"JSONEachRow")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoneachrowwithprogress"},"JSONEachRowWithProgress")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsonstringseachrow"},"JSONStringsEachRow")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsonstringseachrowwithprogress"},"JSONStringsEachRowWithProgress")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompacteachrow"},"JSONCompactEachRow")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompacteachrowwithnames"},"JSONCompactEachRowWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompacteachrowwithnamesandtypes"},"JSONCompactEachRowWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompactstringseachrow"},"JSONCompactStringsEachRow")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompactstringseachrowwithnames"},"JSONCompactStringsEachRowWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#jsoncompactstringseachrowwithnamesandtypes"},"JSONCompactStringsEachRowWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#tskv"},"TSKV")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#pretty"},"Pretty")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#prettycompact"},"PrettyCompact")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#prettycompactmonoblock"},"PrettyCompactMonoBlock")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#prettynoescapes"},"PrettyNoEscapes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#prettyspace"},"PrettySpace")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#protobuf"},"Protobuf")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#protobufsingle"},"ProtobufSingle")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-avro"},"Avro")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-avro-confluent"},"AvroConfluent")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-parquet"},"Parquet")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-arrow"},"Arrow")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-arrow-stream"},"ArrowStream")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-orc"},"ORC")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#rowbinary"},"RowBinary")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#rowbinarywithnamesandtypes"},"RowBinaryWithNames")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#rowbinarywithnamesandtypes"},"RowBinaryWithNamesAndTypes")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#native"},"Native")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#null"},"Null")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#xml"},"XML")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#capnproto"},"CapnProto")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#lineasstring"},"LineAsString")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#data-format-regexp"},"Regexp")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2717")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#rawblob"},"RawBLOB")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#msgpack"},"MsgPack")),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714")))),(0,l.kt)("p",null,"You can control some format processing parameters with the ClickHouse settings. For more information read the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/"},"Settings")," section."),(0,l.kt)("h2",{id:"tabseparated"},"TabSeparated"),(0,l.kt)("p",null,"In TabSeparated format, data is written by row. Each row contains values separated by tabs. Each value is followed by a tab, except the last value in the row, which is followed by a line feed. Strictly Unix line feeds are assumed everywhere. The last row also must contain a line feed at the end. Values are written in text format, without enclosing quotation marks, and with special characters escaped."),(0,l.kt)("p",null,"This format is also available under the name ",(0,l.kt)("inlineCode",{parentName:"p"},"TSV"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated")," format is convenient for processing data using custom programs and scripts. It is used by default in the HTTP interface, and in the command-line client\u2019s batch mode. This format also allows transferring data between different DBMSs. For example, you can get a dump from MySQL and upload it to ClickHouse, or vice versa."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated")," format supports outputting total values (when using WITH TOTALS) and extreme values (when \u2018extremes\u2019 is set to 1). In these cases, the total values and extremes are output after the main data. The main result, total values, and extremes are separated from each other by an empty line. Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT EventDate, count() AS c FROM test.hits GROUP BY EventDate WITH TOTALS ORDER BY EventDate FORMAT TabSeparated\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"2014-03-17      1406958\n2014-03-18      1383658\n2014-03-19      1405797\n2014-03-20      1353623\n2014-03-21      1245779\n2014-03-22      1031592\n2014-03-23      1046491\n\n1970-01-01      8873898\n\n2014-03-17      1031592\n2014-03-23      1406958\n")),(0,l.kt)("h3",{id:"data-formatting"},"Data Formatting"),(0,l.kt)("p",null,"Integer numbers are written in decimal form. Numbers can contain an extra \u201c+\u201d character at the beginning (ignored when parsing, and not recorded when formatting). Non-negative numbers can\u2019t contain the negative sign. When reading, it is allowed to parse an empty string as a zero, or (for signed types) a string consisting of just a minus sign as a zero. Numbers that do not fit into the corresponding data type may be parsed as a different number, without an error message."),(0,l.kt)("p",null,"Floating-point numbers are written in decimal form. The dot is used as the decimal separator. Exponential entries are supported, as are \u2018inf\u2019, \u2018+inf\u2019, \u2018-inf\u2019, and \u2018nan\u2019. An entry of floating-point numbers may begin or end with a decimal point.\nDuring formatting, accuracy may be lost on floating-point numbers.\nDuring parsing, it is not strictly required to read the nearest machine-representable number."),(0,l.kt)("p",null,"Dates are written in YYYY-MM-DD format and parsed in the same format, but with any characters as separators.\nDates with times are written in the format ",(0,l.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD hh:mm:ss")," and parsed in the same format, but with any characters as separators.\nThis all occurs in the system time zone at the time the client or server starts (depending on which of them formats data). For dates with times, daylight saving time is not specified. So if a dump has times during daylight saving time, the dump does not unequivocally match the data, and parsing will select one of the two times.\nDuring a read operation, incorrect dates and dates with times can be parsed with natural overflow or as null dates and times, without an error message."),(0,l.kt)("p",null,"As an exception, parsing dates with times is also supported in Unix timestamp format, if it consists of exactly 10 decimal digits. The result is not time zone-dependent. The formats YYYY-MM-DD hh:mm:ss and NNNNNNNNNN are differentiated automatically."),(0,l.kt)("p",null,"Strings are output with backslash-escaped special characters. The following escape sequences are used for output: ",(0,l.kt)("inlineCode",{parentName:"p"},"\\b"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\f"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\r"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\n"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\t"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\0"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\\\"),". Parsing also supports the sequences ",(0,l.kt)("inlineCode",{parentName:"p"},"\\a"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\v"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"\\xHH")," (hex escape sequences) and any ",(0,l.kt)("inlineCode",{parentName:"p"},"\\c")," sequences, where ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," is any character (these sequences are converted to ",(0,l.kt)("inlineCode",{parentName:"p"},"c"),"). Thus, reading data supports formats where a line feed can be written as ",(0,l.kt)("inlineCode",{parentName:"p"},"\\n")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"\\"),", or as a line feed. For example, the string ",(0,l.kt)("inlineCode",{parentName:"p"},"Hello world")," with a line feed between the words instead of space can be parsed in any of the following variations:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Hello\\nworld\n\nHello\\\nworld\n")),(0,l.kt)("p",null,"The second variant is supported because MySQL uses it when writing tab-separated dumps."),(0,l.kt)("p",null,"The minimum set of characters that you need to escape when passing data in TabSeparated format: tab, line feed (LF) and backslash."),(0,l.kt)("p",null,"Only a small set of symbols are escaped. You can easily stumble onto a string value that your terminal will ruin in output."),(0,l.kt)("p",null,"Arrays are written as a list of comma-separated values in square brackets. Number items in the array are formatted as normally. ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"DateTime")," types are written in single quotes. Strings are written in single quotes with the same escaping rules as above."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"NULL")," is formatted according to setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-format_tsv_null_representation"},"format_tsv_null_representation")," (default value is ",(0,l.kt)("inlineCode",{parentName:"p"},"\\N"),")."),(0,l.kt)("p",null,"If setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_tsv_empty_as_default"},"input_format_tsv_empty_as_default")," is enabled,\nempty input fields are replaced with default values. For complex default expressions ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_defaults_for_omitted_fields"},"input_format_defaults_for_omitted_fields")," must be enabled too."),(0,l.kt)("p",null,"Each element of ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," structures is represented as array."),(0,l.kt)("p",null,"In input data, ENUM values can be represented as names or as ids. First, we try to match the input value to the ENUM name. If we fail and the input value is a number, we try to match this number to ENUM id.\nIf input data contains only ENUM ids, it's recommended to enable the setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_tsv_enum_as_number"},"input_format_tsv_enum_as_number")," to optimize ENUM parsing."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE nestedt\n(\n    `id` UInt8,\n    `aux` Nested(\n        a UInt8,\n        b String\n    )\n)\nENGINE = TinyLog\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO nestedt Values ( 1, [1], ['a'])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM nestedt FORMAT TSV\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"1  [1]    ['a']\n")),(0,l.kt)("h2",{id:"tabseparatedraw"},"TabSeparatedRaw"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated")," format in that the rows are written without escaping.\nWhen parsing with this format, tabs or linefeeds are not allowed in each field."),(0,l.kt)("p",null,"This format is also available under the name ",(0,l.kt)("inlineCode",{parentName:"p"},"TSVRaw"),"."),(0,l.kt)("h2",{id:"tabseparatedwithnames"},"TabSeparatedWithNames"),(0,l.kt)("p",null,"Differs from the ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated")," format in that the column names are written in the first row."),(0,l.kt)("p",null,"During parsing, the first row is expected to contain the column names. You can use column names to determine their position and to check their correctness."),(0,l.kt)("p",null,"If setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_with_names_use_header"},"input_format_with_names_use_header")," is set to 1,\nthe columns from input data will be mapped to the columns from the table by their names, columns with unknown names will be skipped if setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_skip_unknown_fields"},"input_format_skip_unknown_fields")," is set to 1.\nOtherwise, the first row will be skipped."),(0,l.kt)("p",null,"This format is also available under the name ",(0,l.kt)("inlineCode",{parentName:"p"},"TSVWithNames"),"."),(0,l.kt)("h2",{id:"tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes"),(0,l.kt)("p",null,"Differs from the ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated")," format in that the column names are written to the first row, while the column types are in the second row.\nThe first row with names is processed the same way as in ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparatedWithNames")," format.\nIf setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_with_types_use_header"},"input_format_with_types_use_header")," is set to 1,\nthe types from input data will be compared with the types of the corresponding columns from the table. Otherwise, the second row will be skipped. "),(0,l.kt)("p",null,"This format is also available under the name ",(0,l.kt)("inlineCode",{parentName:"p"},"TSVWithNamesAndTypes"),"."),(0,l.kt)("h2",{id:"tabseparatedrawwithnames"},"TabSeparatedRawWithNames"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparatedWithNames")," format in that the rows are written without escaping.\nWhen parsing with this format, tabs or linefeeds are not allowed in each field."),(0,l.kt)("p",null,"This format is also available under the name ",(0,l.kt)("inlineCode",{parentName:"p"},"TSVRawWithNames"),"."),(0,l.kt)("h2",{id:"tabseparatedrawwithnamesandtypes"},"TabSeparatedRawWithNamesAndTypes"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparatedWithNamesAndTypes")," format in that the rows are written without escaping.\nWhen parsing with this format, tabs or linefeeds are not allowed in each field."),(0,l.kt)("p",null,"This format is also available under the name ",(0,l.kt)("inlineCode",{parentName:"p"},"TSVRawWithNamesAndNames"),"."),(0,l.kt)("h2",{id:"format-template"},"Template"),(0,l.kt)("p",null,"This format allows specifying a custom format string with placeholders for values with a specified escaping rule."),(0,l.kt)("p",null,"It uses settings ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_resultset"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_row"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_rows_between_delimiter")," and some settings of other formats (e.g.\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"output_format_json_quote_64bit_integers")," when using ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON")," escaping, see further)"),(0,l.kt)("p",null,"Setting ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_row")," specifies path to file, which contains format string for rows with the following syntax:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"delimiter_1${column_1:serializeAs_1}delimiter_2${column_2:serializeAs_2} ... delimiter_N"),","),(0,l.kt)("p",null,"where ",(0,l.kt)("inlineCode",{parentName:"p"},"delimiter_i")," is a delimiter between values (",(0,l.kt)("inlineCode",{parentName:"p"},"$")," symbol can be escaped as ",(0,l.kt)("inlineCode",{parentName:"p"},"$$"),"),\n",(0,l.kt)("inlineCode",{parentName:"p"},"column_i")," is a name or index of a column whose values are to be selected or inserted (if empty, then column will be skipped),\n",(0,l.kt)("inlineCode",{parentName:"p"},"serializeAs_i")," is an escaping rule for the column values. The following escaping rules are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"CSV"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"JSON"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"XML")," (similarly to the formats of the same names)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Escaped")," (similarly to ",(0,l.kt)("inlineCode",{parentName:"li"},"TSV"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Quoted")," (similarly to ",(0,l.kt)("inlineCode",{parentName:"li"},"Values"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Raw")," (without escaping, similarly to ",(0,l.kt)("inlineCode",{parentName:"li"},"TSVRaw"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"None")," (no escaping rule, see further)")),(0,l.kt)("p",null,"If an escaping rule is omitted, then ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," will be used. ",(0,l.kt)("inlineCode",{parentName:"p"},"XML")," is suitable only for output."),(0,l.kt)("p",null,"So, for the following format string:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"  `Search phrase: ${SearchPhrase:Quoted}, count: ${c:Escaped}, ad price: $$${price:JSON};`\n")),(0,l.kt)("p",null,"the values of ",(0,l.kt)("inlineCode",{parentName:"p"},"SearchPhrase"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"price")," columns, which are escaped as ",(0,l.kt)("inlineCode",{parentName:"p"},"Quoted"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Escaped")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON")," will be printed (for select) or will be expected (for insert) between ",(0,l.kt)("inlineCode",{parentName:"p"},"Search phrase:"),", ",(0,l.kt)("inlineCode",{parentName:"p"},", count:"),", ",(0,l.kt)("inlineCode",{parentName:"p"},", ad price: $")," and ",(0,l.kt)("inlineCode",{parentName:"p"},";")," delimiters respectively. For example:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Search phrase: 'bathroom interior design', count: 2166, ad price: $3;")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_rows_between_delimiter")," setting specifies delimiter between rows, which is printed (or expected) after every row except the last one (",(0,l.kt)("inlineCode",{parentName:"p"},"\\n")," by default)"),(0,l.kt)("p",null,"Setting ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_resultset")," specifies the path to file, which contains a format string for resultset. Format string for resultset has the same syntax as a format string for row and allows to specify a prefix, a suffix and a way to print some additional information. It contains the following placeholders instead of column names:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," is the rows with data in ",(0,l.kt)("inlineCode",{parentName:"li"},"format_template_row")," format, separated by ",(0,l.kt)("inlineCode",{parentName:"li"},"format_template_rows_between_delimiter"),". This placeholder must be the first placeholder in the format string."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"totals")," is the row with total values in ",(0,l.kt)("inlineCode",{parentName:"li"},"format_template_row")," format (when using WITH TOTALS)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"min")," is the row with minimum values in ",(0,l.kt)("inlineCode",{parentName:"li"},"format_template_row")," format (when extremes are set to 1)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"max")," is the row with maximum values in ",(0,l.kt)("inlineCode",{parentName:"li"},"format_template_row")," format (when extremes are set to 1)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rows")," is the total number of output rows"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rows_before_limit")," is the minimal number of rows there would have been without LIMIT. Output only if the query contains LIMIT. If the query contains GROUP BY, rows_before_limit_at_least is the exact number of rows there would have been without a LIMIT."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"time")," is the request execution time in seconds"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rows_read")," is the number of rows has been read"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bytes_read")," is the number of bytes (uncompressed) has been read")),(0,l.kt)("p",null,"The placeholders ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"totals"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"min")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"max")," must not have escaping rule specified (or ",(0,l.kt)("inlineCode",{parentName:"p"},"None")," must be specified explicitly). The remaining placeholders may have any escaping rule specified.\nIf the ",(0,l.kt)("inlineCode",{parentName:"p"},"format_template_resultset")," setting is an empty string, ",(0,l.kt)("inlineCode",{parentName:"p"},"${data}")," is used as default value.\nFor insert queries format allows skipping some columns or some fields if prefix or suffix (see example)."),(0,l.kt)("p",null,"Select example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SearchPhrase, count() AS c FROM test.hits GROUP BY SearchPhrase ORDER BY c DESC LIMIT 5 FORMAT Template SETTINGS\nformat_template_resultset = '/some/path/resultset.format', format_template_row = '/some/path/row.format', format_template_rows_between_delimiter = '\\n    '\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/some/path/resultset.format"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'<!DOCTYPE HTML>\n<html> <head> <title>Search phrases</title> </head>\n <body>\n  <table border="1"> <caption>Search phrases</caption>\n    <tr> <th>Search phrase</th> <th>Count</th> </tr>\n    ${data}\n  </table>\n  <table border="1"> <caption>Max</caption>\n    ${max}\n  </table>\n  <b>Processed ${rows_read:XML} rows in ${time:XML} sec</b>\n </body>\n</html>\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/some/path/row.format"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"<tr> <td>${0:XML}</td> <td>${1:XML}</td> </tr>\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE HTML>\n<html> <head> <title>Search phrases</title> </head>\n <body>\n  <table border="1"> <caption>Search phrases</caption>\n    <tr> <th>Search phrase</th> <th>Count</th> </tr>\n    <tr> <td></td> <td>8267016</td> </tr>\n    <tr> <td>bathroom interior design</td> <td>2166</td> </tr>\n    <tr> <td>clickhouse</td> <td>1655</td> </tr>\n    <tr> <td>spring 2014 fashion</td> <td>1549</td> </tr>\n    <tr> <td>freeform photos</td> <td>1480</td> </tr>\n  </table>\n  <table border="1"> <caption>Max</caption>\n    <tr> <td></td> <td>8873898</td> </tr>\n  </table>\n  <b>Processed 3095973 rows in 0.1569913 sec</b>\n </body>\n</html>\n')),(0,l.kt)("p",null,"Insert example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Some header\nPage views: 5, User id: 4324182021466249494, Useless field: hello, Duration: 146, Sign: -1\nPage views: 6, User id: 4324182021466249494, Useless field: world, Duration: 185, Sign: 1\nTotal rows: 2\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO UserActivity FORMAT Template SETTINGS\nformat_template_resultset = '/some/path/resultset.format', format_template_row = '/some/path/row.format'\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/some/path/resultset.format"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Some header\\n${data}\\nTotal rows: ${:CSV}\\n\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/some/path/row.format"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Page views: ${PageViews:CSV}, User id: ${UserID:CSV}, Useless field: ${:CSV}, Duration: ${Duration:CSV}, Sign: ${Sign:CSV}\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PageViews"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UserID"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Duration")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Sign")," inside placeholders are names of columns in the table. Values after ",(0,l.kt)("inlineCode",{parentName:"p"},"Useless field")," in rows and after ",(0,l.kt)("inlineCode",{parentName:"p"},"\\nTotal rows:")," in suffix will be ignored.\nAll delimiters in the input data must be strictly equal to delimiters in specified format strings."),(0,l.kt)("h2",{id:"templateignorespaces"},"TemplateIgnoreSpaces"),(0,l.kt)("p",null,"This format is suitable only for input.\nSimilar to ",(0,l.kt)("inlineCode",{parentName:"p"},"Template"),", but skips whitespace characters between delimiters and values in the input stream. However, if format strings contain whitespace characters, these characters will be expected in the input stream. Also allows to specify empty placeholders (",(0,l.kt)("inlineCode",{parentName:"p"},"${}")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"${:None}"),") to split some delimiter into separate parts to ignore spaces between them. Such placeholders are used only for skipping whitespace characters.\nIt\u2019s possible to read ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON")," using this format, if values of columns have the same order in all rows. For example, the following request can be used for inserting data from output example of format ",(0,l.kt)("a",{parentName:"p",href:"#json"},"JSON"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table_name FORMAT TemplateIgnoreSpaces SETTINGS\nformat_template_resultset = '/some/path/resultset.format', format_template_row = '/some/path/row.format', format_template_rows_between_delimiter = ','\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/some/path/resultset.format"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'{${}"meta"${}:${:JSON},${}"data"${}:${}[${data}]${},${}"totals"${}:${:JSON},${}"extremes"${}:${:JSON},${}"rows"${}:${:JSON},${}"rows_before_limit_at_least"${}:${:JSON}${}}\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/some/path/row.format"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'{${}"SearchPhrase"${}:${}${phrase:JSON}${},${}"c"${}:${}${cnt:JSON}${}}\n')),(0,l.kt)("h2",{id:"tskv"},"TSKV"),(0,l.kt)("p",null,"Similar to TabSeparated, but outputs a value in name=value format. Names are escaped the same way as in TabSeparated format, and the = symbol is also escaped."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"SearchPhrase=   count()=8267016\nSearchPhrase=bathroom interior design    count()=2166\nSearchPhrase=clickhouse     count()=1655\nSearchPhrase=2014 spring fashion    count()=1549\nSearchPhrase=freeform photos       count()=1480\nSearchPhrase=angelina jolie    count()=1245\nSearchPhrase=omsk       count()=1112\nSearchPhrase=photos of dog breeds    count()=1091\nSearchPhrase=curtain designs        count()=1064\nSearchPhrase=baku       count()=1000\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"NULL")," is formatted as ",(0,l.kt)("inlineCode",{parentName:"p"},"\\N"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM t_null FORMAT TSKV\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"x=1    y=\\N\n")),(0,l.kt)("p",null,"When there is a large number of small columns, this format is ineffective, and there is generally no reason to use it. Nevertheless, it is no worse than JSONEachRow in terms of efficiency."),(0,l.kt)("p",null,"Both data output and parsing are supported in this format. For parsing, any order is supported for the values of different columns. It is acceptable for some values to be omitted \u2013 they are treated as equal to their default values. In this case, zeros and blank rows are used as default values. Complex values that could be specified in the table are not supported as defaults."),(0,l.kt)("p",null,"Parsing allows the presence of the additional field ",(0,l.kt)("inlineCode",{parentName:"p"},"tskv")," without the equal sign or a value. This field is ignored."),(0,l.kt)("h2",{id:"csv"},"CSV"),(0,l.kt)("p",null,"Comma Separated Values format (",(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc4180"},"RFC"),")."),(0,l.kt)("p",null,"When formatting, rows are enclosed in double-quotes. A double quote inside a string is output as two double quotes in a row. There are no other rules for escaping characters. Date and date-time are enclosed in double-quotes. Numbers are output without quotes. Values are separated by a delimiter character, which is ",(0,l.kt)("inlineCode",{parentName:"p"},",")," by default. The delimiter character is defined in the setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-format_csv_delimiter"},"format_csv_delimiter"),". Rows are separated using the Unix line feed (LF). Arrays are serialized in CSV as follows: first, the array is serialized to a string as in TabSeparated format, and then the resulting string is output to CSV in double-quotes. Tuples in CSV format are serialized as separate columns (that is, their nesting in the tuple is lost)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-client --format_csv_delimiter="|" --query="INSERT INTO test.csv FORMAT CSV" < data.csv\n')),(0,l.kt)("p",null,"*","By default, the delimiter is ",(0,l.kt)("inlineCode",{parentName:"p"},","),". See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-format_csv_delimiter"},"format_csv_delimiter")," setting for more information."),(0,l.kt)("p",null,"When parsing, all values can be parsed either with or without quotes. Both double and single quotes are supported. Rows can also be arranged without quotes. In this case, they are parsed up to the delimiter character or line feed (CR or LF). In violation of the RFC, when parsing rows without quotes, the leading and trailing spaces and tabs are ignored. For the line feed, Unix (LF), Windows (CR LF) and Mac OS Classic (CR LF) types are all supported."),(0,l.kt)("p",null,"If setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_csv_empty_as_default"},"input_format_csv_empty_as_default")," is enabled,\nempty unquoted input values are replaced with default values. For complex default expressions ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_defaults_for_omitted_fields"},"input_format_defaults_for_omitted_fields")," must be enabled too."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," is formatted according to setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-format_csv_null_representation"},"format_csv_null_representation")," (default value is ",(0,l.kt)("inlineCode",{parentName:"p"},"\\N"),")."),(0,l.kt)("p",null,"In input data, ENUM values can be represented as names or as ids. First, we try to match the input value to the ENUM name. If we fail and the input value is a number, we try to match this number to ENUM id.\nIf input data contains only ENUM ids, it's recommended to enable the setting ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_csv_enum_as_number"},"input_format_csv_enum_as_number")," to optimize ENUM parsing."),(0,l.kt)("p",null,"The CSV format supports the output of totals and extremes the same way as ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated"),"."),(0,l.kt)("h2",{id:"csvwithnames"},"CSVWithNames"),(0,l.kt)("p",null,"Also prints the header row with column names, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnames"},"TabSeparatedWithNames"),"."),(0,l.kt)("h2",{id:"csvwithnamesandtypes"},"CSVWithNamesAndTypes"),(0,l.kt)("p",null,"Also prints two header rows with column names and types, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes"),"."),(0,l.kt)("h2",{id:"format-customseparated"},"CustomSeparated"),(0,l.kt)("p",null,"Similar to ",(0,l.kt)("a",{parentName:"p",href:"#format-template"},"Template"),", but it prints or reads all names and types of columns and uses escaping rule from ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-escaping-rule"},"format_custom_escaping_rule")," setting and delimiters from ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-field-delimiter"},"format_custom_field_delimiter"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-row-before-delimiter"},"format_custom_row_before_delimiter"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-row-after-delimiter"},"format_custom_row_after_delimiter"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-row-between-delimiter"},"format_custom_row_between_delimiter"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-result-before-delimiter"},"format_custom_result_before_delimiter")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-custom-result-after-delimiter"},"format_custom_result_after_delimiter")," settings, not from format strings."),(0,l.kt)("p",null,"There is also ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomSeparatedIgnoreSpaces")," format, which is similar to ",(0,l.kt)("a",{parentName:"p",href:"#templateignorespaces"},"TemplateIgnoreSpaces"),"."),(0,l.kt)("h2",{id:"customseparatedwithnames"},"CustomSeparatedWithNames"),(0,l.kt)("p",null,"Also prints the header row with column names, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnames"},"TabSeparatedWithNames"),"."),(0,l.kt)("h2",{id:"customseparatedwithnamesandtypes"},"CustomSeparatedWithNamesAndTypes"),(0,l.kt)("p",null,"Also prints two header rows with column names and types, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes"),"."),(0,l.kt)("h2",{id:"json"},"JSON"),(0,l.kt)("p",null,"Outputs data in JSON format. Besides data tables, it also outputs column names and types, along with some additional information: the total number of output rows, and the number of rows that could have been output if there weren\u2019t a LIMIT. Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SearchPhrase, count() AS c FROM test.hits GROUP BY SearchPhrase WITH TOTALS ORDER BY c DESC LIMIT 5 FORMAT JSON\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n        "meta":\n        [\n                {\n                        "name": "\'hello\'",\n                        "type": "String"\n                },\n                {\n                        "name": "multiply(42, number)",\n                        "type": "UInt64"\n                },\n                {\n                        "name": "range(5)",\n                        "type": "Array(UInt8)"\n                }\n        ],\n\n        "data":\n        [\n                {\n                        "\'hello\'": "hello",\n                        "multiply(42, number)": "0",\n                        "range(5)": [0,1,2,3,4]\n                },\n                {\n                        "\'hello\'": "hello",\n                        "multiply(42, number)": "42",\n                        "range(5)": [0,1,2,3,4]\n                },\n                {\n                        "\'hello\'": "hello",\n                        "multiply(42, number)": "84",\n                        "range(5)": [0,1,2,3,4]\n                }\n        ],\n\n        "rows": 3,\n\n        "rows_before_limit_at_least": 3\n}\n')),(0,l.kt)("p",null,"The JSON is compatible with JavaScript. To ensure this, some characters are additionally escaped: the slash ",(0,l.kt)("inlineCode",{parentName:"p"},"/")," is escaped as ",(0,l.kt)("inlineCode",{parentName:"p"},"\\/"),"; alternative line breaks ",(0,l.kt)("inlineCode",{parentName:"p"},"U+2028")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"U+2029"),", which break some browsers, are escaped as ",(0,l.kt)("inlineCode",{parentName:"p"},"\\uXXXX"),". ASCII control characters are escaped: backspace, form feed, line feed, carriage return, and horizontal tab are replaced with ",(0,l.kt)("inlineCode",{parentName:"p"},"\\b"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\f"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\n"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\r"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\\t")," , as well as the remaining bytes in the 00-1F range using ",(0,l.kt)("inlineCode",{parentName:"p"},"\\uXXXX")," sequences. Invalid UTF-8 sequences are changed to the replacement character \ufffd so the output text will consist of valid UTF-8 sequences. For compatibility with JavaScript, Int64 and UInt64 integers are enclosed in double-quotes by default. To remove the quotes, you can set the configuration parameter ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#session_settings-output_format_json_quote_64bit_integers"},"output_format_json_quote_64bit_integers")," to 0."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"rows")," \u2013 The total number of output rows."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"rows_before_limit_at_least")," The minimal number of rows there would have been without LIMIT. Output only if the query contains LIMIT.\nIf the query contains GROUP BY, rows_before_limit_at_least is the exact number of rows there would have been without a LIMIT."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"totals")," \u2013 Total values (when using WITH TOTALS)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"extremes")," \u2013 Extreme values (when extremes are set to 1)."),(0,l.kt)("p",null,"This format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table)."),(0,l.kt)("p",null,"ClickHouse supports ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"NULL"),", which is displayed as ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," in the JSON output. To enable ",(0,l.kt)("inlineCode",{parentName:"p"},"+nan"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"-nan"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"+inf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"-inf")," values in output, set the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-output_format_json_quote_denormals"},"output_format_json_quote_denormals")," to 1."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#jsoneachrow"},"JSONEachRow")," format"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/en/operations/settings/#output-format-json-array-of-rows"},"output_format_json_array_of_rows")," setting")),(0,l.kt)("h2",{id:"jsonstrings"},"JSONStrings"),(0,l.kt)("p",null,"Differs from JSON only in that data fields are output in strings, not in typed JSON values."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n        "meta":\n        [\n                {\n                        "name": "\'hello\'",\n                        "type": "String"\n                },\n                {\n                        "name": "multiply(42, number)",\n                        "type": "UInt64"\n                },\n                {\n                        "name": "range(5)",\n                        "type": "Array(UInt8)"\n                }\n        ],\n\n        "data":\n        [\n                {\n                        "\'hello\'": "hello",\n                        "multiply(42, number)": "0",\n                        "range(5)": "[0,1,2,3,4]"\n                },\n                {\n                        "\'hello\'": "hello",\n                        "multiply(42, number)": "42",\n                        "range(5)": "[0,1,2,3,4]"\n                },\n                {\n                        "\'hello\'": "hello",\n                        "multiply(42, number)": "84",\n                        "range(5)": "[0,1,2,3,4]"\n                }\n        ],\n\n        "rows": 3,\n\n        "rows_before_limit_at_least": 3\n}\n')),(0,l.kt)("h2",{id:"jsonasstring"},"JSONAsString"),(0,l.kt)("p",null,"In this format, a single JSON object is interpreted as a single value. If the input has several JSON objects (comma separated), they are interpreted as separate rows. If the input data is enclosed in square brackets, it is interpreted as an array of JSONs."),(0,l.kt)("p",null,"This format can only be parsed for table with a single field of type ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String"),". The remaining columns must be set to ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table#default"},"DEFAULT")," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table#materialized"},"MATERIALIZED"),", or omitted. Once you collect whole JSON object to string you can use ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/json-functions"},"JSON functions")," to process it."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'DROP TABLE IF EXISTS json_as_string;\nCREATE TABLE json_as_string (json String) ENGINE = Memory;\nINSERT INTO json_as_string (json) FORMAT JSONAsString {"foo":{"bar":{"x":"y"},"baz":1}},{},{"any json stucture":1}\nSELECT * FROM json_as_string;\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'\u250c\u2500json\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 {"foo":{"bar":{"x":"y"},"baz":1}} \u2502\n\u2502 {}                                \u2502\n\u2502 {"any json stucture":1}           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"An array of JSON objects")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE TABLE json_square_brackets (field String) ENGINE = Memory;\nINSERT INTO json_square_brackets FORMAT JSONAsString [{"id": 1, "name": "name1"}, {"id": 2, "name": "name2"}];\n\nSELECT * FROM json_square_brackets;\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'\u250c\u2500field\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 {"id": 1, "name": "name1"} \u2502\n\u2502 {"id": 2, "name": "name2"} \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.kt)("h2",{id:"jsoncompact"},"JSONCompact"),(0,l.kt)("h2",{id:"jsoncompactstrings"},"JSONCompactStrings"),(0,l.kt)("p",null,"Differs from JSON only in that data rows are output in arrays, not in objects."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'// JSONCompact\n{\n        "meta":\n        [\n                {\n                        "name": "\'hello\'",\n                        "type": "String"\n                },\n                {\n                        "name": "multiply(42, number)",\n                        "type": "UInt64"\n                },\n                {\n                        "name": "range(5)",\n                        "type": "Array(UInt8)"\n                }\n        ],\n\n        "data":\n        [\n                ["hello", "0", [0,1,2,3,4]],\n                ["hello", "42", [0,1,2,3,4]],\n                ["hello", "84", [0,1,2,3,4]]\n        ],\n\n        "rows": 3,\n\n        "rows_before_limit_at_least": 3\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'// JSONCompactStrings\n{\n        "meta":\n        [\n                {\n                        "name": "\'hello\'",\n                        "type": "String"\n                },\n                {\n                        "name": "multiply(42, number)",\n                        "type": "UInt64"\n                },\n                {\n                        "name": "range(5)",\n                        "type": "Array(UInt8)"\n                }\n        ],\n\n        "data":\n        [\n                ["hello", "0", "[0,1,2,3,4]"],\n                ["hello", "42", "[0,1,2,3,4]"],\n                ["hello", "84", "[0,1,2,3,4]"]\n        ],\n\n        "rows": 3,\n\n        "rows_before_limit_at_least": 3\n}\n')),(0,l.kt)("h2",{id:"jsoneachrow"},"JSONEachRow"),(0,l.kt)("h2",{id:"jsonstringseachrow"},"JSONStringsEachRow"),(0,l.kt)("h2",{id:"jsoncompacteachrow"},"JSONCompactEachRow"),(0,l.kt)("h2",{id:"jsoncompactstringseachrow"},"JSONCompactStringsEachRow"),(0,l.kt)("p",null,"When using these formats, ClickHouse outputs rows as separated, newline-delimited JSON values, but the data as a whole is not valid JSON."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"some_int":42,"some_str":"hello","some_tuple":[1,"a"]} // JSONEachRow\n[42,"hello",[1,"a"]] // JSONCompactEachRow\n["42","hello","(2,\'a\')"] // JSONCompactStringsEachRow\n')),(0,l.kt)("p",null,"When inserting the data, you should provide a separate JSON value for each row."),(0,l.kt)("h2",{id:"jsoneachrowwithprogress"},"JSONEachRowWithProgress"),(0,l.kt)("h2",{id:"jsonstringseachrowwithprogress"},"JSONStringsEachRowWithProgress"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONEachRow"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"JSONStringsEachRow")," in that ClickHouse will also yield progress information as JSON values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"row":{"\'hello\'":"hello","multiply(42, number)":"0","range(5)":[0,1,2,3,4]}}\n{"row":{"\'hello\'":"hello","multiply(42, number)":"42","range(5)":[0,1,2,3,4]}}\n{"row":{"\'hello\'":"hello","multiply(42, number)":"84","range(5)":[0,1,2,3,4]}}\n{"progress":{"read_rows":"3","read_bytes":"24","written_rows":"0","written_bytes":"0","total_rows_to_read":"3"}}\n')),(0,l.kt)("h2",{id:"jsoncompacteachrowwithnames"},"JSONCompactEachRowWithNames"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONCompactEachRow")," format in that it also prints the header row with column names, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnames"},"TabSeparatedWithNames"),"."),(0,l.kt)("h2",{id:"jsoncompacteachrowwithnamesandtypes"},"JSONCompactEachRowWithNamesAndTypes"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONCompactEachRow")," format in that it also prints two header rows with column names and types, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes"),"."),(0,l.kt)("h2",{id:"jsoncompactstringseachrowwithnames"},"JSONCompactStringsEachRowWithNames"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONCompactStringsEachRow")," in that in that it also prints the header row with column names, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnames"},"TabSeparatedWithNames"),"."),(0,l.kt)("h2",{id:"jsoncompactstringseachrowwithnamesandtypes"},"JSONCompactStringsEachRowWithNamesAndTypes"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONCompactStringsEachRow")," in that it also prints two header rows with column names and types, similar to ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedwithnamesandtypes"},"TabSeparatedWithNamesAndTypes"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'["\'hello\'", "multiply(42, number)", "range(5)"]\n["String", "UInt64", "Array(UInt8)"]\n["hello", "0", [0,1,2,3,4]]\n["hello", "42", [0,1,2,3,4]]\n["hello", "84", [0,1,2,3,4]]\n')),(0,l.kt)("h3",{id:"inserting-data"},"Inserting Data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO UserActivity FORMAT JSONEachRow {"PageViews":5, "UserID":"4324182021466249494", "Duration":146,"Sign":-1} {"UserID":"4324182021466249494","PageViews":6,"Duration":185,"Sign":1}\n')),(0,l.kt)("p",null,"ClickHouse allows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Any order of key-value pairs in the object."),(0,l.kt)("li",{parentName:"ul"},"Omitting some values.")),(0,l.kt)("p",null,"ClickHouse ignores spaces between elements and commas after the objects. You can pass all the objects in one line. You do not have to separate them with line breaks."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Omitted values processing")),(0,l.kt)("p",null,"ClickHouse substitutes omitted values with the default values for the corresponding ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/"},"data types"),"."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT expr")," is specified, ClickHouse uses different substitution rules depending on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#session_settings-input_format_defaults_for_omitted_fields"},"input_format_defaults_for_omitted_fields")," setting."),(0,l.kt)("p",null,"Consider the following table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS example_table\n(\n    x UInt32,\n    a DEFAULT x * 2\n) ENGINE = Memory;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"input_format_defaults_for_omitted_fields = 0"),", then the default value for ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"a")," equals ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," (as the default value for the ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt32")," data type)."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"input_format_defaults_for_omitted_fields = 1"),", then the default value for ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," equals ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),", but the default value of ",(0,l.kt)("inlineCode",{parentName:"li"},"a")," equals ",(0,l.kt)("inlineCode",{parentName:"li"},"x * 2"),".")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"When inserting data with ",(0,l.kt)("inlineCode",{parentName:"p"},"input_format_defaults_for_omitted_fields = 1"),", ClickHouse consumes more computational resources, compared to insertion with ",(0,l.kt)("inlineCode",{parentName:"p"},"input_format_defaults_for_omitted_fields = 0"),"."))),(0,l.kt)("h3",{id:"selecting-data"},"Selecting Data"),(0,l.kt)("p",null,"Consider the ",(0,l.kt)("inlineCode",{parentName:"p"},"UserActivity")," table as an example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500UserID\u2500\u252c\u2500PageViews\u2500\u252c\u2500Duration\u2500\u252c\u2500Sign\u2500\u2510\n\u2502 4324182021466249494 \u2502         5 \u2502      146 \u2502   -1 \u2502\n\u2502 4324182021466249494 \u2502         6 \u2502      185 \u2502    1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"The query ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT * FROM UserActivity FORMAT JSONEachRow")," returns:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'{"UserID":"4324182021466249494","PageViews":5,"Duration":146,"Sign":-1}\n{"UserID":"4324182021466249494","PageViews":6,"Duration":185,"Sign":1}\n')),(0,l.kt)("p",null,"Unlike the ",(0,l.kt)("a",{parentName:"p",href:"#json"},"JSON")," format, there is no substitution of invalid UTF-8 sequences. Values are escaped in the same way as for ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON"),"."),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Any set of bytes can be output in the strings. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONEachRow")," format if you are sure that the data in the table can be formatted as JSON without losing any information."))),(0,l.kt)("h3",{id:"jsoneachrow-nested"},"Usage of Nested Structures"),(0,l.kt)("p",null,"If you have a table with ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," data type columns, you can insert JSON data with the same structure. Enable this feature with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_import_nested_json"},"input_format_import_nested_json")," setting."),(0,l.kt)("p",null,"For example, consider the following table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE json_each_row_nested (n Nested (s String, i Int32) ) ENGINE = Memory\n")),(0,l.kt)("p",null,"As you can see in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Nested")," data type description, ClickHouse treats each component of the nested structure as a separate column (",(0,l.kt)("inlineCode",{parentName:"p"},"n.s")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"n.i")," for our table). You can insert data in the following way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO json_each_row_nested FORMAT JSONEachRow {"n.s": ["abc", "def"], "n.i": [1, 23]}\n')),(0,l.kt)("p",null,"To insert data as a hierarchical JSON object, set ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_import_nested_json"},"input_format_import_nested_json=1"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "n": {\n        "s": ["abc", "def"],\n        "i": [1, 23]\n    }\n}\n')),(0,l.kt)("p",null,"Without this setting, ClickHouse throws an exception."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name, value FROM system.settings WHERE name = 'input_format_import_nested_json'\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u2510\n\u2502 input_format_import_nested_json \u2502 0     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO json_each_row_nested FORMAT JSONEachRow {"n": {"s": ["abc", "def"], "i": [1, 23]}}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Code: 117. DB::Exception: Unknown field found while parsing JSONEachRow format: n: (at row 1)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'SET input_format_import_nested_json=1\nINSERT INTO json_each_row_nested FORMAT JSONEachRow {"n": {"s": ["abc", "def"], "i": [1, 23]}}\nSELECT * FROM json_each_row_nested\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500n.s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500n.i\u2500\u2500\u2500\u2500\u2510\n\u2502 ['abc','def'] \u2502 [1,23] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"native"},"Native"),(0,l.kt)("p",null,"The most efficient format. Data is written and read by blocks in binary format. For each block, the number of rows, number of columns, column names and types, and parts of columns in this block are recorded one after another. In other words, this format is \u201ccolumnar\u201d \u2013 it does not convert columns to rows. This is the format used in the native interface for interaction between servers, for using the command-line client, and for C++ clients."),(0,l.kt)("p",null,"You can use this format to quickly generate dumps that can only be read by the ClickHouse DBMS. It does not make sense to work with this format yourself."),(0,l.kt)("h2",{id:"null"},"Null"),(0,l.kt)("p",null,"Nothing is output. However, the query is processed, and when using the command-line client, data is transmitted to the client. This is used for tests, including performance testing.\nObviously, this format is only appropriate for output, not for parsing."),(0,l.kt)("h2",{id:"pretty"},"Pretty"),(0,l.kt)("p",null,"Outputs data as Unicode-art tables, also using ANSI-escape sequences for setting colours in the terminal.\nA full grid of the table is drawn, and each row occupies two lines in the terminal.\nEach result block is output as a separate table. This is necessary so that blocks can be output without buffering results (buffering would be necessary in order to pre-calculate the visible width of all the values)."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"NULL")," is output as ",(0,l.kt)("inlineCode",{parentName:"p"},"\u1d3a\u1d41\u1d38\u1d38"),"."),(0,l.kt)("p",null,"Example (shown for the ",(0,l.kt)("a",{parentName:"p",href:"#prettycompact"},"PrettyCompact")," format):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM t_null\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500x\u2500\u252c\u2500\u2500\u2500\u2500y\u2500\u2510\n\u2502 1 \u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Rows are not escaped in Pretty","*"," formats. Example is shown for the ",(0,l.kt)("a",{parentName:"p",href:"#prettycompact"},"PrettyCompact")," format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 'String with \\'quotes\\' and \\t character' AS Escaping_test\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500Escaping_test\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 String with 'quotes' and      character \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"To avoid dumping too much data to the terminal, only the first 10,000 rows are printed. If the number of rows is greater than or equal to 10,000, the message \u201cShowed first 10 000\u201d is printed.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table)."),(0,l.kt)("p",null,"The Pretty format supports outputting total values (when using WITH TOTALS) and extremes (when \u2018extremes\u2019 is set to 1). In these cases, total values and extreme values are output after the main data, in separate tables. Example (shown for the ",(0,l.kt)("a",{parentName:"p",href:"#prettycompact"},"PrettyCompact")," format):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT EventDate, count() AS c FROM test.hits GROUP BY EventDate WITH TOTALS ORDER BY EventDate FORMAT PrettyCompact\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2014-03-17 \u2502 1406958 \u2502\n\u2502 2014-03-18 \u2502 1383658 \u2502\n\u2502 2014-03-19 \u2502 1405797 \u2502\n\u2502 2014-03-20 \u2502 1353623 \u2502\n\u2502 2014-03-21 \u2502 1245779 \u2502\n\u2502 2014-03-22 \u2502 1031592 \u2502\n\u2502 2014-03-23 \u2502 1046491 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTotals:\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 1970-01-01 \u2502 8873898 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nExtremes:\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2014-03-17 \u2502 1031592 \u2502\n\u2502 2014-03-23 \u2502 1406958 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"prettycompact"},"PrettyCompact"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("a",{parentName:"p",href:"#pretty"},"Pretty")," in that the grid is drawn between rows and the result is more compact.\nThis format is used by default in the command-line client in interactive mode."),(0,l.kt)("h2",{id:"prettycompactmonoblock"},"PrettyCompactMonoBlock"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("a",{parentName:"p",href:"#prettycompact"},"PrettyCompact")," in that up to 10,000 rows are buffered, then output as a single table, not by blocks."),(0,l.kt)("h2",{id:"prettynoescapes"},"PrettyNoEscapes"),(0,l.kt)("p",null,"Differs from Pretty in that ANSI-escape sequences aren\u2019t used. This is necessary for displaying this format in a browser, as well as for using the \u2018watch\u2019 command-line utility."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ watch -n1 \"clickhouse-client --query='SELECT event, value FROM system.events FORMAT PrettyCompactNoEscapes'\"\n")),(0,l.kt)("p",null,"You can use the HTTP interface for displaying in the browser."),(0,l.kt)("h3",{id:"prettycompactnoescapes"},"PrettyCompactNoEscapes"),(0,l.kt)("p",null,"The same as the previous setting."),(0,l.kt)("h3",{id:"prettyspacenoescapes"},"PrettySpaceNoEscapes"),(0,l.kt)("p",null,"The same as the previous setting."),(0,l.kt)("h2",{id:"prettyspace"},"PrettySpace"),(0,l.kt)("p",null,"Differs from ",(0,l.kt)("a",{parentName:"p",href:"#prettycompact"},"PrettyCompact")," in that whitespace (space characters) is used instead of the grid."),(0,l.kt)("h2",{id:"rowbinary"},"RowBinary"),(0,l.kt)("p",null,"Formats and parses data by row in binary format. Rows and values are listed consecutively, without separators.\nThis format is less efficient than the Native format since it is row-based."),(0,l.kt)("p",null,"Integers use fixed-length little-endian representation. For example, UInt64 uses 8 bytes.\nDateTime is represented as UInt32 containing the Unix timestamp as the value.\nDate is represented as a UInt16 object that contains the number of days since 1970-01-01 as the value.\nString is represented as a varint length (unsigned ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/LEB128"},"LEB128"),"), followed by the bytes of the string.\nFixedString is represented simply as a sequence of bytes."),(0,l.kt)("p",null,"Array is represented as a varint length (unsigned ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/LEB128"},"LEB128"),"), followed by successive elements of the array."),(0,l.kt)("p",null,"For ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax#null-literal"},"NULL")," support, an additional byte containing 1 or 0 is added before each ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nullable"},"Nullable")," value. If 1, then the value is ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," and this byte is interpreted as a separate value. If 0, the value after the byte is not ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,l.kt)("h2",{id:"rowbinarywithnames"},"RowBinaryWithNames"),(0,l.kt)("p",null,"Similar to ",(0,l.kt)("a",{parentName:"p",href:"#rowbinary"},"RowBinary"),", but with added header:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/LEB128"},"LEB128"),"-encoded number of columns (N)"),(0,l.kt)("li",{parentName:"ul"},"N ",(0,l.kt)("inlineCode",{parentName:"li"},"String"),"s specifying column names")),(0,l.kt)("h2",{id:"rowbinarywithnamesandtypes"},"RowBinaryWithNamesAndTypes"),(0,l.kt)("p",null,"Similar to ",(0,l.kt)("a",{parentName:"p",href:"#rowbinary"},"RowBinary"),", but with added header:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/LEB128"},"LEB128"),"-encoded number of columns (N)"),(0,l.kt)("li",{parentName:"ul"},"N ",(0,l.kt)("inlineCode",{parentName:"li"},"String"),"s specifying column names"),(0,l.kt)("li",{parentName:"ul"},"N ",(0,l.kt)("inlineCode",{parentName:"li"},"String"),"s specifying column types")),(0,l.kt)("h2",{id:"data-format-values"},"Values"),(0,l.kt)("p",null,"Prints every row in brackets. Rows are separated by commas. There is no comma after the last row. The values inside the brackets are also comma-separated. Numbers are output in a decimal format without quotes. Arrays are output in square brackets. Strings, dates, and dates with times are output in quotes. Escaping rules and parsing are similar to the ",(0,l.kt)("a",{parentName:"p",href:"#tabseparated"},"TabSeparated")," format. During formatting, extra spaces aren\u2019t inserted, but during parsing, they are allowed and skipped (except for spaces inside array values, which are not allowed). ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"NULL")," is represented as ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,l.kt)("p",null,"The minimum set of characters that you need to escape when passing data in Values \u200b\u200bformat: single quotes and backslashes."),(0,l.kt)("p",null,"This is the format that is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT INTO t VALUES ..."),", but you can also use it for formatting query results."),(0,l.kt)("p",null,"See also: ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_values_interpret_expressions"},"input_format_values_interpret_expressions")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_values_deduce_templates_of_expressions"},"input_format_values_deduce_templates_of_expressions")," settings."),(0,l.kt)("h2",{id:"vertical"},"Vertical"),(0,l.kt)("p",null,"Prints each value on a separate line with the column name specified. This format is convenient for printing just one or a few rows if each row consists of a large number of columns."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/syntax"},"NULL")," is output as ",(0,l.kt)("inlineCode",{parentName:"p"},"\u1d3a\u1d41\u1d38\u1d38"),"."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM t_null FORMAT Vertical\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nx: 1\ny: \u1d3a\u1d41\u1d38\u1d38\n")),(0,l.kt)("p",null,"Rows are not escaped in Vertical format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 'string with \\'quotes\\' and \\t with some special \\n characters' AS test FORMAT Vertical\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ntest: string with 'quotes' and      with some special\n characters\n")),(0,l.kt)("p",null,"This format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table)."),(0,l.kt)("h2",{id:"xml"},"XML"),(0,l.kt)("p",null,"XML format is suitable only for output, not for parsing. Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},"<?xml version='1.0' encoding='UTF-8' ?>\n<result>\n        <meta>\n                <columns>\n                        <column>\n                                <name>SearchPhrase</name>\n                                <type>String</type>\n                        </column>\n                        <column>\n                                <name>count()</name>\n                                <type>UInt64</type>\n                        </column>\n                </columns>\n        </meta>\n        <data>\n                <row>\n                        <SearchPhrase></SearchPhrase>\n                        <field>8267016</field>\n                </row>\n                <row>\n                        <SearchPhrase>bathroom interior design</SearchPhrase>\n                        <field>2166</field>\n                </row>\n                <row>\n                        <SearchPhrase>clickhouse</SearchPhrase>\n                        <field>1655</field>\n                </row>\n                <row>\n                        <SearchPhrase>2014 spring fashion</SearchPhrase>\n                        <field>1549</field>\n                </row>\n                <row>\n                        <SearchPhrase>freeform photos</SearchPhrase>\n                        <field>1480</field>\n                </row>\n                <row>\n                        <SearchPhrase>angelina jolie</SearchPhrase>\n                        <field>1245</field>\n                </row>\n                <row>\n                        <SearchPhrase>omsk</SearchPhrase>\n                        <field>1112</field>\n                </row>\n                <row>\n                        <SearchPhrase>photos of dog breeds</SearchPhrase>\n                        <field>1091</field>\n                </row>\n                <row>\n                        <SearchPhrase>curtain designs</SearchPhrase>\n                        <field>1064</field>\n                </row>\n                <row>\n                        <SearchPhrase>baku</SearchPhrase>\n                        <field>1000</field>\n                </row>\n        </data>\n        <rows>10</rows>\n        <rows_before_limit_at_least>141137</rows_before_limit_at_least>\n</result>\n")),(0,l.kt)("p",null,"If the column name does not have an acceptable format, just \u2018field\u2019 is used as the element name. In general, the XML structure follows the JSON structure.\nJust as for JSON, invalid UTF-8 sequences are changed to the replacement character \ufffd so the output text will consist of valid UTF-8 sequences."),(0,l.kt)("p",null,"In string values, the characters ",(0,l.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"&")," are escaped as ",(0,l.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"&"),"."),(0,l.kt)("p",null,"Arrays are output as ",(0,l.kt)("inlineCode",{parentName:"p"},"<array><elem>Hello</elem><elem>World</elem>...</array>"),",and tuples as ",(0,l.kt)("inlineCode",{parentName:"p"},"<tuple><elem>Hello</elem><elem>World</elem>...</tuple>"),"."),(0,l.kt)("h2",{id:"capnproto"},"CapnProto"),(0,l.kt)("p",null,"CapnProto is a binary message format similar to ",(0,l.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"Protocol Buffers")," and ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Apache_Thrift"},"Thrift"),", but not like ",(0,l.kt)("a",{parentName:"p",href:"#json"},"JSON")," or ",(0,l.kt)("a",{parentName:"p",href:"https://msgpack.org/"},"MessagePack"),"."),(0,l.kt)("p",null,"CapnProto messages are strictly typed and not self-describing, meaning they need an external schema description. The schema is applied on the fly and cached for each query."),(0,l.kt)("p",null,"See also ",(0,l.kt)("a",{parentName:"p",href:"#formatschema"},"Format Schema"),"."),(0,l.kt)("h3",{id:"data_types-matching-capnproto"},"Data Types Matching"),(0,l.kt)("p",null,"The table below shows supported data types and how they match ClickHouse ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/"},"data types")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"CapnProto data type (",(0,l.kt)("inlineCode",{parentName:"th"},"INSERT"),")"),(0,l.kt)("th",{parentName:"tr",align:null},"ClickHouse data type"),(0,l.kt)("th",{parentName:"tr",align:null},"CapnProto data type (",(0,l.kt)("inlineCode",{parentName:"th"},"SELECT"),")"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BOOL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt16"),", ",(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt32"),", ",(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int64"),", ",(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TEXT, DATA")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String"),", ",(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/fixedstring"},"FixedString")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TEXT, DATA"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"union(T, Void), union(Void, T)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Nullable(T)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"union(T, Void), union(Void, T)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ENUM")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/enum"},"Enum(8","|","16)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ENUM"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT"))))),(0,l.kt)("p",null,"For working with ",(0,l.kt)("inlineCode",{parentName:"p"},"Enum")," in CapnProto format use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format-capn-proto-enum-comparising-mode"},"format_capn_proto_enum_comparising_mode")," setting."),(0,l.kt)("p",null,"Arrays can be nested and can have a value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," type as an argument. ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," type also can be nested."),(0,l.kt)("h3",{id:"inserting-and-selecting-data-capnproto"},"Inserting and Selecting Data"),(0,l.kt)("p",null,"You can insert CapnProto data from a file into ClickHouse table by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat capnproto_messages.bin | clickhouse-client --query \"INSERT INTO test.hits FORMAT CapnProto SETTINGS format_schema = 'schema:Message'\"\n")),(0,l.kt)("p",null,"Where ",(0,l.kt)("inlineCode",{parentName:"p"},"schema.capnp")," looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-capnp"},"struct Message {\n  SearchPhrase @0 :Text;\n  c @1 :Uint64;\n}\n")),(0,l.kt)("p",null,"You can select data from a ClickHouse table and save them into some file in the CapnProto format by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ clickhouse-client --query = \"SELECT * FROM test.hits FORMAT CapnProto SETTINGS format_schema = 'schema:Message'\"\n")),(0,l.kt)("h2",{id:"protobuf"},"Protobuf"),(0,l.kt)("p",null,"Protobuf - is a ",(0,l.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"Protocol Buffers")," format."),(0,l.kt)("p",null,"This format requires an external format schema. The schema is cached between queries.\nClickHouse supports both ",(0,l.kt)("inlineCode",{parentName:"p"},"proto2")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"proto3")," syntaxes. Repeated/optional/required fields are supported."),(0,l.kt)("p",null,"Usage examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM test.table FORMAT Protobuf SETTINGS format_schema = 'schemafile:MessageType'\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat protobuf_messages.bin | clickhouse-client --query \"INSERT INTO test.table FORMAT Protobuf SETTINGS format_schema='schemafile:MessageType'\"\n")),(0,l.kt)("p",null,"where the file ",(0,l.kt)("inlineCode",{parentName:"p"},"schemafile.proto")," looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-capnp"},'syntax = "proto3";\n\nmessage MessageType {\n  string name = 1;\n  string surname = 2;\n  uint32 birthDate = 3;\n  repeated string phoneNumbers = 4;\n};\n')),(0,l.kt)("p",null,"To find the correspondence between table columns and fields of Protocol Buffers\u2019 message type ClickHouse compares their names.\nThis comparison is case-insensitive and the characters ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," (underscore) and ",(0,l.kt)("inlineCode",{parentName:"p"},".")," (dot) are considered as equal.\nIf types of a column and a field of Protocol Buffers\u2019 message are different the necessary conversion is applied."),(0,l.kt)("p",null,"Nested messages are supported. For example, for the field ",(0,l.kt)("inlineCode",{parentName:"p"},"z")," in the following message type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-capnp"},"message MessageType {\n  message XType {\n    message YType {\n      int32 z;\n    };\n    repeated YType y;\n  };\n  XType x;\n};\n")),(0,l.kt)("p",null,"ClickHouse tries to find a column named ",(0,l.kt)("inlineCode",{parentName:"p"},"x.y.z")," (or ",(0,l.kt)("inlineCode",{parentName:"p"},"x_y_z")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"X.y_Z")," and so on).\nNested messages are suitable to input or output a ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"nested data structures"),"."),(0,l.kt)("p",null,"Default values defined in a protobuf schema like this"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-capnp"},'syntax = "proto2";\n\nmessage MessageType {\n  optional int32 result_per_page = 3 [default = 10];\n}\n')),(0,l.kt)("p",null,"are not applied; the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table#create-default-values"},"table defaults")," are used instead of them."),(0,l.kt)("p",null,"ClickHouse inputs and outputs protobuf messages in the ",(0,l.kt)("inlineCode",{parentName:"p"},"length-delimited")," format.\nIt means before every message should be written its length as a ",(0,l.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/encoding#varints"},"varint"),".\nSee also ",(0,l.kt)("a",{parentName:"p",href:"https://cwiki.apache.org/confluence/display/GEODE/Delimiting+Protobuf+Messages"},"how to read/write length-delimited protobuf messages in popular languages"),"."),(0,l.kt)("h2",{id:"protobufsingle"},"ProtobufSingle"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#protobuf"},"Protobuf")," but for storing/parsing single Protobuf message without length delimiters."),(0,l.kt)("h2",{id:"data-format-avro"},"Avro"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://avro.apache.org/"},"Apache Avro")," is a row-oriented data serialization framework developed within Apache\u2019s Hadoop project."),(0,l.kt)("p",null,"ClickHouse Avro format supports reading and writing ",(0,l.kt)("a",{parentName:"p",href:"https://avro.apache.org/docs/current/spec.html#Object+Container+Files"},"Avro data files"),"."),(0,l.kt)("h3",{id:"data_types-matching"},"Data Types Matching"),(0,l.kt)("p",null,"The table below shows supported data types and how they match ClickHouse ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/"},"data types")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Avro data type ",(0,l.kt)("inlineCode",{parentName:"th"},"INSERT")),(0,l.kt)("th",{parentName:"tr",align:null},"ClickHouse data type"),(0,l.kt)("th",{parentName:"tr",align:null},"Avro data type ",(0,l.kt)("inlineCode",{parentName:"th"},"SELECT")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"long"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int(8","|","16","|","32)"),", ",(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt(8","|","16","|","32)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"long"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int64"),", ",(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"long"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"long"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"long"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"fixed"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"enum")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","*")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bytes"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"fixed")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/fixedstring"},"FixedString(N)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixed(N)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enum")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/enum"},"Enum(8","|","16)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enum"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array(T)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array(T)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"array(T)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"union(null, T)"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"union(T, null)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Nullable(T)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"union(null, T)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/special-data-types/nothing"},"Nullable(Nothing)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"null"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int (date)")," ","*","*"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int (date)")," ","*","*")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"long (timestamp-millis)")," ","*","*"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime64(3)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"long (timestamp-millis)")," ","*")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"long (timestamp-micros)")," ","*","*"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime64(6)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"long (timestamp-micros)")," ","*")))),(0,l.kt)("p",null,"*"," ",(0,l.kt)("inlineCode",{parentName:"p"},"bytes")," is default, controlled by ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-output_format_avro_string_column_pattern"},"output_format_avro_string_column_pattern"),"\n","*","* ",(0,l.kt)("a",{parentName:"p",href:"https://avro.apache.org/docs/current/spec.html#Logical+Types"},"Avro logical types")),(0,l.kt)("p",null,"Unsupported Avro data types: ",(0,l.kt)("inlineCode",{parentName:"p"},"record")," (non-root), ",(0,l.kt)("inlineCode",{parentName:"p"},"map")),(0,l.kt)("p",null,"Unsupported Avro logical data types: ",(0,l.kt)("inlineCode",{parentName:"p"},"time-millis"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"time-micros"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"duration")),(0,l.kt)("h3",{id:"inserting-data-1"},"Inserting Data"),(0,l.kt)("p",null,"To insert data from an Avro file into ClickHouse table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat file.avro | clickhouse-client --query="INSERT INTO {some_table} FORMAT Avro"\n')),(0,l.kt)("p",null,"The root schema of input Avro file must be of ",(0,l.kt)("inlineCode",{parentName:"p"},"record")," type."),(0,l.kt)("p",null,"To find the correspondence between table columns and fields of Avro schema ClickHouse compares their names. This comparison is case-sensitive.\nUnused fields are skipped."),(0,l.kt)("p",null,"Data types of ClickHouse table columns can differ from the corresponding fields of the Avro data inserted. When inserting data, ClickHouse interprets data types according to the table above and then ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/type-conversion-functions#type_conversion_function-cast"},"casts")," the data to corresponding column type."),(0,l.kt)("h3",{id:"selecting-data-1"},"Selecting Data"),(0,l.kt)("p",null,"To select data from ClickHouse table into an Avro file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-client --query="SELECT * FROM {some_table} FORMAT Avro" > file.avro\n')),(0,l.kt)("p",null,"Column names must:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"start with ",(0,l.kt)("inlineCode",{parentName:"li"},"[A-Za-z_]")),(0,l.kt)("li",{parentName:"ul"},"subsequently contain only ",(0,l.kt)("inlineCode",{parentName:"li"},"[A-Za-z0-9_]"))),(0,l.kt)("p",null,"Output Avro file compression and sync interval can be configured with ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-output_format_avro_codec"},"output_format_avro_codec")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-output_format_avro_sync_interval"},"output_format_avro_sync_interval")," respectively."),(0,l.kt)("h2",{id:"data-format-avro-confluent"},"AvroConfluent"),(0,l.kt)("p",null,"AvroConfluent supports decoding single-object Avro messages commonly used with ",(0,l.kt)("a",{parentName:"p",href:"https://kafka.apache.org/"},"Kafka")," and ",(0,l.kt)("a",{parentName:"p",href:"https://docs.confluent.io/current/schema-registry/index.html"},"Confluent Schema Registry"),"."),(0,l.kt)("p",null,"Each Avro message embeds a schema id that can be resolved to the actual schema with help of the Schema Registry."),(0,l.kt)("p",null,"Schemas are cached once resolved."),(0,l.kt)("p",null,"Schema Registry URL is configured with ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#format_avro_schema_registry_url"},"format_avro_schema_registry_url"),"."),(0,l.kt)("h3",{id:"data_types-matching-1"},"Data Types Matching"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("a",{parentName:"p",href:"#data-format-avro"},"Avro"),"."),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,"To quickly verify schema resolution you can use ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/edenhill/kafkacat"},"kafkacat")," with ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/utilities/clickhouse-local"},"clickhouse-local"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ kafkacat -b kafka-broker  -C -t topic1 -o beginning -f '%s' -c 3 | clickhouse-local   --input-format AvroConfluent --format_avro_schema_registry_url 'http://schema-registry' -S \"field1 Int64, field2 String\"  -q 'select *  from table'\n1 a\n2 b\n3 c\n")),(0,l.kt)("p",null,"To use ",(0,l.kt)("inlineCode",{parentName:"p"},"AvroConfluent")," with ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/integrations/kafka"},"Kafka"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE topic1_stream\n(\n    field1 String,\n    field2 String\n)\nENGINE = Kafka()\nSETTINGS\nkafka_broker_list = 'kafka-broker',\nkafka_topic_list = 'topic1',\nkafka_group_name = 'group1',\nkafka_format = 'AvroConfluent';\n\nSET format_avro_schema_registry_url = 'http://schema-registry';\n\nSELECT * FROM topic1_stream;\n")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Setting ",(0,l.kt)("inlineCode",{parentName:"p"},"format_avro_schema_registry_url")," needs to be configured in ",(0,l.kt)("inlineCode",{parentName:"p"},"users.xml")," to maintain it\u2019s value after a restart. Also you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"format_avro_schema_registry_url")," setting of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Kafka")," table engine."))),(0,l.kt)("h2",{id:"data-format-parquet"},"Parquet"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://parquet.apache.org/"},"Apache Parquet")," is a columnar storage format widespread in the Hadoop ecosystem. ClickHouse supports read and write operations for this format."),(0,l.kt)("h3",{id:"data_types-matching-2"},"Data Types Matching"),(0,l.kt)("p",null,"The table below shows supported data types and how they match ClickHouse ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/"},"data types")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parquet data type (",(0,l.kt)("inlineCode",{parentName:"th"},"INSERT"),")"),(0,l.kt)("th",{parentName:"tr",align:null},"ClickHouse data type"),(0,l.kt)("th",{parentName:"tr",align:null},"Parquet data type (",(0,l.kt)("inlineCode",{parentName:"th"},"SELECT"),")"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BOOL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"HALF_FLOAT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DOUBLE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DOUBLE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TIMESTAMP")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BINARY")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BINARY"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\u2014"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/fixedstring"},"FixedString")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BINARY"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAP")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/map"},"Map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAP"))))),(0,l.kt)("p",null,"Arrays can be nested and can have a value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," type as an argument. ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," types also can be nested."),(0,l.kt)("p",null,"ClickHouse supports configurable precision of ",(0,l.kt)("inlineCode",{parentName:"p"},"Decimal")," type. The ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," query treats the Parquet ",(0,l.kt)("inlineCode",{parentName:"p"},"DECIMAL")," type as the ClickHouse ",(0,l.kt)("inlineCode",{parentName:"p"},"Decimal128")," type."),(0,l.kt)("p",null,"Unsupported Parquet data types: ",(0,l.kt)("inlineCode",{parentName:"p"},"TIME32"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FIXED_SIZE_BINARY"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UUID"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ENUM"),"."),(0,l.kt)("p",null,"Data types of ClickHouse table columns can differ from the corresponding fields of the Parquet data inserted. When inserting data, ClickHouse interprets data types according to the table above and then ",(0,l.kt)("a",{parentName:"p",href:"../sql-reference/functions/type-conversion-functions/#type_conversion_function-cast"},"cast")," the data to that data type which is set for the ClickHouse table column."),(0,l.kt)("h3",{id:"inserting-and-selecting-data"},"Inserting and Selecting Data"),(0,l.kt)("p",null,"You can insert Parquet data from a file into ClickHouse table by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat {filename} | clickhouse-client --query="INSERT INTO {some_table} FORMAT Parquet"\n')),(0,l.kt)("p",null,"To insert data into ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," columns as an array of structs values you must switch on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#input_format_parquet_import_nested"},"input_format_parquet_import_nested")," setting."),(0,l.kt)("p",null,"You can select data from a ClickHouse table and save them into some file in the Parquet format by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-client --query="SELECT * FROM {some_table} FORMAT Parquet" > {some_file.pq}\n')),(0,l.kt)("p",null,"To exchange data with Hadoop, you can use ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/integrations/hdfs"},"HDFS table engine"),"."),(0,l.kt)("h2",{id:"data-format-arrow"},"Arrow"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://arrow.apache.org/"},"Apache Arrow")," comes with two built-in columnar storage formats. ClickHouse supports read and write operations for these formats."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Arrow"),' is Apache Arrow\u2019s "file mode" format. It is designed for in-memory random access.'),(0,l.kt)("h3",{id:"data_types-matching-arrow"},"Data Types Matching"),(0,l.kt)("p",null,"The table below shows supported data types and how they match ClickHouse ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/"},"data types")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Arrow data type (",(0,l.kt)("inlineCode",{parentName:"th"},"INSERT"),")"),(0,l.kt)("th",{parentName:"tr",align:null},"ClickHouse data type"),(0,l.kt)("th",{parentName:"tr",align:null},"Arrow data type (",(0,l.kt)("inlineCode",{parentName:"th"},"SELECT"),")"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BOOL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"HALF_FLOAT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DOUBLE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TIMESTAMP")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BINARY")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BINARY"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BINARY")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/fixedstring"},"FixedString")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BINARY"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL256")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal256")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL256"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAP")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/map"},"Map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAP"))))),(0,l.kt)("p",null,"Arrays can be nested and can have a value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," type as an argument. ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," types also can be nested."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"DICTIONARY")," type is supported for ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," queries, and for ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries there is an ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#output-format-arrow-low-cardinality-as-dictionary"},"output_format_arrow_low_cardinality_as_dictionary")," setting that allows to output ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/lowcardinality"},"LowCardinality")," type as a ",(0,l.kt)("inlineCode",{parentName:"p"},"DICTIONARY")," type."),(0,l.kt)("p",null,"ClickHouse supports configurable precision of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Decimal")," type. The ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," query treats the Arrow ",(0,l.kt)("inlineCode",{parentName:"p"},"DECIMAL")," type as the ClickHouse ",(0,l.kt)("inlineCode",{parentName:"p"},"Decimal128")," type."),(0,l.kt)("p",null,"Unsupported Arrow data types: ",(0,l.kt)("inlineCode",{parentName:"p"},"TIME32"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FIXED_SIZE_BINARY"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UUID"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ENUM"),"."),(0,l.kt)("p",null,"The data types of ClickHouse table columns do not have to match the corresponding Arrow data fields. When inserting data, ClickHouse interprets data types according to the table above and then ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/type-conversion-functions#type_conversion_function-cast"},"casts")," the data to the data type set for the ClickHouse table column."),(0,l.kt)("h3",{id:"inserting-data-arrow"},"Inserting Data"),(0,l.kt)("p",null,"You can insert Arrow data from a file into ClickHouse table by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat filename.arrow | clickhouse-client --query="INSERT INTO some_table FORMAT Arrow"\n')),(0,l.kt)("p",null,"To insert data into ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," columns as an array of structs values you must switch on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#input_format_arrow_import_nested"},"input_format_arrow_import_nested")," setting."),(0,l.kt)("h3",{id:"selecting-data-arrow"},"Selecting Data"),(0,l.kt)("p",null,"You can select data from a ClickHouse table and save them into some file in the Arrow format by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-client --query="SELECT * FROM {some_table} FORMAT Arrow" > {filename.arrow}\n')),(0,l.kt)("h2",{id:"data-format-arrow-stream"},"ArrowStream"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ArrowStream")," is Apache Arrow\u2019s \u201cstream mode\u201d format. It is designed for in-memory stream processing."),(0,l.kt)("h2",{id:"data-format-orc"},"ORC"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://orc.apache.org/"},"Apache ORC")," is a columnar storage format widespread in the ",(0,l.kt)("a",{parentName:"p",href:"https://hadoop.apache.org/"},"Hadoop")," ecosystem."),(0,l.kt)("h3",{id:"data_types-matching-3"},"Data Types Matching"),(0,l.kt)("p",null,"The table below shows supported data types and how they match ClickHouse ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/"},"data types")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," queries."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"ORC data type (",(0,l.kt)("inlineCode",{parentName:"th"},"INSERT"),")"),(0,l.kt)("th",{parentName:"tr",align:null},"ClickHouse data type"),(0,l.kt)("th",{parentName:"tr",align:null},"ORC data type (",(0,l.kt)("inlineCode",{parentName:"th"},"SELECT"),")"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BOOL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"UINT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"Int64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"INT64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"HALF_FLOAT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FLOAT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DOUBLE")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DOUBLE"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DATE64"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"TIMESTAMP")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"TIMESTAMP"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRING"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"BINARY")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"BINARY"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/decimal"},"Decimal")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"DECIMAL"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LIST"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/tuple"},"Tuple")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"STRUCT"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAP")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/map"},"Map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"MAP"))))),(0,l.kt)("p",null,"Arrays can be nested and can have a value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," type as an argument. ",(0,l.kt)("inlineCode",{parentName:"p"},"Tuple")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," types also can be nested."),(0,l.kt)("p",null,"ClickHouse supports configurable precision of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Decimal")," type. The ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," query treats the ORC ",(0,l.kt)("inlineCode",{parentName:"p"},"DECIMAL")," type as the ClickHouse ",(0,l.kt)("inlineCode",{parentName:"p"},"Decimal128")," type."),(0,l.kt)("p",null,"Unsupported ORC data types: ",(0,l.kt)("inlineCode",{parentName:"p"},"TIME32"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"FIXED_SIZE_BINARY"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"UUID"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ENUM"),"."),(0,l.kt)("p",null,"The data types of ClickHouse table columns do not have to match the corresponding ORC data fields. When inserting data, ClickHouse interprets data types according to the table above and then ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/functions/type-conversion-functions#type_conversion_function-cast"},"casts")," the data to the data type set for the ClickHouse table column."),(0,l.kt)("h3",{id:"inserting-data-2"},"Inserting Data"),(0,l.kt)("p",null,"You can insert ORC data from a file into ClickHouse table by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat filename.orc | clickhouse-client --query="INSERT INTO some_table FORMAT ORC"\n')),(0,l.kt)("p",null,"To insert data into ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/nested-data-structures/nested"},"Nested")," columns as an array of structs values you must switch on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#input_format_orc_import_nested"},"input_format_orc_import_nested")," setting."),(0,l.kt)("h3",{id:"selecting-data-2"},"Selecting Data"),(0,l.kt)("p",null,"You can select data from a ClickHouse table and save them into some file in the ORC format by the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-client --query="SELECT * FROM {some_table} FORMAT ORC" > {filename.orc}\n')),(0,l.kt)("p",null,"To exchange data with Hadoop, you can use ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/engines/table-engines/integrations/hdfs"},"HDFS table engine"),"."),(0,l.kt)("h2",{id:"lineasstring"},"LineAsString"),(0,l.kt)("p",null,"In this format, every line of input data is interpreted as a single string value. This format can only be parsed for table with a single field of type ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String"),". The remaining columns must be set to ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table#default"},"DEFAULT")," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/statements/create/table#materialized"},"MATERIALIZED"),", or omitted."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'DROP TABLE IF EXISTS line_as_string;\nCREATE TABLE line_as_string (field String) ENGINE = Memory;\nINSERT INTO line_as_string FORMAT LineAsString "I love apple", "I love banana", "I love orange";\nSELECT * FROM line_as_string;\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'\u250c\u2500field\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 "I love apple", "I love banana", "I love orange"; \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,l.kt)("h2",{id:"data-format-regexp"},"Regexp"),(0,l.kt)("p",null,"Each line of imported data is parsed according to the regular expression."),(0,l.kt)("p",null,"When working with the ",(0,l.kt)("inlineCode",{parentName:"p"},"Regexp")," format, you can use the following settings:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp")," \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String"),". Contains regular expression in the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/google/re2/wiki/Syntax"},"re2")," format.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp_escaping_rule")," \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String"),". The following escaping rules are supported:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"CSV (similarly to ",(0,l.kt)("a",{parentName:"li",href:"#csv"},"CSV"),")"),(0,l.kt)("li",{parentName:"ul"},"JSON (similarly to ",(0,l.kt)("a",{parentName:"li",href:"#jsoneachrow"},"JSONEachRow"),")"),(0,l.kt)("li",{parentName:"ul"},"Escaped (similarly to ",(0,l.kt)("a",{parentName:"li",href:"#tabseparated"},"TSV"),")"),(0,l.kt)("li",{parentName:"ul"},"Quoted (similarly to ",(0,l.kt)("a",{parentName:"li",href:"#data-format-values"},"Values"),")"),(0,l.kt)("li",{parentName:"ul"},"Raw (extracts subpatterns as a whole, no escaping rules, similarly to ",(0,l.kt)("a",{parentName:"li",href:"#tabseparatedraw"},"TSVRaw"),")"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp_skip_unmatched")," \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8"),". Defines the need to throw an exeption in case the ",(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp")," expression does not match the imported data. Can be set to ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage")),(0,l.kt)("p",null,"The regular expression from ",(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp")," setting is applied to every line of imported data. The number of subpatterns in the regular expression must be equal to the number of columns in imported dataset."),(0,l.kt)("p",null,"Lines of the imported data must be separated by newline character ",(0,l.kt)("inlineCode",{parentName:"p"},"'\\n'")," or DOS-style newline ",(0,l.kt)("inlineCode",{parentName:"p"},'"\\r\\n"'),"."),(0,l.kt)("p",null,"The content of every matched subpattern is parsed with the method of corresponding data type, according to ",(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp_escaping_rule")," setting."),(0,l.kt)("p",null,"If the regular expression does not match the line and ",(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp_skip_unmatched")," is set to 1, the line is silently skipped. If ",(0,l.kt)("inlineCode",{parentName:"p"},"format_regexp_skip_unmatched")," is set to 0, exception is thrown."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Consider the file data.tsv:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"id: 1 array: [1,2,3] string: str1 date: 2020-01-01\nid: 2 array: [1,2,3] string: str2 date: 2020-01-02\nid: 3 array: [1,2,3] string: str3 date: 2020-01-03\n")),(0,l.kt)("p",null,"and the table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE imp_regex_table (id UInt32, array Array(UInt32), string String, date Date) ENGINE = Memory;\n")),(0,l.kt)("p",null,"Import command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat data.tsv | clickhouse-client  --query \"INSERT INTO imp_regex_table FORMAT Regexp SETTINGS format_regexp='id: (.+?) array: (.+?) string: (.+?) date: (.+?)', format_regexp_escaping_rule='Escaped', format_regexp_skip_unmatched=0;\"\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM imp_regex_table;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500array\u2500\u2500\u2500\u252c\u2500string\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u2510\n\u2502  1 \u2502 [1,2,3] \u2502 str1   \u2502 2020-01-01 \u2502\n\u2502  2 \u2502 [1,2,3] \u2502 str2   \u2502 2020-01-02 \u2502\n\u2502  3 \u2502 [1,2,3] \u2502 str3   \u2502 2020-01-03 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"formatschema"},"Format Schema"),(0,l.kt)("p",null,"The file name containing the format schema is set by the setting ",(0,l.kt)("inlineCode",{parentName:"p"},"format_schema"),".\nIt\u2019s required to set this setting when it is used one of the formats ",(0,l.kt)("inlineCode",{parentName:"p"},"Cap'n Proto")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Protobuf"),".\nThe format schema is a combination of a file name and the name of a message type in this file, delimited by a colon,\ne.g.\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"schemafile.proto:MessageType"),".\nIf the file has the standard extension for the format (for example, ",(0,l.kt)("inlineCode",{parentName:"p"},".proto")," for ",(0,l.kt)("inlineCode",{parentName:"p"},"Protobuf"),"),\nit can be omitted and in this case, the format schema looks like ",(0,l.kt)("inlineCode",{parentName:"p"},"schemafile:MessageType"),"."),(0,l.kt)("p",null,"If you input or output data via the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/interfaces/cli"},"client")," in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/interfaces/cli#cli_usage"},"interactive mode"),", the file name specified in the format schema\ncan contain an absolute path or a path relative to the current directory on the client.\nIf you use the client in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/interfaces/cli#cli_usage"},"batch mode"),", the path to the schema must be relative due to security reasons."),(0,l.kt)("p",null,"If you input or output data via the ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/interfaces/http"},"HTTP interface")," the file name specified in the format schema\nshould be located in the directory specified in ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-format_schema_path"},"format_schema_path"),"\nin the server configuration."),(0,l.kt)("h2",{id:"skippingerrors"},"Skipping Errors"),(0,l.kt)("p",null,"Some formats such as ",(0,l.kt)("inlineCode",{parentName:"p"},"CSV"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TabSeparated"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"TSKV"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"JSONEachRow"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Template"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"CustomSeparated")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Protobuf")," can skip broken row if parsing error occurred and continue parsing from the beginning of next row. See ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_allow_errors_num"},"input_format_allow_errors_num")," and\n",(0,l.kt)("a",{parentName:"p",href:"/docs/en/operations/settings/#settings-input_format_allow_errors_ratio"},"input_format_allow_errors_ratio")," settings.\nLimitations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In case of parsing error ",(0,l.kt)("inlineCode",{parentName:"li"},"JSONEachRow")," skips all data until the new line (or EOF), so rows must be delimited by ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," to count errors correctly."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Template")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"CustomSeparated")," use delimiter after the last column and delimiter between rows to find the beginning of next row, so skipping errors works only if at least one of them is not empty.")),(0,l.kt)("h2",{id:"rawblob"},"RawBLOB"),(0,l.kt)("p",null,"In this format, all input data is read to a single value. It is possible to parse only a table with a single field of type ",(0,l.kt)("a",{parentName:"p",href:"/docs/en/sql-reference/data-types/string"},"String")," or similar.\nThe result is output in binary format without delimiters and escaping. If more than one value is output, the format is ambiguous, and it will be impossible to read the data back."),(0,l.kt)("p",null,"Below is a comparison of the formats ",(0,l.kt)("inlineCode",{parentName:"p"},"RawBLOB")," and ",(0,l.kt)("a",{parentName:"p",href:"#tabseparatedraw"},"TabSeparatedRaw"),".\n",(0,l.kt)("inlineCode",{parentName:"p"},"RawBLOB"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"data is output in binary format, no escaping;"),(0,l.kt)("li",{parentName:"ul"},"there are no delimiters between values;"),(0,l.kt)("li",{parentName:"ul"},"no newline at the end of each value.\n","[TabSeparatedRaw]"," (#tabseparatedraw):"),(0,l.kt)("li",{parentName:"ul"},"data is output without escaping;"),(0,l.kt)("li",{parentName:"ul"},"the rows contain values separated by tabs;"),(0,l.kt)("li",{parentName:"ul"},"there is a line feed after the last value in every row.")),(0,l.kt)("p",null,"The following is a comparison of the ",(0,l.kt)("inlineCode",{parentName:"p"},"RawBLOB")," and ",(0,l.kt)("a",{parentName:"p",href:"#rowbinary"},"RowBinary")," formats.\n",(0,l.kt)("inlineCode",{parentName:"p"},"RawBLOB"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"String fields are output without being prefixed by length.\n",(0,l.kt)("inlineCode",{parentName:"li"},"RowBinary"),":"),(0,l.kt)("li",{parentName:"ul"},"String fields are represented as length in varint format (unsigned ","[LEB128]"," (",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/LEB128"},"https://en.wikipedia.org/wiki/LEB128"),")), followed by the bytes of the string.")),(0,l.kt)("p",null,"When an empty data is passed to the ",(0,l.kt)("inlineCode",{parentName:"p"},"RawBLOB")," input, ClickHouse throws an exception:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Code: 108. DB::Exception: No data to insert\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ clickhouse-client --query "CREATE TABLE {some_table} (a String) ENGINE = Memory;"\n$ cat {filename} | clickhouse-client --query="INSERT INTO {some_table} FORMAT RawBLOB"\n$ clickhouse-client --query "SELECT * FROM {some_table} FORMAT RawBLOB" | md5sum\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"f9725a22f9191e064120d718e26862a9  -\n")),(0,l.kt)("h2",{id:"msgpack"},"MsgPack"),(0,l.kt)("p",null,"ClickHouse supports reading and writing ",(0,l.kt)("a",{parentName:"p",href:"https://msgpack.org/"},"MessagePack")," data files."),(0,l.kt)("h3",{id:"data-types-matching-msgpack"},"Data Types Matching"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"MessagePack data type (",(0,l.kt)("inlineCode",{parentName:"th"},"INSERT"),")"),(0,l.kt)("th",{parentName:"tr",align:null},"ClickHouse data type"),(0,l.kt)("th",{parentName:"tr",align:null},"MessagePack data type (",(0,l.kt)("inlineCode",{parentName:"th"},"SELECT"),")"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint N"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"positive fixint")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UIntN")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint N"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int N")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"IntN")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int N"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bool")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/int-uint"},"UInt8")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 8"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixstr"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"str 8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"str 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"str 32"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/string"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bin 8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixstr"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"str 8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"str 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"str 32"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/fixedstring"},"FixedString")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bin 8"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"bin 32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float 32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float 32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float 64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/float"},"Float64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"float 64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 16")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/date"},"Date")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 16"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/datetime"},"DateTime64")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"uint 64"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixarray"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"array 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"array 32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/array"},"Array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixarray"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"array 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"array 32"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixmap"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"map 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"map 32")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/en/sql-reference/data-types/map"},"Map")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fixmap"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"map 16"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"map 32"))))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("p",null,'Writing to a file ".msgpk":'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'$ clickhouse-client --query="CREATE TABLE msgpack (array Array(UInt8)) ENGINE = Memory;"\n$ clickhouse-client --query="INSERT INTO msgpack VALUES ([0, 1, 2, 3, 42, 253, 254, 255]), ([255, 254, 253, 42, 3, 2, 1, 0])";\n$ clickhouse-client --query="SELECT * FROM msgpack FORMAT MsgPack" > tmp_msgpack.msgpk;\n')))}k.isMDXComponent=!0}}]);