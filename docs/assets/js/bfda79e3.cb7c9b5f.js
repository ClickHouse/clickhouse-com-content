"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[33580],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},17290:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={sidebar_position:38,sidebar_label:"Parametric"},s="Parametric Aggregate Functions",p={unversionedId:"en/sql-reference/aggregate-functions/parametric-functions",id:"en/sql-reference/aggregate-functions/parametric-functions",title:"Parametric Aggregate Functions",description:"aggregatefunctionsparametric}",source:"@site/docs/en/sql-reference/aggregate-functions/parametric-functions.md",sourceDirName:"en/sql-reference/aggregate-functions",slug:"/en/sql-reference/aggregate-functions/parametric-functions",permalink:"/en/sql-reference/aggregate-functions/parametric-functions",tags:[],version:"current",sidebarPosition:38,frontMatter:{sidebar_position:38,sidebar_label:"Parametric"},sidebar:"tutorialSidebar",previous:{title:"Combinators",permalink:"/en/sql-reference/aggregate-functions/combinators"},next:{title:"Table Functions",permalink:"/en/sql-reference/table-functions/"}},u={},m=[{value:"histogram",id:"histogram",level:2},{value:"sequenceMatch(pattern)(timestamp, cond1, cond2, \u2026)",id:"function-sequencematch",level:2},{value:"sequenceCount(pattern)(time, cond1, cond2, \u2026)",id:"function-sequencecount",level:2},{value:"windowFunnel",id:"windowfunnel",level:2},{value:"retention",id:"retention",level:2},{value:"uniqUpTo(N)(x)",id:"uniquptonx",level:2},{value:"sumMapFiltered(keys_to_keep)(keys, values)",id:"summapfilteredkeys-to-keepkeys-values",level:2},{value:"sequenceNextNode",id:"sequenceNextNode",level:2}],d={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aggregate_functions_parametric"},"Parametric Aggregate Functions"),(0,i.kt)("p",null,"Some aggregate functions can accept not only argument columns (used for compression), but a set of parameters \u2013 constants for initialization. The syntax is two pairs of brackets instead of one. The first is for parameters, and the second is for arguments."),(0,i.kt)("h2",{id:"histogram"},"histogram"),(0,i.kt)("p",null,"Calculates an adaptive histogram. It does not guarantee precise results."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"histogram(number_of_bins)(values)\n")),(0,i.kt)("p",null,"The functions uses ",(0,i.kt)("a",{parentName:"p",href:"http://jmlr.org/papers/volume11/ben-haim10a/ben-haim10a.pdf"},"A Streaming Parallel Decision Tree Algorithm"),". The borders of histogram bins are adjusted as new data enters a function. In common case, the widths of bins are not equal."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"values")," \u2014 ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/syntax#syntax-expressions"},"Expression")," resulting in input values."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"number_of_bins")," \u2014 Upper limit for the number of bins in the histogram. The function automatically calculates the number of bins. It tries to reach the specified number of bins, but if it fails, it uses fewer bins."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned values")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/data-types/array"},"Array")," of ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/data-types/tuple"},"Tuples")," of the following format:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"```\n[(lower_1, upper_1, height_1), ... (lower_N, upper_N, height_N)]\n```\n\n- `lower` \u2014 Lower bound of the bin.\n- `upper` \u2014 Upper bound of the bin.\n- `height` \u2014 Calculated height of the bin.\n")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT histogram(5)(number + 1)\nFROM (\n    SELECT *\n    FROM system.numbers\n    LIMIT 20\n)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500histogram(5)(plus(number, 1))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [(1,4.5,4),(4.5,8.5,4),(8.5,12.75,4.125),(12.75,17,4.625),(17,20,3.25)] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"You can visualize a histogram with the ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/functions/other-functions#function-bar"},"bar")," function, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"WITH histogram(5)(rand() % 100) AS hist\nSELECT\n    arrayJoin(hist).3 AS height,\n    bar(height, 0, 6, 5) AS bar\nFROM\n(\n    SELECT *\n    FROM system.numbers\n    LIMIT 20\n)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500height\u2500\u252c\u2500bar\u2500\u2500\u2500\u2510\n\u2502  2.125 \u2502 \u2588\u258b    \u2502\n\u2502   3.25 \u2502 \u2588\u2588\u258c   \u2502\n\u2502  5.625 \u2502 \u2588\u2588\u2588\u2588\u258f \u2502\n\u2502  5.625 \u2502 \u2588\u2588\u2588\u2588\u258f \u2502\n\u2502  3.375 \u2502 \u2588\u2588\u258c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"In this case, you should remember that you do not know the histogram bin borders."),(0,i.kt)("h2",{id:"function-sequencematch"},"sequenceMatch(pattern)(timestamp, cond1, cond2, \u2026)"),(0,i.kt)("p",null,"Checks whether the sequence contains an event chain that matches the pattern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"sequenceMatch(pattern)(timestamp, cond1, cond2, ...)\n")),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Events that occur at the same second may lay in the sequence in an undefined order affecting the result."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," \u2014 Column considered to contain time data. Typical data types are ",(0,i.kt)("inlineCode",{parentName:"p"},"Date")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime"),". You can also use any of the supported ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/data-types/int-uint"},"UInt")," data types.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"cond1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"cond2")," \u2014 Conditions that describe the chain of events. Data type: ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt8"),". You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 Pattern string. See ",(0,i.kt)("a",{parentName:"li",href:"#sequence-function-pattern-syntax"},"Pattern syntax"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned values")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1, if the pattern is matched."),(0,i.kt)("li",{parentName:"ul"},"0, if the pattern isn\u2019t matched.")),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt8"),"."),(0,i.kt)("a",{name:"sequence-function-pattern-syntax"}),"**Pattern syntax**",(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"(?N)")," \u2014 Matches the condition argument at position ",(0,i.kt)("inlineCode",{parentName:"p"},"N"),". Conditions are numbered in the ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 32]")," range. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"(?1)")," matches the argument passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cond1")," parameter.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},".*")," \u2014 Matches any number of events. You do not need conditional arguments to match this element of the pattern.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"(?t operator value)")," \u2014 Sets the time in seconds that should separate two events. For example, pattern ",(0,i.kt)("inlineCode",{parentName:"p"},"(?1)(?t>1800)(?2)")," matches events that occur more than 1800 seconds from each other. An arbitrary number of any events can lay between these events. You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},">="),", ",(0,i.kt)("inlineCode",{parentName:"p"},">"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"==")," operators."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("p",null,"Consider data in the ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500time\u2500\u252c\u2500number\u2500\u2510\n\u2502    1 \u2502      1 \u2502\n\u2502    2 \u2502      3 \u2502\n\u2502    3 \u2502      2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"Perform the query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2) FROM t\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500sequenceMatch('(?1)(?2)')(time, equals(number, 1), equals(number, 2))\u2500\u2510\n\u2502                                                                     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"The function found the event chain where number 2 follows number 1. It skipped number 3 between them, because the number is not described as an event. If we want to take this number into account when searching for the event chain given in the example, we should make a condition for it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 3) FROM t\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500sequenceMatch('(?1)(?2)')(time, equals(number, 1), equals(number, 2), equals(number, 3))\u2500\u2510\n\u2502                                                                                        0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"In this case, the function couldn\u2019t find the event chain matching the pattern, because the event for number 3 occurred between 1 and 2. If in the same case we checked the condition for number 4, the sequence would match the pattern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sequenceMatch('(?1)(?2)')(time, number = 1, number = 2, number = 4) FROM t\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500sequenceMatch('(?1)(?2)')(time, equals(number, 1), equals(number, 2), equals(number, 4))\u2500\u2510\n\u2502                                                                                        1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See Also")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#function-sequencecount"},"sequenceCount"))),(0,i.kt)("h2",{id:"function-sequencecount"},"sequenceCount(pattern)(time, cond1, cond2, \u2026)"),(0,i.kt)("p",null,"Counts the number of event chains that matched the pattern. The function searches event chains that do not overlap. It starts to search for the next chain after the current chain is matched."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Events that occur at the same second may lay in the sequence in an undefined order affecting the result."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"sequenceCount(pattern)(timestamp, cond1, cond2, ...)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"timestamp")," \u2014 Column considered to contain time data. Typical data types are ",(0,i.kt)("inlineCode",{parentName:"p"},"Date")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTime"),". You can also use any of the supported ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/data-types/int-uint"},"UInt")," data types.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"cond1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"cond2")," \u2014 Conditions that describe the chain of events. Data type: ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt8"),". You can pass up to 32 condition arguments. The function takes only the events described in these conditions into account. If the sequence contains data that isn\u2019t described in a condition, the function skips them."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pattern")," \u2014 Pattern string. See ",(0,i.kt)("a",{parentName:"li",href:"#sequence-function-pattern-syntax"},"Pattern syntax"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned values")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Number of non-overlapping event chains that are matched.")),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt64"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Consider data in the ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500time\u2500\u252c\u2500number\u2500\u2510\n\u2502    1 \u2502      1 \u2502\n\u2502    2 \u2502      3 \u2502\n\u2502    3 \u2502      2 \u2502\n\u2502    4 \u2502      1 \u2502\n\u2502    5 \u2502      3 \u2502\n\u2502    6 \u2502      2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"Count how many times the number 2 occurs after the number 1 with any amount of other numbers between them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sequenceCount('(?1).*(?2)')(time, number = 1, number = 2) FROM t\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500sequenceCount('(?1).*(?2)')(time, equals(number, 1), equals(number, 2))\u2500\u2510\n\u2502                                                                       2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See Also")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#function-sequencematch"},"sequenceMatch"))),(0,i.kt)("h2",{id:"windowfunnel"},"windowFunnel"),(0,i.kt)("p",null,"Searches for event chains in a sliding time window and calculates the maximum number of events that occurred from the chain."),(0,i.kt)("p",null,"The function works according to the algorithm:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The function searches for data that triggers the first condition in the chain and sets the event counter to 1. This is the moment when the sliding window starts.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If events from the chain occur sequentially within the window, the counter is incremented. If the sequence of events is disrupted, the counter isn\u2019t incremented.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the data has multiple event chains at varying points of completion, the function will only output the size of the longest chain."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"windowFunnel(window, [mode, [mode, ... ]])(timestamp, cond1, cond2, ..., condN)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," \u2014 Name of the column containing the timestamp. Data types supported: ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/date"},"Date"),", ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/datetime#data_type-datetime"},"DateTime")," and other unsigned integer types (note that even though timestamp supports the ",(0,i.kt)("inlineCode",{parentName:"li"},"UInt64")," type, it\u2019s value can\u2019t exceed the Int64 maximum, which is 2^63 - 1)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cond")," \u2014 Conditions or data describing the chain of events. ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"window")," \u2014 Length of the sliding window, it is the time interval between the first and the last condition. The unit of ",(0,i.kt)("inlineCode",{parentName:"li"},"window")," depends on the ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," itself and varies. Determined using the expression ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp of cond1 <= timestamp of cond2 <= ... <= timestamp of condN <= timestamp of cond1 + window"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mode")," \u2014 It is an optional argument. One or more modes can be set.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'strict_deduplication'")," \u2014 If the same condition holds for the sequence of events, then such repeating event interrupts further processing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'strict_order'")," \u2014 Don't allow interventions of other events. E.g. in the case of ",(0,i.kt)("inlineCode",{parentName:"li"},"A->B->D->C"),", it stops finding ",(0,i.kt)("inlineCode",{parentName:"li"},"A->B->C")," at the ",(0,i.kt)("inlineCode",{parentName:"li"},"D")," and the max event level is 2."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'strict_increase'")," \u2014 Apply conditions only to events with strictly increasing timestamps.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned value")),(0,i.kt)("p",null,"The maximum number of consecutive triggered conditions from the chain within the sliding time window.\nAll the chains in the selection are analyzed."),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Determine if a set period of time is enough for the user to select a phone and purchase it twice in the online store."),(0,i.kt)("p",null,"Set the following chain of events:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The user logged in to their account on the store (",(0,i.kt)("inlineCode",{parentName:"li"},"eventID = 1003"),")."),(0,i.kt)("li",{parentName:"ol"},"The user searches for a phone (",(0,i.kt)("inlineCode",{parentName:"li"},"eventID = 1007, product = 'phone'"),")."),(0,i.kt)("li",{parentName:"ol"},"The user placed an order (",(0,i.kt)("inlineCode",{parentName:"li"},"eventID = 1009"),")."),(0,i.kt)("li",{parentName:"ol"},"The user made the order again (",(0,i.kt)("inlineCode",{parentName:"li"},"eventID = 1010"),").")),(0,i.kt)("p",null,"Input table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500event_date\u2500\u252c\u2500user_id\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500eventID\u2500\u252c\u2500product\u2500\u2510\n\u2502 2019-01-28 \u2502       1 \u2502 2019-01-29 10:00:00 \u2502    1003 \u2502 phone   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500event_date\u2500\u252c\u2500user_id\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500eventID\u2500\u252c\u2500product\u2500\u2510\n\u2502 2019-01-31 \u2502       1 \u2502 2019-01-31 09:00:00 \u2502    1007 \u2502 phone   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500event_date\u2500\u252c\u2500user_id\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500eventID\u2500\u252c\u2500product\u2500\u2510\n\u2502 2019-01-30 \u2502       1 \u2502 2019-01-30 08:00:00 \u2502    1009 \u2502 phone   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500event_date\u2500\u252c\u2500user_id\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500eventID\u2500\u252c\u2500product\u2500\u2510\n\u2502 2019-02-01 \u2502       1 \u2502 2019-02-01 08:00:00 \u2502    1010 \u2502 phone   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"Find out how far the user ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," could get through the chain in a period in January-February of 2019."),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    level,\n    count() AS c\nFROM\n(\n    SELECT\n        user_id,\n        windowFunnel(6048000000000000)(timestamp, eventID = 1003, eventID = 1009, eventID = 1007, eventID = 1010) AS level\n    FROM trend\n    WHERE (event_date >= '2019-01-01') AND (event_date <= '2019-02-02')\n    GROUP BY user_id\n)\nGROUP BY level\nORDER BY level ASC;\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500level\u2500\u252c\u2500c\u2500\u2510\n\u2502     4 \u2502 1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n")),(0,i.kt)("h2",{id:"retention"},"retention"),(0,i.kt)("p",null,"The function takes as arguments a set of conditions from 1 to 32 arguments of type ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt8")," that indicate whether a certain condition was met for the event.\nAny condition can be specified as an argument (as in ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/statements/select/where#select-where"},"WHERE"),")."),(0,i.kt)("p",null,"The conditions, except the first, apply in pairs: the result of the second will be true if the first and second are true, of the third if the first and third are true, etc."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"retention(cond1, cond2, ..., cond32);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cond")," \u2014 An expression that returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"UInt8")," result (1 or 0).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned value")),(0,i.kt)("p",null,"The array of 1 or 0."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 \u2014 Condition was met for the event."),(0,i.kt)("li",{parentName:"ul"},"0 \u2014 Condition wasn\u2019t met for the event.")),(0,i.kt)("p",null,"Type: ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt8"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"Let\u2019s consider an example of calculating the ",(0,i.kt)("inlineCode",{parentName:"p"},"retention")," function to determine site traffic."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1.")," \u0421reate a table to illustrate an example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE retention_test(date Date, uid Int32) ENGINE = Memory;\n\nINSERT INTO retention_test SELECT '2020-01-01', number FROM numbers(5);\nINSERT INTO retention_test SELECT '2020-01-02', number FROM numbers(10);\nINSERT INTO retention_test SELECT '2020-01-03', number FROM numbers(15);\n")),(0,i.kt)("p",null,"Input table:"),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM retention_test\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500uid\u2500\u2510\n\u2502 2020-01-01 \u2502   0 \u2502\n\u2502 2020-01-01 \u2502   1 \u2502\n\u2502 2020-01-01 \u2502   2 \u2502\n\u2502 2020-01-01 \u2502   3 \u2502\n\u2502 2020-01-01 \u2502   4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500uid\u2500\u2510\n\u2502 2020-01-02 \u2502   0 \u2502\n\u2502 2020-01-02 \u2502   1 \u2502\n\u2502 2020-01-02 \u2502   2 \u2502\n\u2502 2020-01-02 \u2502   3 \u2502\n\u2502 2020-01-02 \u2502   4 \u2502\n\u2502 2020-01-02 \u2502   5 \u2502\n\u2502 2020-01-02 \u2502   6 \u2502\n\u2502 2020-01-02 \u2502   7 \u2502\n\u2502 2020-01-02 \u2502   8 \u2502\n\u2502 2020-01-02 \u2502   9 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500uid\u2500\u2510\n\u2502 2020-01-03 \u2502   0 \u2502\n\u2502 2020-01-03 \u2502   1 \u2502\n\u2502 2020-01-03 \u2502   2 \u2502\n\u2502 2020-01-03 \u2502   3 \u2502\n\u2502 2020-01-03 \u2502   4 \u2502\n\u2502 2020-01-03 \u2502   5 \u2502\n\u2502 2020-01-03 \u2502   6 \u2502\n\u2502 2020-01-03 \u2502   7 \u2502\n\u2502 2020-01-03 \u2502   8 \u2502\n\u2502 2020-01-03 \u2502   9 \u2502\n\u2502 2020-01-03 \u2502  10 \u2502\n\u2502 2020-01-03 \u2502  11 \u2502\n\u2502 2020-01-03 \u2502  12 \u2502\n\u2502 2020-01-03 \u2502  13 \u2502\n\u2502 2020-01-03 \u2502  14 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2.")," Group users by unique ID ",(0,i.kt)("inlineCode",{parentName:"p"},"uid")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"retention")," function."),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    uid,\n    retention(date = '2020-01-01', date = '2020-01-02', date = '2020-01-03') AS r\nFROM retention_test\nWHERE date IN ('2020-01-01', '2020-01-02', '2020-01-03')\nGROUP BY uid\nORDER BY uid ASC\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500uid\u2500\u252c\u2500r\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   0 \u2502 [1,1,1] \u2502\n\u2502   1 \u2502 [1,1,1] \u2502\n\u2502   2 \u2502 [1,1,1] \u2502\n\u2502   3 \u2502 [1,1,1] \u2502\n\u2502   4 \u2502 [1,1,1] \u2502\n\u2502   5 \u2502 [0,0,0] \u2502\n\u2502   6 \u2502 [0,0,0] \u2502\n\u2502   7 \u2502 [0,0,0] \u2502\n\u2502   8 \u2502 [0,0,0] \u2502\n\u2502   9 \u2502 [0,0,0] \u2502\n\u2502  10 \u2502 [0,0,0] \u2502\n\u2502  11 \u2502 [0,0,0] \u2502\n\u2502  12 \u2502 [0,0,0] \u2502\n\u2502  13 \u2502 [0,0,0] \u2502\n\u2502  14 \u2502 [0,0,0] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"3.")," Calculate the total number of site visits per day."),(0,i.kt)("p",null,"Query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    sum(r[1]) AS r1,\n    sum(r[2]) AS r2,\n    sum(r[3]) AS r3\nFROM\n(\n    SELECT\n        uid,\n        retention(date = '2020-01-01', date = '2020-01-02', date = '2020-01-03') AS r\n    FROM retention_test\n    WHERE date IN ('2020-01-01', '2020-01-02', '2020-01-03')\n    GROUP BY uid\n)\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500r1\u2500\u252c\u2500r2\u2500\u252c\u2500r3\u2500\u2510\n\u2502  5 \u2502  5 \u2502  5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,"Where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"r1"),"- the number of unique visitors who visited the site during 2020-01-01 (the ",(0,i.kt)("inlineCode",{parentName:"li"},"cond1")," condition)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"r2"),"- the number of unique visitors who visited the site during a specific time period between 2020-01-01 and 2020-01-02 (",(0,i.kt)("inlineCode",{parentName:"li"},"cond1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"cond2")," conditions)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"r3"),"- the number of unique visitors who visited the site during a specific time period between 2020-01-01 and 2020-01-03 (",(0,i.kt)("inlineCode",{parentName:"li"},"cond1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"cond3")," conditions).")),(0,i.kt)("h2",{id:"uniquptonx"},"uniqUpTo(N)(x)"),(0,i.kt)("p",null,"Calculates the number of different argument values \u200b\u200bif it is less than or equal to N. If the number of different argument values is greater than N, it returns N + 1."),(0,i.kt)("p",null,"Recommended for use with small Ns, up to 10. The maximum value of N is 100."),(0,i.kt)("p",null,"For the state of an aggregate function, it uses the amount of memory equal to 1 + N ","*"," the size of one value of bytes.\nFor strings, it stores a non-cryptographic hash of 8 bytes. That is, the calculation is approximated for strings."),(0,i.kt)("p",null,"The function also works for several arguments."),(0,i.kt)("p",null,"It works as fast as possible, except for cases when a large N value is used and the number of unique values is slightly less than N."),(0,i.kt)("p",null,"Usage example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Problem: Generate a report that shows only keywords that produced at least 5 unique users.\nSolution: Write in the GROUP BY query SearchPhrase HAVING uniqUpTo(4)(UserID) >= 5\n")),(0,i.kt)("h2",{id:"summapfilteredkeys-to-keepkeys-values"},"sumMapFiltered(keys_to_keep)(keys, values)"),(0,i.kt)("p",null,"Same behavior as ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/aggregate-functions/reference/summap#agg_functions-summap"},"sumMap")," except that an array of keys is passed as a parameter. This can be especially useful when working with a high cardinality of keys."),(0,i.kt)("h2",{id:"sequenceNextNode"},"sequenceNextNode"),(0,i.kt)("p",null,"Returns a value of the next event that matched an event chain."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Experimental function, ",(0,i.kt)("inlineCode",{parentName:"em"},"SET allow_experimental_funnel_functions = 1")," to enable it.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"sequenceNextNode(direction, base)(timestamp, event_column, base_condition, event1, event2, event3, ...)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"direction")," \u2014 Used to navigate to directions."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"forward \u2014 Moving forward."),(0,i.kt)("li",{parentName:"ul"},"backward \u2014 Moving backward."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"base")," \u2014 Used to set the base point."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"head \u2014 Set the base point to the first event."),(0,i.kt)("li",{parentName:"ul"},"tail \u2014 Set the base point to the last event."),(0,i.kt)("li",{parentName:"ul"},"first_match \u2014 Set the base point to the first matched ",(0,i.kt)("inlineCode",{parentName:"li"},"event1"),"."),(0,i.kt)("li",{parentName:"ul"},"last_match \u2014 Set the base point to the last matched ",(0,i.kt)("inlineCode",{parentName:"li"},"event1"),".")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," \u2014 Name of the column containing the timestamp. Data types supported: ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/date"},"Date"),", ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/datetime#data_type-datetime"},"DateTime")," and other unsigned integer types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event_column")," \u2014 Name of the column containing the value of the next event to be returned. Data types supported: ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/string"},"String")," and ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/nullable"},"Nullable(String)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"base_condition")," \u2014 Condition that the base point must fulfill."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"event2"),", ... \u2014 Conditions describing the chain of events. ",(0,i.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/int-uint"},"UInt8"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned values")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event_column[next_index]")," \u2014 If the pattern is matched and next value exists."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NULL")," - If the pattern isn\u2019t matched or next value doesn't exist.")),(0,i.kt)("p",null,"Type: ",(0,i.kt)("a",{parentName:"p",href:"/en/sql-reference/data-types/nullable"},"Nullable(String)"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"It can be used when events are A->B->C->D->E and you want to know the event following B->C, which is D."),(0,i.kt)("p",null,"The query statement searching the event following A->B:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test_flow (\n    dt DateTime,\n    id int,\n    page String)\nENGINE = MergeTree()\nPARTITION BY toYYYYMMDD(dt)\nORDER BY id;\n\nINSERT INTO test_flow VALUES (1, 1, 'A') (2, 1, 'B') (3, 1, 'C') (4, 1, 'D') (5, 1, 'E');\n\nSELECT id, sequenceNextNode('forward', 'head')(dt, page, page = 'A', page = 'A', page = 'B') as next_flow FROM test_flow GROUP BY id;\n")),(0,i.kt)("p",null,"Result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500next_flow\u2500\u2510\n\u2502  1 \u2502 C         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Behavior for ",(0,i.kt)("inlineCode",{parentName:"strong"},"forward")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"head"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE test_flow DELETE WHERE 1 = 1 settings mutations_sync = 1;\n\nINSERT INTO test_flow VALUES (1, 1, 'Home') (2, 1, 'Gift') (3, 1, 'Exit');\nINSERT INTO test_flow VALUES (1, 2, 'Home') (2, 2, 'Home') (3, 2, 'Gift') (4, 2, 'Basket');\nINSERT INTO test_flow VALUES (1, 3, 'Gift') (2, 3, 'Home') (3, 3, 'Gift') (4, 3, 'Basket');\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('forward', 'head')(dt, page, page = 'Home', page = 'Home', page = 'Gift') FROM test_flow GROUP BY id;\n\n                  dt   id   page\n 1970-01-01 09:00:01    1   Home // Base point, Matched with Home\n 1970-01-01 09:00:02    1   Gift // Matched with Gift\n 1970-01-01 09:00:03    1   Exit // The result\n\n 1970-01-01 09:00:01    2   Home // Base point, Matched with Home\n 1970-01-01 09:00:02    2   Home // Unmatched with Gift\n 1970-01-01 09:00:03    2   Gift\n 1970-01-01 09:00:04    2   Basket\n\n 1970-01-01 09:00:01    3   Gift // Base point, Unmatched with Home\n 1970-01-01 09:00:02    3   Home\n 1970-01-01 09:00:03    3   Gift\n 1970-01-01 09:00:04    3   Basket\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Behavior for ",(0,i.kt)("inlineCode",{parentName:"strong"},"backward")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"tail"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('backward', 'tail')(dt, page, page = 'Basket', page = 'Basket', page = 'Gift') FROM test_flow GROUP BY id;\n\n                 dt   id   page\n1970-01-01 09:00:01    1   Home\n1970-01-01 09:00:02    1   Gift\n1970-01-01 09:00:03    1   Exit // Base point, Unmatched with Basket\n\n1970-01-01 09:00:01    2   Home\n1970-01-01 09:00:02    2   Home // The result\n1970-01-01 09:00:03    2   Gift // Matched with Gift\n1970-01-01 09:00:04    2   Basket // Base point, Matched with Basket\n\n1970-01-01 09:00:01    3   Gift\n1970-01-01 09:00:02    3   Home // The result\n1970-01-01 09:00:03    3   Gift // Base point, Matched with Gift\n1970-01-01 09:00:04    3   Basket // Base point, Matched with Basket\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Behavior for ",(0,i.kt)("inlineCode",{parentName:"strong"},"forward")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"first_match"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, page = 'Gift', page = 'Gift') FROM test_flow GROUP BY id;\n\n                 dt   id   page\n1970-01-01 09:00:01    1   Home\n1970-01-01 09:00:02    1   Gift // Base point\n1970-01-01 09:00:03    1   Exit // The result\n\n1970-01-01 09:00:01    2   Home\n1970-01-01 09:00:02    2   Home\n1970-01-01 09:00:03    2   Gift // Base point\n1970-01-01 09:00:04    2   Basket  The result\n\n1970-01-01 09:00:01    3   Gift // Base point\n1970-01-01 09:00:02    3   Home // The result\n1970-01-01 09:00:03    3   Gift\n1970-01-01 09:00:04    3   Basket\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, page = 'Gift', page = 'Gift', page = 'Home') FROM test_flow GROUP BY id;\n\n                 dt   id   page\n1970-01-01 09:00:01    1   Home\n1970-01-01 09:00:02    1   Gift // Base point\n1970-01-01 09:00:03    1   Exit // Unmatched with Home\n\n1970-01-01 09:00:01    2   Home\n1970-01-01 09:00:02    2   Home\n1970-01-01 09:00:03    2   Gift // Base point\n1970-01-01 09:00:04    2   Basket // Unmatched with Home\n\n1970-01-01 09:00:01    3   Gift // Base point\n1970-01-01 09:00:02    3   Home // Matched with Home\n1970-01-01 09:00:03    3   Gift // The result\n1970-01-01 09:00:04    3   Basket\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Behavior for ",(0,i.kt)("inlineCode",{parentName:"strong"},"backward")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"last_match"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, page = 'Gift', page = 'Gift') FROM test_flow GROUP BY id;\n\n                 dt   id   page\n1970-01-01 09:00:01    1   Home // The result\n1970-01-01 09:00:02    1   Gift // Base point\n1970-01-01 09:00:03    1   Exit\n\n1970-01-01 09:00:01    2   Home\n1970-01-01 09:00:02    2   Home // The result\n1970-01-01 09:00:03    2   Gift // Base point\n1970-01-01 09:00:04    2   Basket\n\n1970-01-01 09:00:01    3   Gift\n1970-01-01 09:00:02    3   Home // The result\n1970-01-01 09:00:03    3   Gift // Base point\n1970-01-01 09:00:04    3   Basket\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, page = 'Gift', page = 'Gift', page = 'Home') FROM test_flow GROUP BY id;\n\n                 dt   id   page\n1970-01-01 09:00:01    1   Home // Matched with Home, the result is null\n1970-01-01 09:00:02    1   Gift // Base point\n1970-01-01 09:00:03    1   Exit\n\n1970-01-01 09:00:01    2   Home // The result\n1970-01-01 09:00:02    2   Home // Matched with Home\n1970-01-01 09:00:03    2   Gift // Base point\n1970-01-01 09:00:04    2   Basket\n\n1970-01-01 09:00:01    3   Gift // The result\n1970-01-01 09:00:02    3   Home // Matched with Home\n1970-01-01 09:00:03    3   Gift // Base point\n1970-01-01 09:00:04    3   Basket\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Behavior for ",(0,i.kt)("inlineCode",{parentName:"strong"},"base_condition"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test_flow_basecond\n(\n    `dt` DateTime,\n    `id` int,\n    `page` String,\n    `ref` String\n)\nENGINE = MergeTree\nPARTITION BY toYYYYMMDD(dt)\nORDER BY id;\n\nINSERT INTO test_flow_basecond VALUES (1, 1, 'A', 'ref4') (2, 1, 'A', 'ref3') (3, 1, 'B', 'ref2') (4, 1, 'B', 'ref1');\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('forward', 'head')(dt, page, ref = 'ref1', page = 'A') FROM test_flow_basecond GROUP BY id;\n\n                  dt   id   page   ref\n 1970-01-01 09:00:01    1   A      ref4 // The head can not be base point because the ref column of the head unmatched with 'ref1'.\n 1970-01-01 09:00:02    1   A      ref3\n 1970-01-01 09:00:03    1   B      ref2\n 1970-01-01 09:00:04    1   B      ref1\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('backward', 'tail')(dt, page, ref = 'ref4', page = 'B') FROM test_flow_basecond GROUP BY id;\n\n                  dt   id   page   ref\n 1970-01-01 09:00:01    1   A      ref4\n 1970-01-01 09:00:02    1   A      ref3\n 1970-01-01 09:00:03    1   B      ref2\n 1970-01-01 09:00:04    1   B      ref1 // The tail can not be base point because the ref column of the tail unmatched with 'ref4'.\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('forward', 'first_match')(dt, page, ref = 'ref3', page = 'A') FROM test_flow_basecond GROUP BY id;\n\n                  dt   id   page   ref\n 1970-01-01 09:00:01    1   A      ref4 // This row can not be base point because the ref column unmatched with 'ref3'.\n 1970-01-01 09:00:02    1   A      ref3 // Base point\n 1970-01-01 09:00:03    1   B      ref2 // The result\n 1970-01-01 09:00:04    1   B      ref1\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, sequenceNextNode('backward', 'last_match')(dt, page, ref = 'ref2', page = 'B') FROM test_flow_basecond GROUP BY id;\n\n                  dt   id   page   ref\n 1970-01-01 09:00:01    1   A      ref4\n 1970-01-01 09:00:02    1   A      ref3 // The result\n 1970-01-01 09:00:03    1   B      ref2 // Base point\n 1970-01-01 09:00:04    1   B      ref1 // This row can not be base point because the ref column unmatched with 'ref2'.\n")))}c.isMDXComponent=!0}}]);