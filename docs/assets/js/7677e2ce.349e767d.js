"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[4322],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,_=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(_,l(l({ref:t},m),{},{components:n})):a.createElement(_,l({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},61365:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],o={},s="replicas",p={unversionedId:"en/operations/system-tables/replicas",id:"en/operations/system-tables/replicas",title:"replicas",description:"system_tables-replicas}",source:"@site/docs/en/operations/system-tables/replicas.md",sourceDirName:"en/operations/system-tables",slug:"/en/operations/system-tables/replicas",permalink:"/en/operations/system-tables/replicas",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"quotas_usage",permalink:"/en/operations/system-tables/quotas_usage"},next:{title:"replicated_fetches",permalink:"/en/operations/system-tables/replicated_fetches"}},m={},u=[],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"system_tables-replicas"},"replicas"),(0,r.kt)("p",null,"Contains information and status for replicated tables residing on the local server.\nThis table can be used for monitoring. The table contains a row for every Replicated","*"," table."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM system.replicas\nWHERE table = 'test_table'\nFORMAT Vertical\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Query id: dc6dcbcb-dc28-4df9-ae27-4354f5b3b13e\n\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ndatabase:                    db\ntable:                       test_table\nengine:                      ReplicatedMergeTree\nis_leader:                   1\ncan_become_leader:           1\nis_readonly:                 0\nis_session_expired:          0\nfuture_parts:                0\nparts_to_check:              0\nzookeeper_path:              /test/test_table\nreplica_name:                r1\nreplica_path:                /test/test_table/replicas/r1\ncolumns_version:             -1\nqueue_size:                  27\ninserts_in_queue:            27\nmerges_in_queue:             0\npart_mutations_in_queue:     0\nqueue_oldest_time:           2021-10-12 14:48:48\ninserts_oldest_time:         2021-10-12 14:48:48\nmerges_oldest_time:          1970-01-01 03:00:00\npart_mutations_oldest_time:  1970-01-01 03:00:00\noldest_part_to_get:          1_17_17_0\noldest_part_to_merge_to:     \noldest_part_to_mutate_to:    \nlog_max_index:               206\nlog_pointer:                 207\nlast_queue_update:           2021-10-12 14:50:08\nabsolute_delay:              99\ntotal_replicas:              5\nactive_replicas:             5\nlast_queue_update_exception: \nzookeeper_exception:         \nreplica_is_active:           {'r1':1,'r2':1}\n")),(0,r.kt)("p",null,"Columns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"database")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - Database name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - Table name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"engine")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - Table engine name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is_leader")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),") - Whether the replica is the leader.\nMultiple replicas can be leaders at the same time. A replica can be prevented from becoming a leader using the ",(0,r.kt)("inlineCode",{parentName:"li"},"merge_tree")," setting ",(0,r.kt)("inlineCode",{parentName:"li"},"replicated_can_become_leader"),". The leaders are responsible for scheduling background merges.\nNote that writes can be performed to any replica that is available and has a session in ZK, regardless of whether it is a leader."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"can_become_leader")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),") - Whether the replica can be a leader."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is_readonly")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),") - Whether the replica is in read-only mode.\nThis mode is turned on if the config does not have sections with ZooKeeper, if an unknown error occurred when reinitializing sessions in ZooKeeper, and during session reinitialization in ZooKeeper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is_session_expired")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),") - the session with ZooKeeper has expired. Basically the same as ",(0,r.kt)("inlineCode",{parentName:"li"},"is_readonly"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"future_parts")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),") - The number of data parts that will appear as the result of INSERTs or merges that haven\u2019t been done yet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parts_to_check")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),") - The number of data parts in the queue for verification. A part is put in the verification queue if there is suspicion that it might be damaged."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"zookeeper_path")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - Path to table data in ZooKeeper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replica_name")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - Replica name in ZooKeeper. Different replicas of the same table have different names."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replica_path")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - Path to replica data in ZooKeeper. The same as concatenating \u2018zookeeper_path/replicas/replica_path\u2019."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"columns_version")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Int32"),") - Version number of the table structure. Indicates how many times ALTER was performed. If replicas have different versions, it means some replicas haven\u2019t made all of the ALTERs yet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue_size")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),") - Size of the queue for operations waiting to be performed. Operations include inserting blocks of data, merges, and certain other actions. It usually coincides with ",(0,r.kt)("inlineCode",{parentName:"li"},"future_parts"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"inserts_in_queue")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),") - Number of inserts of blocks of data that need to be made. Insertions are usually replicated fairly quickly. If this number is large, it means something is wrong."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merges_in_queue")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),") - The number of merges waiting to be made. Sometimes merges are lengthy, so this value may be greater than zero for a long time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"part_mutations_in_queue")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt32"),") - The number of mutations waiting to be made."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue_oldest_time")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime"),") - If ",(0,r.kt)("inlineCode",{parentName:"li"},"queue_size")," greater than 0, shows when the oldest operation was added to the queue."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"inserts_oldest_time")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime"),") - See ",(0,r.kt)("inlineCode",{parentName:"li"},"queue_oldest_time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"merges_oldest_time")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime"),") - See ",(0,r.kt)("inlineCode",{parentName:"li"},"queue_oldest_time")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"part_mutations_oldest_time")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime"),") - See ",(0,r.kt)("inlineCode",{parentName:"li"},"queue_oldest_time"))),(0,r.kt)("p",null,"The next 4 columns have a non-zero value only where there is an active session with ZK."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"log_max_index")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt64"),") - Maximum entry number in the log of general activity."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"log_pointer")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt64"),") - Maximum entry number in the log of general activity that the replica copied to its execution queue, plus one. If ",(0,r.kt)("inlineCode",{parentName:"li"},"log_pointer")," is much smaller than ",(0,r.kt)("inlineCode",{parentName:"li"},"log_max_index"),", something is wrong."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"last_queue_update")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime"),") - When the queue was updated last time."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"absolute_delay")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt64"),") - How big lag in seconds the current replica has."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"total_replicas")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),") - The total number of known replicas of this table."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"active_replicas")," (",(0,r.kt)("inlineCode",{parentName:"li"},"UInt8"),") - The number of replicas of this table that have a session in ZooKeeper (i.e., the number of functioning replicas)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"last_queue_update_exception")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - When the queue contains broken entries. Especially important when ClickHouse breaks backward compatibility between versions and log entries written by newer versions aren't parseable by old versions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"zookeeper_exception")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),") - The last exception message, got if the error happened when fetching the info from ZooKeeper. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replica_is_active")," (",(0,r.kt)("a",{parentName:"li",href:"/en/sql-reference/data-types/map"},"Map(String, UInt8)"),") \u2014 Map between replica name and is replica active.")),(0,r.kt)("p",null,"If you request all the columns, the table may work a bit slowly, since several reads from ZooKeeper are made for each row.\nIf you do not request the last 4 columns (log_max_index, log_pointer, total_replicas, active_replicas), the table works quickly."),(0,r.kt)("p",null,"For example, you can check that everything is working correctly like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    database,\n    table,\n    is_leader,\n    is_readonly,\n    is_session_expired,\n    future_parts,\n    parts_to_check,\n    columns_version,\n    queue_size,\n    inserts_in_queue,\n    merges_in_queue,\n    log_max_index,\n    log_pointer,\n    total_replicas,\n    active_replicas\nFROM system.replicas\nWHERE\n       is_readonly\n    OR is_session_expired\n    OR future_parts > 20\n    OR parts_to_check > 10\n    OR queue_size > 20\n    OR inserts_in_queue > 10\n    OR log_max_index - log_pointer > 10\n    OR total_replicas < 2\n    OR active_replicas < total_replicas\n")),(0,r.kt)("p",null,"If this query does not return anything, it means that everything is fine."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/operations/system-tables/replicas"},"Original article")," "))}d.isMDXComponent=!0}}]);