[{"title":"Settings","type":0,"sectionRef":"#","url":"docs/en/operations/settings","content":"","keywords":""},{"title":"Custom Settingsâ€‹","type":1,"pageTitle":"Settings","url":"docs/en/operations/settings#custom_settings","content":"In addition to the common settings, users can define custom settings. A custom setting name must begin with one of predefined prefixes. The list of these prefixes must be declared in the custom_settings_prefixes parameter in the server configuration file. &lt;custom_settings_prefixes&gt;custom_&lt;/custom_settings_prefixes&gt;  To define a custom setting use SET command: SET custom_a = 123;  To get the current value of a custom setting use getSetting() function: SELECT getSetting('custom_a');  See Also Server Configuration Settings Original article "},{"title":"Manipulating Data Skipping Indices","type":0,"sectionRef":"#","url":"docs/en/sql-reference/statements/alter","content":"Manipulating Data Skipping Indices The following operations are available: ALTER TABLE [db].name ADD INDEX name expression TYPE type GRANULARITY value [FIRST|AFTER name] - Adds index description to tables metadata. ALTER TABLE [db].name DROP INDEX name - Removes index description from tables metadata and deletes index files from disk. ALTER TABLE [db.]table MATERIALIZE INDEX name IN PARTITION partition_name - The query rebuilds the secondary index name in the partition partition_name. Implemented as a mutation. To rebuild index over the whole data in the table you need to remove IN PARTITION from query. The first two commands are lightweight in a sense that they only change metadata or remove files. Also, they are replicated, syncing indices metadata via ZooKeeper. note Index manipulation is supported only for tables with *MergeTree engine (including replicated variants).","keywords":""}]