"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[13329],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29263:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={sidebar_position:41,sidebar_label:"url"},s="url",c={unversionedId:"en/sql-reference/table-functions/url",id:"en/sql-reference/table-functions/url",title:"url",description:"url}",source:"@site/docs/en/sql-reference/table-functions/url.md",sourceDirName:"en/sql-reference/table-functions",slug:"/en/sql-reference/table-functions/url",permalink:"/docs/staging3/docs/en/sql-reference/table-functions/url",tags:[],version:"current",sidebarPosition:41,frontMatter:{sidebar_position:41,sidebar_label:"url"},sidebar:"tutorialSidebar",previous:{title:"remote",permalink:"/docs/staging3/docs/en/sql-reference/table-functions/remote"},next:{title:"mysql",permalink:"/docs/staging3/docs/en/sql-reference/table-functions/mysql"}},p={},u=[{value:"Globs in URL {globs-in-url}",id:"globs-in-url-globs-in-url",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"url"},"url"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"url")," function creates a table from the ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," with given ",(0,i.kt)("inlineCode",{parentName:"p"},"format")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"structure"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"url")," function may be used in ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," queries on data in ",(0,i.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/special/url"},"URL")," tables."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"url(URL, format, structure)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"URL")," \u2014 HTTP or HTTPS server address, which can accept ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"POST")," requests (for ",(0,i.kt)("inlineCode",{parentName:"li"},"SELECT")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"INSERT")," queries correspondingly). Type: ",(0,i.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/data-types/string"},"String"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format")," \u2014 ",(0,i.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/interfaces/formats#formats"},"Format")," of the data. Type: ",(0,i.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/data-types/string"},"String"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"structure")," \u2014 Table structure in ",(0,i.kt)("inlineCode",{parentName:"li"},"'UserID UInt64, Name String'")," format. Determines column names and types. Type: ",(0,i.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/data-types/string"},"String"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returned value")),(0,i.kt)("p",null,"A table with the specified format and structure and with data from the defined ",(0,i.kt)("inlineCode",{parentName:"p"},"URL"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("p",null,"Getting the first 3 lines of a table that contains columns of ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/sql-reference/data-types/int-uint"},"UInt32")," type from HTTP-server which answers in ",(0,i.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/interfaces/formats#csv"},"CSV")," format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM url('http://127.0.0.1:12345/', CSV, 'column1 String, column2 UInt32') LIMIT 3;\n")),(0,i.kt)("p",null,"Inserting data from a ",(0,i.kt)("inlineCode",{parentName:"p"},"URL")," into a table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test_table (column1 String, column2 UInt32) ENGINE=Memory;\nINSERT INTO FUNCTION url('http://127.0.0.1:8123/?query=INSERT+INTO+test_table+FORMAT+CSV', 'CSV', 'column1 String, column2 UInt32') VALUES ('http interface', 42);\nSELECT * FROM test_table;\n")),(0,i.kt)("h2",{id:"globs-in-url-globs-in-url"},"Globs in URL {globs-in-url}"),(0,i.kt)("p",null,"Patterns in curly brackets ",(0,i.kt)("inlineCode",{parentName:"p"},"{ }")," are used to generate a set of shards or to specify failover addresses. Supported pattern types and examples see in the description of the ",(0,i.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/sql-reference/table-functions/remote#globs-in-addresses"},"remote")," function.\nCharacter ",(0,i.kt)("inlineCode",{parentName:"p"},"|")," inside patterns is used to specify failover addresses. They are iterated in the same order as listed in the pattern. The number of generated addresses is limited by ",(0,i.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/operations/settings/#glob_expansion_max_elements"},"glob_expansion_max_elements")," setting."))}m.isMDXComponent=!0}}]);