"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[87043],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,h=m["".concat(o,".").concat(u)]||m[u]||c[u]||l;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,s=new Array(l);s[0]=m;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},98231:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return c}});var n=a(87462),i=a(63366),l=(a(67294),a(3905)),s=["components"],r={sidebar_position:36,sidebar_label:"TABLE"},o="CREATE TABLE",p={unversionedId:"en/sql-reference/statements/create/table",id:"en/sql-reference/statements/create/table",title:"CREATE TABLE",description:"create-table-query}",source:"@site/docs/en/sql-reference/statements/create/table.md",sourceDirName:"en/sql-reference/statements/create",slug:"/en/sql-reference/statements/create/table",permalink:"/docs/staging3/docs/en/sql-reference/statements/create/table",tags:[],version:"current",sidebarPosition:36,frontMatter:{sidebar_position:36,sidebar_label:"TABLE"},sidebar:"tutorialSidebar",previous:{title:"DATABASE",permalink:"/docs/staging3/docs/en/sql-reference/statements/create/database"},next:{title:"VIEW",permalink:"/docs/staging3/docs/en/sql-reference/statements/create/view"}},d={},c=[{value:"Syntax Forms",id:"syntax-forms",level:2},{value:"With Explicit Schema",id:"with-explicit-schema",level:3},{value:"With a Schema Similar to Other Table",id:"with-a-schema-similar-to-other-table",level:3},{value:"From a Table Function",id:"from-a-table-function",level:3},{value:"From SELECT query",id:"from-select-query",level:3},{value:"NULL Or NOT NULL Modifiers",id:"null-modifiers",level:2},{value:"Default Values",id:"create-default-values",level:2},{value:"DEFAULT",id:"default",level:3},{value:"MATERIALIZED",id:"materialized",level:3},{value:"EPHEMERAL",id:"ephemeral",level:3},{value:"ALIAS",id:"alias",level:3},{value:"Primary Key",id:"primary-key",level:2},{value:"Constraints",id:"constraints",level:2},{value:"TTL Expression",id:"ttl-expression",level:2},{value:"Column Compression Codecs",id:"codecs",level:2},{value:"General Purpose Codecs",id:"create-query-general-purpose-codecs",level:3},{value:"Specialized Codecs",id:"specialized-codecs",level:3},{value:"Encryption Codecs",id:"create-query-encryption-codecs",level:3},{value:"Temporary Tables",id:"temporary-tables",level:2},{value:"REPLACE TABLE",id:"replace-table-query",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Examples:",id:"examples",level:3},{value:"COMMENT Clause",id:"comment-table",level:2}],m={toc:c};function u(e){var t=e.components,a=(0,i.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"create-table-query"},"CREATE TABLE"),(0,l.kt)("p",null,"Creates a new table. This query can have various syntax forms depending on a use case."),(0,l.kt)("p",null,"By default, tables are created only on the current server. Distributed DDL queries are implemented as ",(0,l.kt)("inlineCode",{parentName:"p"},"ON CLUSTER")," clause, which is ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/sql-reference/distributed-ddl"},"described separately"),"."),(0,l.kt)("h2",{id:"syntax-forms"},"Syntax Forms"),(0,l.kt)("h3",{id:"with-explicit-schema"},"With Explicit Schema"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [NULL|NOT NULL] [DEFAULT|MATERIALIZED|EPHEMERAL|ALIAS expr1] [compression_codec] [TTL expr1],\n    name2 [type2] [NULL|NOT NULL] [DEFAULT|MATERIALIZED|EPHEMERAL|ALIAS expr2] [compression_codec] [TTL expr2],\n    ...\n) ENGINE = engine\n")),(0,l.kt)("p",null,"Creates a table named ",(0,l.kt)("inlineCode",{parentName:"p"},"table_name")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"db")," database or the current database if ",(0,l.kt)("inlineCode",{parentName:"p"},"db")," is not set, with the structure specified in brackets and the ",(0,l.kt)("inlineCode",{parentName:"p"},"engine")," engine.\nThe structure of the table is a list of column descriptions, secondary indexes and constraints . If ",(0,l.kt)("a",{parentName:"p",href:"#primary-key"},"primary key")," is supported by the engine, it will be indicated as parameter for the table engine."),(0,l.kt)("p",null,"A column description is ",(0,l.kt)("inlineCode",{parentName:"p"},"name type")," in the simplest case. Example: ",(0,l.kt)("inlineCode",{parentName:"p"},"RegionID UInt32"),"."),(0,l.kt)("p",null,"Expressions can also be defined for default values (see below)."),(0,l.kt)("p",null,"If necessary, primary key can be specified, with one or more key expressions."),(0,l.kt)("h3",{id:"with-a-schema-similar-to-other-table"},"With a Schema Similar to Other Table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name AS [db2.]name2 [ENGINE = engine]\n")),(0,l.kt)("p",null,"Creates a table with the same structure as another table. You can specify a different engine for the table. If the engine is not specified, the same engine will be used as for the ",(0,l.kt)("inlineCode",{parentName:"p"},"db2.name2")," table."),(0,l.kt)("h3",{id:"from-a-table-function"},"From a Table Function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name AS table_function()\n")),(0,l.kt)("p",null,"Creates a table with the same result as that of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/sql-reference/table-functions/#table-functions"},"table function")," specified. The created table will also work in the same way as the corresponding table function that was specified."),(0,l.kt)("h3",{id:"from-select-query"},"From SELECT query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name[(name1 [type1], name2 [type2], ...)] ENGINE = engine AS SELECT ...\n")),(0,l.kt)("p",null,"Creates a table with a structure like the result of the ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," query, with the ",(0,l.kt)("inlineCode",{parentName:"p"},"engine")," engine, and fills it with data from ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT"),". Also you can explicitly specify columns description."),(0,l.kt)("p",null,"If the table already exists and ",(0,l.kt)("inlineCode",{parentName:"p"},"IF NOT EXISTS")," is specified, the query won\u2019t do anything."),(0,l.kt)("p",null,"There can be other clauses after the ",(0,l.kt)("inlineCode",{parentName:"p"},"ENGINE")," clause in the query. See detailed documentation on how to create tables in the descriptions of ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/#table_engines"},"table engines"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE t1 (x String) ENGINE = Memory AS SELECT 1;\nSELECT x, toTypeName(x) FROM t1;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500x\u2500\u252c\u2500toTypeName(x)\u2500\u2510\n\u2502 1 \u2502 String        \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"null-modifiers"},"NULL Or NOT NULL Modifiers"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT NULL")," modifiers after data type in column definition allow or do not allow it to be ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/sql-reference/data-types/nullable#data_type-nullable"},"Nullable"),"."),(0,l.kt)("p",null,"If the type is not ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," and if ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," is specified, it will be treated as ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable"),"; if ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT NULL")," is specified, then no. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"INT NULL")," is the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable(INT)"),". If the type is ",(0,l.kt)("inlineCode",{parentName:"p"},"Nullable")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT NULL")," modifiers are specified, the exception will be thrown."),(0,l.kt)("p",null,"See also ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/operations/settings/#data_type_default_nullable"},"data_type_default_nullable")," setting."),(0,l.kt)("h2",{id:"create-default-values"},"Default Values"),(0,l.kt)("p",null,"The column description can specify an expression for a default value, in one of the following ways: ",(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT expr"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"MATERIALIZED expr"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ALIAS expr"),"."),(0,l.kt)("p",null,"Example: ",(0,l.kt)("inlineCode",{parentName:"p"},"URLDomain String DEFAULT domain(URL)"),"."),(0,l.kt)("p",null,"If an expression for the default value is not defined, the default values will be set to zeros for numbers, empty strings for strings, empty arrays for arrays, and ",(0,l.kt)("inlineCode",{parentName:"p"},"1970-01-01")," for dates or zero unix timestamp for DateTime, NULL for Nullable."),(0,l.kt)("p",null,"If the default expression is defined, the column type is optional. If there isn\u2019t an explicitly defined type, the default expression type is used. Example: ",(0,l.kt)("inlineCode",{parentName:"p"},"EventDate DEFAULT toDate(EventTime)")," \u2013 the \u2018Date\u2019 type will be used for the \u2018EventDate\u2019 column."),(0,l.kt)("p",null,"If the data type and default expression are defined explicitly, this expression will be cast to the specified type using type casting functions. Example: ",(0,l.kt)("inlineCode",{parentName:"p"},"Hits UInt32 DEFAULT 0")," means the same thing as ",(0,l.kt)("inlineCode",{parentName:"p"},"Hits UInt32 DEFAULT toUInt32(0)"),"."),(0,l.kt)("p",null,"Default expressions may be defined as an arbitrary expression from table constants and columns. When creating and changing the table structure, it checks that expressions do not contain loops. For INSERT, it checks that expressions are resolvable \u2013 that all columns they can be calculated from have been passed."),(0,l.kt)("h3",{id:"default"},"DEFAULT"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"DEFAULT expr")),(0,l.kt)("p",null,"Normal default value. If the INSERT query does not specify the corresponding column, it will be filled in by computing the corresponding expression."),(0,l.kt)("h3",{id:"materialized"},"MATERIALIZED"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MATERIALIZED expr")),(0,l.kt)("p",null,"Materialized expression. Such a column can\u2019t be specified for INSERT, because it is always calculated.\nFor an INSERT without a list of columns, these columns are not considered.\nIn addition, this column is not substituted when using an asterisk in a SELECT query. This is to preserve the invariant that the dump obtained using ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT *")," can be inserted back into the table using INSERT without specifying the list of columns."),(0,l.kt)("h3",{id:"ephemeral"},"EPHEMERAL"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"EPHEMERAL [expr]")),(0,l.kt)("p",null,"Ephemeral column. Such a column isn't stored in the table and cannot be SELECTed, but can be referenced in the defaults of CREATE statement. If ",(0,l.kt)("inlineCode",{parentName:"p"},"expr")," is omitted type for column is required.\nINSERT without list of columns will skip such column, so SELECT/INSERT invariant is preserved -  the dump obtained using ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT *")," can be inserted back into the table using INSERT without specifying the list of columns."),(0,l.kt)("h3",{id:"alias"},"ALIAS"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ALIAS expr")),(0,l.kt)("p",null,"Synonym. Such a column isn\u2019t stored in the table at all.\nIts values can\u2019t be inserted in a table, and it is not substituted when using an asterisk in a SELECT query.\nIt can be used in SELECTs if the alias is expanded during query parsing."),(0,l.kt)("p",null,"When using the ALTER query to add new columns, old data for these columns is not written. Instead, when reading old data that does not have values for the new columns, expressions are computed on the fly by default. However, if running the expressions requires different columns that are not indicated in the query, these columns will additionally be read, but only for the blocks of data that need it."),(0,l.kt)("p",null,"If you add a new column to a table but later change its default expression, the values used for old data will change (for data where values were not stored on the disk). Note that when running background merges, data for columns that are missing in one of the merging parts is written to the merged part."),(0,l.kt)("p",null,"It is not possible to set default values for elements in nested data structures."),(0,l.kt)("h2",{id:"primary-key"},"Primary Key"),(0,l.kt)("p",null,"You can define a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/mergetree-family/mergetree#primary-keys-and-indexes-in-queries"},"primary key")," when creating a table. Primary key can be specified in two ways:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Inside the column list")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...,\n    PRIMARY KEY(expr1[, expr2,...])]\n)\nENGINE = engine;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Outside the column list")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...\n)\nENGINE = engine\nPRIMARY KEY(expr1[, expr2,...]);\n")),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can't combine both ways in one query."))),(0,l.kt)("h2",{id:"constraints"},"Constraints"),(0,l.kt)("p",null,"Along with columns descriptions constraints could be defined:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [compression_codec] [TTL expr1],\n    ...\n    CONSTRAINT constraint_name_1 CHECK boolean_expr_1,\n    ...\n) ENGINE = engine\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean_expr_1")," could by any boolean expression. If constraints are defined for the table, each of them will be checked for every row in ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," query. If any constraint is not satisfied \u2014 server will raise an exception with constraint name and checking expression."),(0,l.kt)("p",null,"Adding large amount of constraints can negatively affect performance of big ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT")," queries."),(0,l.kt)("h2",{id:"ttl-expression"},"TTL Expression"),(0,l.kt)("p",null,"Defines storage time for values. Can be specified only for MergeTree-family tables. For the detailed description, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-ttl"},"TTL for columns and tables"),"."),(0,l.kt)("h2",{id:"codecs"},"Column Compression Codecs"),(0,l.kt)("p",null,"By default, ClickHouse applies the ",(0,l.kt)("inlineCode",{parentName:"p"},"lz4")," compression method. For ",(0,l.kt)("inlineCode",{parentName:"p"},"MergeTree"),"-engine family you can change the default compression method in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/operations/server-configuration-parameters/settings#server-settings-compression"},"compression")," section of a server configuration."),(0,l.kt)("p",null,"You can also define the compression method for each individual column in the ",(0,l.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," query."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE codec_example\n(\n    dt Date CODEC(ZSTD),\n    ts DateTime CODEC(LZ4HC),\n    float_value Float32 CODEC(NONE),\n    double_value Float64 CODEC(LZ4HC(9)),\n    value Float32 CODEC(Delta, ZSTD)\n)\nENGINE = <Engine>\n...\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Default")," codec can be specified to reference default compression which may depend on different settings (and properties of data) in runtime.\nExample: ",(0,l.kt)("inlineCode",{parentName:"p"},"value UInt64 CODEC(Default)")," \u2014 the same as lack of codec specification."),(0,l.kt)("p",null,"Also you can remove current CODEC from the column and use default compression from config.xml:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE codec_example MODIFY COLUMN float_value CODEC(Default);\n")),(0,l.kt)("p",null,"Codecs can be combined in a pipeline, for example, ",(0,l.kt)("inlineCode",{parentName:"p"},"CODEC(Delta, Default)"),"."),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can\u2019t decompress ClickHouse database files with external utilities like ",(0,l.kt)("inlineCode",{parentName:"p"},"lz4"),". Instead, use the special ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ClickHouse/ClickHouse/tree/master/programs/compressor"},"clickhouse-compressor")," utility."))),(0,l.kt)("p",null,"Compression is supported for the following table engines:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/engines/table-engines/mergetree-family/mergetree"},"MergeTree")," family. Supports column compression codecs and selecting the default compression method by ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/operations/server-configuration-parameters/settings#server-settings-compression"},"compression")," settings."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/engines/table-engines/log-family/"},"Log")," family. Uses the ",(0,l.kt)("inlineCode",{parentName:"li"},"lz4")," compression method by default and supports column compression codecs."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/engines/table-engines/special/set"},"Set"),". Only supported the default compression."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/engines/table-engines/special/join"},"Join"),". Only supported the default compression.")),(0,l.kt)("p",null,"ClickHouse supports general purpose codecs and specialized codecs."),(0,l.kt)("h3",{id:"create-query-general-purpose-codecs"},"General Purpose Codecs"),(0,l.kt)("p",null,"Codecs:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NONE")," \u2014 No compression."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LZ4")," \u2014 Lossless ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/lz4/lz4"},"data compression algorithm")," used by default. Applies LZ4 fast compression."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LZ4HC[(level)]")," \u2014 LZ4 HC (high compression) algorithm with configurable level. Default level: 9. Setting ",(0,l.kt)("inlineCode",{parentName:"li"},"level <= 0")," applies the default level. Possible levels: ","[","1, 12","]",". Recommended level range: ","[","4, 9","]","."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ZSTD[(level)]")," \u2014 ",(0,l.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Zstandard"},"ZSTD compression algorithm")," with configurable ",(0,l.kt)("inlineCode",{parentName:"li"},"level"),". Possible levels: ","[","1, 22","]",". Default value: 1.")),(0,l.kt)("p",null,"High compression levels are useful for asymmetric scenarios, like compress once, decompress repeatedly. Higher levels mean better compression and higher CPU usage."),(0,l.kt)("h3",{id:"specialized-codecs"},"Specialized Codecs"),(0,l.kt)("p",null,"These codecs are designed to make compression more effective by using specific features of data. Some of these codecs do not compress data themself. Instead, they prepare the data for a common purpose codec, which compresses it better than without this preparation."),(0,l.kt)("p",null,"Specialized codecs:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Delta(delta_bytes)")," \u2014 Compression approach in which raw values are replaced by the difference of two neighboring values, except for the first value that stays unchanged. Up to ",(0,l.kt)("inlineCode",{parentName:"li"},"delta_bytes")," are used for storing delta values, so ",(0,l.kt)("inlineCode",{parentName:"li"},"delta_bytes")," is the maximum size of raw values. Possible ",(0,l.kt)("inlineCode",{parentName:"li"},"delta_bytes")," values: 1, 2, 4, 8. The default value for ",(0,l.kt)("inlineCode",{parentName:"li"},"delta_bytes")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"sizeof(type)")," if equal to 1, 2, 4, or 8. In all other cases, it\u2019s 1."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DoubleDelta")," \u2014 Calculates delta of deltas and writes it in compact binary form. Optimal compression rates are achieved for monotonic sequences with a constant stride, such as time series data. Can be used with any fixed-width type. Implements the algorithm used in Gorilla TSDB, extending it to support 64-bit types. Uses 1 extra bit for 32-byte deltas: 5-bit prefixes instead of 4-bit prefixes. For additional information, see Compressing Time Stamps in ",(0,l.kt)("a",{parentName:"li",href:"http://www.vldb.org/pvldb/vol8/p1816-teller.pdf"},"Gorilla: A Fast, Scalable, In-Memory Time Series Database"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Gorilla")," \u2014 Calculates XOR between current and previous value and writes it in compact binary form. Efficient when storing a series of floating point values that change slowly, because the best compression rate is achieved when neighboring values are binary equal. Implements the algorithm used in Gorilla TSDB, extending it to support 64-bit types. For additional information, see Compressing Values in ",(0,l.kt)("a",{parentName:"li",href:"http://www.vldb.org/pvldb/vol8/p1816-teller.pdf"},"Gorilla: A Fast, Scalable, In-Memory Time Series Database"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"T64")," \u2014 Compression approach that crops unused high bits of values in integer data types (including ",(0,l.kt)("inlineCode",{parentName:"li"},"Enum"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Date")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"DateTime"),"). At each step of its algorithm, codec takes a block of 64 values, puts them into 64x64 bit matrix, transposes it, crops the unused bits of values and returns the rest as a sequence. Unused bits are the bits, that do not differ between maximum and minimum values in the whole data part for which the compression is used.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"DoubleDelta")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Gorilla")," codecs are used in Gorilla TSDB as the components of its compressing algorithm. Gorilla approach is effective in scenarios when there is a sequence of slowly changing values with their timestamps. Timestamps are effectively compressed by the ",(0,l.kt)("inlineCode",{parentName:"p"},"DoubleDelta")," codec, and values are effectively compressed by the ",(0,l.kt)("inlineCode",{parentName:"p"},"Gorilla")," codec. For example, to get an effectively stored table, you can create it in the following configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE codec_example\n(\n    timestamp DateTime CODEC(DoubleDelta),\n    slow_values Float32 CODEC(Gorilla)\n)\nENGINE = MergeTree()\n")),(0,l.kt)("h3",{id:"create-query-encryption-codecs"},"Encryption Codecs"),(0,l.kt)("p",null,"These codecs don't actually compress data, but instead encrypt data on disk. These are only available when an encryption key is specified by ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/operations/server-configuration-parameters/settings#server-settings-encryption"},"encryption")," settings. Note that encryption only makes sense at the end of codec pipelines, because encrypted data usually can't be compressed in any meaningful way."),(0,l.kt)("p",null,"Encryption codecs:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"CODEC('AES-128-GCM-SIV')")," \u2014 Encrypts data with AES-128 in ",(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc8452"},"RFC 8452")," GCM-SIV mode. ")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"CODEC('AES-256-GCM-SIV')")," \u2014 Encrypts data with AES-256 in GCM-SIV mode. "))),(0,l.kt)("p",null,"These codecs use a fixed nonce and encryption is therefore deterministic. This makes it compatible with deduplicating engines such as ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/mergetree-family/replication"},"ReplicatedMergeTree")," but has a weakness: when the same data block is encrypted twice, the resulting ciphertext will be exactly the same so an adversary who can read the disk can see this equivalence (although only the equivalence, without getting its content)."),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},'Most engines including the "*MergeTree" family create index files on disk without applying codecs. This means plaintext will appear on disk if an encrypted column is indexed.'))),(0,l.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If you perform a SELECT query mentioning a specific value in an encrypted column (such as in its WHERE clause), the value may appear in ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/operations/system-tables/query_log"},"system.query_log"),". You may want to disable the logging."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE mytable \n(\n    x String Codec(AES_128_GCM_SIV)\n) \nENGINE = MergeTree ORDER BY x;\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If compression needs to be applied, it must be explicitly specified. Otherwise, only encryption will be applied to data."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE mytable \n(\n    x String Codec(Delta, LZ4, AES_128_GCM_SIV)\n) \nENGINE = MergeTree ORDER BY x;\n")),(0,l.kt)("h2",{id:"temporary-tables"},"Temporary Tables"),(0,l.kt)("p",null,"ClickHouse supports temporary tables which have the following characteristics:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Temporary tables disappear when the session ends, including if the connection is lost."),(0,l.kt)("li",{parentName:"ul"},"A temporary table uses the Memory engine only."),(0,l.kt)("li",{parentName:"ul"},"The DB can\u2019t be specified for a temporary table. It is created outside of databases."),(0,l.kt)("li",{parentName:"ul"},"Impossible to create a temporary table with distributed DDL query on all cluster servers (by using ",(0,l.kt)("inlineCode",{parentName:"li"},"ON CLUSTER"),"): this table exists only in the current session."),(0,l.kt)("li",{parentName:"ul"},"If a temporary table has the same name as another one and a query specifies the table name without specifying the DB, the temporary table will be used."),(0,l.kt)("li",{parentName:"ul"},"For distributed query processing, temporary tables used in a query are passed to remote servers.")),(0,l.kt)("p",null,"To create a temporary table, use the following syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TEMPORARY TABLE [IF NOT EXISTS] table_name\n(\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1],\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2],\n    ...\n)\n")),(0,l.kt)("p",null,"In most cases, temporary tables are not created manually, but when using external data for a query, or for distributed ",(0,l.kt)("inlineCode",{parentName:"p"},"(GLOBAL) IN"),". For more information, see the appropriate sections"),(0,l.kt)("p",null,"It\u2019s possible to use tables with ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/special/memory"},"ENGINE = Memory")," instead of temporary tables."),(0,l.kt)("h2",{id:"replace-table-query"},"REPLACE TABLE"),(0,l.kt)("p",null,"'REPLACE' query allows you to update the table atomically."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"This query is supported only for ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/database-engines/atomic"},"Atomic")," database engine."))),(0,l.kt)("p",null,"If you need to delete some data from a table, you can create a new table and fill it with a ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," statement that does not retrieve unwanted data, then drop the old table and rename the new one:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE myNewTable AS myOldTable;\nINSERT INTO myNewTable SELECT * FROM myOldTable WHERE CounterID <12345;\nDROP TABLE myOldTable;\nRENAME TABLE myNewTable TO myOldTable;\n")),(0,l.kt)("p",null,"Instead of above, you can use the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"REPLACE TABLE myOldTable SELECT * FROM myOldTable WHERE CounterID <12345;\n")),(0,l.kt)("h3",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"{CREATE [OR REPLACE] | REPLACE} TABLE [db.]table_name\n")),(0,l.kt)("p",null,"All syntax forms for ",(0,l.kt)("inlineCode",{parentName:"p"},"CREATE")," query also work for this query. ",(0,l.kt)("inlineCode",{parentName:"p"},"REPLACE")," for a non-existent table will cause an error."),(0,l.kt)("h3",{id:"examples"},"Examples:"),(0,l.kt)("p",null,"Consider the table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE base ENGINE = Atomic;\nCREATE OR REPLACE TABLE base.t1 (n UInt64, s String) ENGINE = MergeTree ORDER BY n;\nINSERT INTO base.t1 VALUES (1, 'test');\nSELECT * FROM base.t1;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500n\u2500\u252c\u2500s\u2500\u2500\u2500\u2500\u2510\n\u2502 1 \u2502 test \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Using ",(0,l.kt)("inlineCode",{parentName:"p"},"REPLACE")," query to clear all data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE OR REPLACE TABLE base.t1 (n UInt64, s Nullable(String)) ENGINE = MergeTree ORDER BY n;\nINSERT INTO base.t1 VALUES (2, null);\nSELECT * FROM base.t1;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500n\u2500\u252c\u2500s\u2500\u2500\u2510\n\u2502 2 \u2502 \\N \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Using ",(0,l.kt)("inlineCode",{parentName:"p"},"REPLACE")," query to change table structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"REPLACE TABLE base.t1 (n UInt64) ENGINE = MergeTree ORDER BY n;\nINSERT INTO base.t1 VALUES (3);\nSELECT * FROM base.t1;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500n\u2500\u2510\n\u2502 3 \u2502\n\u2514\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"comment-table"},"COMMENT Clause"),(0,l.kt)("p",null,"You can add a comment to the table when you creating it."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The comment is supported for all table engines except ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/integrations/kafka"},"Kafka"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/integrations/rabbitmq"},"RabbitMQ")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/engines/table-engines/integrations/embedded-rocksdb"},"EmbeddedRocksDB"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE db.table_name\n(\n    name1 type1, name2 type2, ...\n)\nENGINE = engine\nCOMMENT 'Comment'\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE t1 (x String) ENGINE = Memory COMMENT 'The temporary table';\nSELECT name, comment FROM system.tables WHERE name = 't1';\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500name\u2500\u252c\u2500comment\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 t1   \u2502 The temporary table \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}u.isMDXComponent=!0}}]);