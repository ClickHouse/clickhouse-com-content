"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[10669],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=s(n),g=r,m=f["".concat(u,".").concat(g)]||f[g]||p[g]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=f;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},13983:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],o={sidebar_position:209},u="quantileBFloat16",s={unversionedId:"en/sql-reference/aggregate-functions/reference/quantilebfloat16",id:"en/sql-reference/aggregate-functions/reference/quantilebfloat16",title:"quantileBFloat16",description:"quantilebfloat16}",source:"@site/docs/en/sql-reference/aggregate-functions/reference/quantilebfloat16.md",sourceDirName:"en/sql-reference/aggregate-functions/reference",slug:"/en/sql-reference/aggregate-functions/reference/quantilebfloat16",permalink:"/docs/staging3/docs/en/sql-reference/aggregate-functions/reference/quantilebfloat16",tags:[],version:"current",sidebarPosition:209,frontMatter:{sidebar_position:209},sidebar:"tutorialSidebar",previous:{title:"quantileTDigestWeighted",permalink:"/docs/staging3/docs/en/sql-reference/aggregate-functions/reference/quantiletdigestweighted"},next:{title:"median",permalink:"/docs/staging3/docs/en/sql-reference/aggregate-functions/reference/median"}},c={},p=[],f={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"quantilebfloat16"},"quantileBFloat16"),(0,l.kt)("p",null,"Computes an approximate ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Quantile"},"quantile")," of a sample consisting of ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bfloat16_floating-point_format"},"bfloat16")," numbers. ",(0,l.kt)("inlineCode",{parentName:"p"},"bfloat16")," is a floating-point data type with 1 sign bit, 8 exponent bits and 7 fraction bits.\nThe function converts input values to 32-bit floats and takes the most significant 16 bits. Then it calculates ",(0,l.kt)("inlineCode",{parentName:"p"},"bfloat16")," quantile value and converts the result to a 64-bit float by appending zero bits.\nThe function is a fast quantile estimator with a relative error no more than 0.390625%."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"quantileBFloat16[(level)](expr)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"medianBFloat16")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Column with numeric data. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/data-types/int-uint"},"Integer"),", ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"level")," \u2014 Level of quantile. Optional. Possible values are in the range from 0 to 1. Default value: 0.5. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/data-types/float"},"Float"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Approximate quantile of the specified level.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging3/docs/en/sql-reference/data-types/float#float32-float64"},"Float64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Input table has an integer and a float columns:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500a\u2500\u252c\u2500\u2500\u2500\u2500\u2500b\u2500\u2510\n\u2502 1 \u2502 1.001 \u2502\n\u2502 2 \u2502 1.002 \u2502\n\u2502 3 \u2502 1.003 \u2502\n\u2502 4 \u2502 1.004 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query to calculate 0.75-quantile (third quartile):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT quantileBFloat16(0.75)(a), quantileBFloat16(0.75)(b) FROM example_table;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500quantileBFloat16(0.75)(a)\u2500\u252c\u2500quantileBFloat16(0.75)(b)\u2500\u2510\n\u2502                         3 \u2502                         1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that all floating point values in the example are truncated to 1.0 when converting to ",(0,l.kt)("inlineCode",{parentName:"p"},"bfloat16"),"."),(0,l.kt)("h1",{id:"quantilebfloat16weighted"},"quantileBFloat16Weighted"),(0,l.kt)("p",null,"Like ",(0,l.kt)("inlineCode",{parentName:"p"},"quantileBFloat16")," but takes into account the weight of each sequence member."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/aggregate-functions/reference/median#median"},"median")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/staging3/docs/en/sql-reference/aggregate-functions/reference/quantiles#quantiles"},"quantiles"))))}g.isMDXComponent=!0}}]);