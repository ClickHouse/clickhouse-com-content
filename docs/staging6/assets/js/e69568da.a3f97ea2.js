"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[11670],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=a.createContext({}),o=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=o(n),c=l,k=d["".concat(u,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(k,s(s({ref:t},p),{},{components:n})):a.createElement(k,s({ref:t},p))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var o=2;o<r;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},42136:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return c},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),s=["components"],i={sidebar_position:67,sidebar_label:"Other"},u="Other Functions",o={unversionedId:"en/sql-reference/functions/other-functions",id:"en/sql-reference/functions/other-functions",title:"Other Functions",description:"other-functions}",source:"@site/docs/en/sql-reference/functions/other-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/other-functions",permalink:"/docs/staging6/docs/en/sql-reference/functions/other-functions",tags:[],version:"current",sidebarPosition:67,frontMatter:{sidebar_position:67,sidebar_label:"Other"},sidebar:"tutorialSidebar",previous:{title:"NLP",permalink:"/docs/staging6/docs/en/sql-reference/functions/nlp-functions"},next:{title:"Time Window",permalink:"/docs/staging6/docs/en/sql-reference/functions/time-window-functions"}},p={},m=[{value:"hostName()",id:"hostname",level:2},{value:"getMacro",id:"getmacro",level:2},{value:"FQDN",id:"fqdn",level:2},{value:"basename",id:"basename",level:2},{value:"visibleWidth(x)",id:"visiblewidthx",level:2},{value:"toTypeName(x)",id:"totypenamex",level:2},{value:"blockSize()",id:"function-blocksize",level:2},{value:"byteSize",id:"function-bytesize",level:2},{value:"materialize(x)",id:"materializex",level:2},{value:"ignore(\u2026)",id:"ignore",level:2},{value:"sleep(seconds)",id:"sleepseconds",level:2},{value:"sleepEachRow(seconds)",id:"sleepeachrowseconds",level:2},{value:"currentDatabase()",id:"currentdatabase",level:2},{value:"currentUser()",id:"other-function-currentuser",level:2},{value:"isConstant",id:"is-constant",level:2},{value:"isFinite(x)",id:"isfinitex",level:2},{value:"isInfinite(x)",id:"isinfinitex",level:2},{value:"ifNotFinite",id:"ifnotfinite",level:2},{value:"isNaN(x)",id:"isnanx",level:2},{value:"hasColumnInTable([\u2018hostname\u2019[, \u2018username\u2019[, \u2018password\u2019]],] \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)",id:"hascolumnintablehostname-username-password-database-table-column",level:2},{value:"bar",id:"function-bar",level:2},{value:"transform",id:"transform",level:2},{value:"transform(x, array_from, array_to, default)",id:"transformx-array-from-array-to-default",level:3},{value:"transform(x, array_from, array_to)",id:"transformx-array-from-array-to",level:3},{value:"formatReadableSize(x)",id:"formatreadablesizex",level:2},{value:"formatReadableQuantity(x)",id:"formatreadablequantityx",level:2},{value:"formatReadableTimeDelta",id:"formatreadabletimedelta",level:2},{value:"least(a, b)",id:"leasta-b",level:2},{value:"greatest(a, b)",id:"greatesta-b",level:2},{value:"uptime()",id:"uptime",level:2},{value:"version()",id:"version",level:2},{value:"buildId()",id:"buildid",level:2},{value:"blockNumber",id:"blocknumber",level:2},{value:"rowNumberInBlock",id:"function-rownumberinblock",level:2},{value:"rowNumberInAllBlocks()",id:"rownumberinallblocks",level:2},{value:"neighbor",id:"neighbor",level:2},{value:"runningDifference(x)",id:"other_functions-runningdifference",level:2},{value:"runningDifferenceStartingWithFirstValue",id:"runningdifferencestartingwithfirstvalue",level:2},{value:"runningConcurrency",id:"runningconcurrency",level:2},{value:"MACNumToString(num)",id:"macnumtostringnum",level:2},{value:"MACStringToNum(s)",id:"macstringtonums",level:2},{value:"MACStringToOUI(s)",id:"macstringtoouis",level:2},{value:"getSizeOfEnumType",id:"getsizeofenumtype",level:2},{value:"blockSerializedSize",id:"blockserializedsize",level:2},{value:"toColumnTypeName",id:"tocolumntypename",level:2},{value:"dumpColumnStructure",id:"dumpcolumnstructure",level:2},{value:"defaultValueOfArgumentType",id:"defaultvalueofargumenttype",level:2},{value:"defaultValueOfTypeName",id:"defaultvalueoftypename",level:2},{value:"indexHint",id:"indexhint",level:2},{value:"replicate",id:"other-functions-replicate",level:2},{value:"filesystemAvailable",id:"filesystemavailable",level:2},{value:"filesystemFree",id:"filesystemfree",level:2},{value:"filesystemCapacity",id:"filesystemcapacity",level:2},{value:"initializeAggregation",id:"initializeaggregation",level:2},{value:"finalizeAggregation",id:"function-finalizeaggregation",level:2},{value:"runningAccumulate",id:"runningaccumulate",level:2},{value:"joinGet",id:"joinget",level:2},{value:"modelEvaluate(model_name, \u2026)",id:"function-modelevaluate",level:2},{value:"throwIf(x[, custom_message])",id:"throwifx-custom-message",level:2},{value:"identity",id:"identity",level:2},{value:"randomPrintableASCII",id:"randomascii",level:2},{value:"randomString",id:"randomstring",level:2},{value:"randomFixedString",id:"randomfixedstring",level:2},{value:"randomStringUTF8",id:"randomstringutf8",level:2},{value:"getSetting",id:"getSetting",level:2},{value:"isDecimalOverflow",id:"is-decimal-overflow",level:2},{value:"countDigits",id:"count-digits",level:2},{value:"errorCodeToName",id:"error-code-to-name",level:2},{value:"tcpPort",id:"tcpPort",level:2},{value:"currentProfiles",id:"current-profiles",level:2},{value:"enabledProfiles",id:"enabled-profiles",level:2},{value:"defaultProfiles",id:"default-profiles",level:2},{value:"currentRoles",id:"current-roles",level:2},{value:"enabledRoles",id:"enabled-roles",level:2},{value:"defaultRoles",id:"default-roles",level:2},{value:"getServerPort",id:"getserverport",level:2},{value:"queryID",id:"query-id",level:2},{value:"initialQueryID",id:"initial-query-id",level:2},{value:"shardNum",id:"shard-num",level:2},{value:"shardCount",id:"shard-count",level:2},{value:"getOSKernelVersion",id:"getoskernelversion",level:2},{value:"zookeeperSessionUptime",id:"zookeepersessionuptime",level:2}],d={toc:m};function c(e){var t=e.components,n=(0,l.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"other-functions"},"Other Functions"),(0,r.kt)("h2",{id:"hostname"},"hostName()"),(0,r.kt)("p",null,"Returns a string with the name of the host that this function was performed on. For distributed processing, this is the name of the remote server host, if the function is performed on a remote server.\nIf it is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise it produces a constant value."),(0,r.kt)("h2",{id:"getmacro"},"getMacro"),(0,r.kt)("p",null,"Gets a named value from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/server-configuration-parameters/settings#macros"},"macros")," section of the server configuration."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"getMacro(name);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," \u2014 Name to retrieve from the ",(0,r.kt)("inlineCode",{parentName:"li"},"macros")," section. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/string#string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Value of the specified macro.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"The example ",(0,r.kt)("inlineCode",{parentName:"p"},"macros")," section in the server configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<macros>\n    <test>Value</test>\n</macros>\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT getMacro('test');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500getMacro('test')\u2500\u2510\n\u2502 Value            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"An alternative way to get the same value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM system.macros\nWHERE macro = 'test';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500macro\u2500\u252c\u2500substitution\u2500\u2510\n\u2502 test  \u2502 Value        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"fqdn"},"FQDN"),(0,r.kt)("p",null,"Returns the fully qualified domain name."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"fqdn();\n")),(0,r.kt)("p",null,"This function is case-insensitive."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String with the fully qualified domain name.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT FQDN();\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500FQDN()\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 clickhouse.ru-central1.internal \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"basename"},"basename"),(0,r.kt)("p",null,"Extracts the trailing part of a string after the last slash or backslash. This function if often used to extract the filename from a path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"basename( expr )\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr")," \u2014 Expression resulting in a ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String")," type value. All the backslashes must be escaped in the resulting value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned Value")),(0,r.kt)("p",null,"A string that contains:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The trailing part of a string after the last slash or backslash."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"If the input string contains a path ending with slash or backslash, for example, `/` or `c:\\`, the function returns an empty string.\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The original string if there are no slashes or backslashes."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 'some/long/path/to/file' AS a, basename(a)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500basename('some\\\\long\\\\path\\\\to\\\\file')\u2500\u2510\n\u2502 some\\long\\path\\to\\file \u2502 file                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 'some\\\\long\\\\path\\\\to\\\\file' AS a, basename(a)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500basename('some\\\\long\\\\path\\\\to\\\\file')\u2500\u2510\n\u2502 some\\long\\path\\to\\file \u2502 file                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT 'some-file-name' AS a, basename(a)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500basename('some-file-name')\u2500\u2510\n\u2502 some-file-name \u2502 some-file-name             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"visiblewidthx"},"visibleWidth(x)"),(0,r.kt)("p",null,"Calculates the approximate width when outputting values to the console in text format (tab-separated).\nThis function is used by the system for implementing Pretty formats."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," is represented as a string corresponding to ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Pretty")," formats."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibleWidth(NULL)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500visibleWidth(NULL)\u2500\u2510\n\u2502                  4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"totypenamex"},"toTypeName(x)"),(0,r.kt)("p",null,"Returns a string containing the type name of the passed argument."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," is passed to the function as input, then it returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"Nullable(Nothing)")," type, which corresponds to an internal ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," representation in ClickHouse."),(0,r.kt)("h2",{id:"function-blocksize"},"blockSize()"),(0,r.kt)("p",null,"Gets the size of the block.\nIn ClickHouse, queries are always run on blocks (sets of column parts). This function allows getting the size of the block that you called it for."),(0,r.kt)("h2",{id:"function-bytesize"},"byteSize"),(0,r.kt)("p",null,"Returns estimation of uncompressed byte size of its arguments in memory."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"byteSize(argument [, ...])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"argument")," \u2014 Value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Estimation of byte size of the arguments in memory.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"For ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String")," arguments the funtion returns the string length + 9 (terminating zero + length)."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT byteSize('string');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500byteSize('string')\u2500\u2510\n\u2502                 15 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE test\n(\n    `key` Int32,\n    `u8` UInt8,\n    `u16` UInt16,\n    `u32` UInt32,\n    `u64` UInt64,\n    `i8` Int8,\n    `i16` Int16,\n    `i32` Int32,\n    `i64` Int64,\n    `f32` Float32,\n    `f64` Float64\n)\nENGINE = MergeTree\nORDER BY key;\n\nINSERT INTO test VALUES(1, 8, 16, 32, 64,  -8, -16, -32, -64, 32.32, 64.64);\n\nSELECT key, byteSize(u8) AS `byteSize(UInt8)`, byteSize(u16) AS `byteSize(UInt16)`, byteSize(u32) AS `byteSize(UInt32)`, byteSize(u64) AS `byteSize(UInt64)`, byteSize(i8) AS `byteSize(Int8)`, byteSize(i16) AS `byteSize(Int16)`, byteSize(i32) AS `byteSize(Int32)`, byteSize(i64) AS `byteSize(Int64)`, byteSize(f32) AS `byteSize(Float32)`, byteSize(f64) AS `byteSize(Float64)` FROM test ORDER BY key ASC FORMAT Vertical;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nkey:               1\nbyteSize(UInt8):   1\nbyteSize(UInt16):  2\nbyteSize(UInt32):  4\nbyteSize(UInt64):  8\nbyteSize(Int8):    1\nbyteSize(Int16):   2\nbyteSize(Int32):   4\nbyteSize(Int64):   8\nbyteSize(Float32): 4\nbyteSize(Float64): 8\n")),(0,r.kt)("p",null,"If the function takes multiple arguments, it returns their combined byte size."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT byteSize(NULL, 1, 0.3, '');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500byteSize(NULL, 1, 0.3, '')\u2500\u2510\n\u2502                         19 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"materializex"},"materialize(x)"),(0,r.kt)("p",null,"Turns a constant into a full column containing just one value.\nIn ClickHouse, full columns and constants are represented differently in memory. Functions work differently for constant arguments and normal arguments (different code is executed), although the result is almost always the same. This function is for debugging this behavior."),(0,r.kt)("h2",{id:"ignore"},"ignore(\u2026)"),(0,r.kt)("p",null,"Accepts any arguments, including ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". Always returns 0.\nHowever, the argument is still evaluated. This can be used for benchmarks."),(0,r.kt)("h2",{id:"sleepseconds"},"sleep(seconds)"),(0,r.kt)("p",null,"Sleeps \u2018seconds\u2019 seconds on each data block. You can specify an integer or a floating-point number."),(0,r.kt)("h2",{id:"sleepeachrowseconds"},"sleepEachRow(seconds)"),(0,r.kt)("p",null,"Sleeps \u2018seconds\u2019 seconds on each row. You can specify an integer or a floating-point number."),(0,r.kt)("h2",{id:"currentdatabase"},"currentDatabase()"),(0,r.kt)("p",null,"Returns the name of the current database.\nYou can use this function in table engine parameters in a CREATE TABLE query where you need to specify the database."),(0,r.kt)("h2",{id:"other-function-currentuser"},"currentUser()"),(0,r.kt)("p",null,"Returns the login of current user. Login of user, that initiated query, will be returned in case distibuted query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT currentUser();\n")),(0,r.kt)("p",null,"Alias: ",(0,r.kt)("inlineCode",{parentName:"p"},"user()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"USER()"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Login of current user."),(0,r.kt)("li",{parentName:"ul"},"Login of user that initiated query in case of disributed query.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT currentUser();\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500currentUser()\u2500\u2510\n\u2502 default       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"is-constant"},"isConstant"),(0,r.kt)("p",null,"Checks whether the argument is a constant expression."),(0,r.kt)("p",null,"A constant expression means an expression whose resulting value is known at the query analysis (i.e.\xa0before execution). For example, expressions over ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/syntax#literals"},"literals")," are constant expressions."),(0,r.kt)("p",null,"The function is intended for development, debugging and demonstration."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"isConstant(x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Expression to check.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is constant."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is non-constant.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT isConstant(x + 1) FROM (SELECT 43 AS x)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500isConstant(plus(x, 1))\u2500\u2510\n\u2502                      1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH 3.14 AS pi SELECT isConstant(cos(pi))\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500isConstant(cos(pi))\u2500\u2510\n\u2502                   1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT isConstant(number) FROM numbers(1)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500isConstant(number)\u2500\u2510\n\u2502                  0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"isfinitex"},"isFinite(x)"),(0,r.kt)("p",null,"Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is not infinite and not a NaN, otherwise 0."),(0,r.kt)("h2",{id:"isinfinitex"},"isInfinite(x)"),(0,r.kt)("p",null,"Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is infinite, otherwise 0. Note that 0 is returned for a NaN."),(0,r.kt)("h2",{id:"ifnotfinite"},"ifNotFinite"),(0,r.kt)("p",null,"Checks whether floating point value is finite."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ifNotFinite(x,y)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Value to be checked for infinity. Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/float"},"Float","*"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y")," \u2014 Fallback value. Type: ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/float"},"Float","*"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is finite."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"y")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is not finite.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT 1/0 as infimum, ifNotFinite(infimum,42)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u250c\u2500infimum\u2500\u252c\u2500ifNotFinite(divide(1, 0), 42)\u2500\u2510\n\u2502     inf \u2502                            42 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"You can get similar result by using ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/functions/conditional-functions#ternary-operator"},"ternary operator"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"isFinite(x) ? x : y"),"."),(0,r.kt)("h2",{id:"isnanx"},"isNaN(x)"),(0,r.kt)("p",null,"Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is a NaN, otherwise 0."),(0,r.kt)("h2",{id:"hascolumnintablehostname-username-password-database-table-column"},"hasColumnInTable(","[","\u2018hostname\u2019","[",", \u2018username\u2019","[",", \u2018password\u2019","]","]",",","]"," \u2018database\u2019, \u2018table\u2019, \u2018column\u2019)"),(0,r.kt)("p",null,"Accepts constant strings: database name, table name, and column name. Returns a UInt8 constant expression equal to 1 if there is a column, otherwise 0. If the hostname parameter is set, the test will run on a remote server.\nThe function throws an exception if the table does not exist.\nFor elements in a nested data structure, the function checks for the existence of a column. For the nested data structure itself, the function returns 0."),(0,r.kt)("h2",{id:"function-bar"},"bar"),(0,r.kt)("p",null,"Allows building a unicode-art diagram."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bar(x, min, max, width)")," draws a band with a width proportional to ",(0,r.kt)("inlineCode",{parentName:"p"},"(x - min)")," and equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," characters when ",(0,r.kt)("inlineCode",{parentName:"p"},"x = max"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 Size to display."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min, max")," \u2014 Integer constants. The value must fit in ",(0,r.kt)("inlineCode",{parentName:"li"},"Int64"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," \u2014 Constant, positive integer, can be fractional.")),(0,r.kt)("p",null,"The band is drawn with accuracy to one eighth of a symbol."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    toHour(EventTime) AS h,\n    count() AS c,\n    bar(c, 0, 600000, 20) AS bar\nFROM test.hits\nGROUP BY h\nORDER BY h ASC\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500h\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502 292907 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b         \u2502\n\u2502  1 \u2502 180563 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588             \u2502\n\u2502  2 \u2502 114861 \u2502 \u2588\u2588\u2588\u258b               \u2502\n\u2502  3 \u2502  85069 \u2502 \u2588\u2588\u258b                \u2502\n\u2502  4 \u2502  68543 \u2502 \u2588\u2588\u258e                \u2502\n\u2502  5 \u2502  78116 \u2502 \u2588\u2588\u258c                \u2502\n\u2502  6 \u2502 113474 \u2502 \u2588\u2588\u2588\u258b               \u2502\n\u2502  7 \u2502 170678 \u2502 \u2588\u2588\u2588\u2588\u2588\u258b             \u2502\n\u2502  8 \u2502 278380 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e         \u2502\n\u2502  9 \u2502 391053 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2502\n\u2502 10 \u2502 457681 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e   \u2502\n\u2502 11 \u2502 493667 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u2502\n\u2502 12 \u2502 509641 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502 13 \u2502 522947 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 14 \u2502 539954 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502\n\u2502 15 \u2502 528460 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2502\n\u2502 16 \u2502 539201 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502\n\u2502 17 \u2502 523539 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 18 \u2502 506467 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502 19 \u2502 520915 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e \u2502\n\u2502 20 \u2502 521665 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 21 \u2502 542078 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502\n\u2502 22 \u2502 493642 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u2502\n\u2502 23 \u2502 400397 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"transform"},"transform"),(0,r.kt)("p",null,"Transforms a value according to the explicitly defined mapping of some elements to other ones.\nThere are two variations of this function:"),(0,r.kt)("h3",{id:"transformx-array-from-array-to-default"},"transform(x, array_from, array_to, default)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"x")," \u2013 What to transform."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"array_from")," \u2013 Constant array of values for converting."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"array_to")," \u2013 Constant array of values to convert the values in \u2018from\u2019 to."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default")," \u2013 Which value to use if \u2018x\u2019 is not equal to any of the values in \u2018from\u2019."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"array_from")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"array_to")," \u2013 Arrays of the same size."),(0,r.kt)("p",null,"Types:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"transform(T, Array(T), Array(U), U) -> U")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"T")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"U")," can be numeric, string, or Date or DateTime types.\nWhere the same letter is indicated (T or U), for numeric types these might not be matching types, but types that have a common type.\nFor example, the first argument can have the Int64 type, while the second has the Array(UInt16) type."),(0,r.kt)("p",null,"If the \u2018x\u2019 value is equal to one of the elements in the \u2018array_from\u2019 array, it returns the existing element (that is numbered the same) from the \u2018array_to\u2019 array. Otherwise, it returns \u2018default\u2019. If there are multiple matching elements in \u2018array_from\u2019, it returns one of the matches."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    transform(SearchEngineID, [2, 3], ['Yandex', 'Google'], 'Other') AS title,\n    count() AS c\nFROM test.hits\nWHERE SearchEngineID != 0\nGROUP BY title\nORDER BY c DESC\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500title\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 Yandex    \u2502 498635 \u2502\n\u2502 Google    \u2502 229872 \u2502\n\u2502 Other     \u2502 104472 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h3",{id:"transformx-array-from-array-to"},"transform(x, array_from, array_to)"),(0,r.kt)("p",null,"Differs from the first variation in that the \u2018default\u2019 argument is omitted.\nIf the \u2018x\u2019 value is equal to one of the elements in the \u2018array_from\u2019 array, it returns the matching element (that is numbered the same) from the \u2018array_to\u2019 array. Otherwise, it returns \u2018x\u2019."),(0,r.kt)("p",null,"Types:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"transform(T, Array(T), Array(T)) -> T")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    transform(domain(Referer), ['yandex.ru', 'google.ru', 'vk.com'], ['www.yandex', 'example.com']) AS s,\n    count() AS c\nFROM test.hits\nGROUP BY domain(Referer)\nORDER BY count() DESC\nLIMIT 10\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502                \u2502 2906259 \u2502\n\u2502 www.yandex     \u2502  867767 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588.ru     \u2502  313599 \u2502\n\u2502 mail.yandex.ru \u2502  107147 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588.ru      \u2502  100355 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.ru   \u2502   65040 \u2502\n\u2502 news.yandex.ru \u2502   64515 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588.net     \u2502   59141 \u2502\n\u2502 example.com    \u2502   57316 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"formatreadablesizex"},"formatReadableSize(x)"),(0,r.kt)("p",null,"Accepts the size (number of bytes). Returns a rounded size with a suffix (KiB, MiB, etc.) as a string."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayJoin([1, 1024, 1024*1024, 192851925]) AS filesize_bytes,\n    formatReadableSize(filesize_bytes) AS filesize\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500filesize_bytes\u2500\u252c\u2500filesize\u2500\u2500\u2500\u2510\n\u2502              1 \u2502 1.00 B     \u2502\n\u2502           1024 \u2502 1.00 KiB   \u2502\n\u2502        1048576 \u2502 1.00 MiB   \u2502\n\u2502      192851925 \u2502 183.92 MiB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"formatreadablequantityx"},"formatReadableQuantity(x)"),(0,r.kt)("p",null,"Accepts the number. Returns a rounded number with a suffix (thousand, million, billion, etc.) as a string."),(0,r.kt)("p",null,"It is useful for reading big numbers by human."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayJoin([1024, 1234 * 1000, (4567 * 1000) * 1000, 98765432101234]) AS number,\n    formatReadableQuantity(number) AS number_for_humans\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500number\u2500\u252c\u2500number_for_humans\u2500\u2510\n\u2502           1024 \u2502 1.02 thousand     \u2502\n\u2502        1234000 \u2502 1.23 million      \u2502\n\u2502     4567000000 \u2502 4.57 billion      \u2502\n\u2502 98765432101234 \u2502 98.77 trillion    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"formatreadabletimedelta"},"formatReadableTimeDelta"),(0,r.kt)("p",null,"Accepts the time delta in seconds. Returns a time delta with (year, month, day, hour, minute, second) as a string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"formatReadableTimeDelta(column[, maximum_unit])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"column")," \u2014 A column with numeric time delta."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maximum_unit")," \u2014 Optional. Maximum unit to show. Acceptable values seconds, minutes, hours, days, months, years.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayJoin([100, 12345, 432546534]) AS elapsed,\n    formatReadableTimeDelta(elapsed) AS time_delta\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500elapsed\u2500\u252c\u2500time_delta \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        100 \u2502 1 minute and 40 seconds                                         \u2502\n\u2502      12345 \u2502 3 hours, 25 minutes and 45 seconds                              \u2502\n\u2502  432546534 \u2502 13 years, 8 months, 17 days, 7 hours, 48 minutes and 54 seconds \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayJoin([100, 12345, 432546534]) AS elapsed,\n    formatReadableTimeDelta(elapsed, 'minutes') AS time_delta\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500elapsed\u2500\u252c\u2500time_delta \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        100 \u2502 1 minute and 40 seconds                                         \u2502\n\u2502      12345 \u2502 205 minutes and 45 seconds                                      \u2502\n\u2502  432546534 \u2502 7209108 minutes and 54 seconds                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"leasta-b"},"least(a, b)"),(0,r.kt)("p",null,"Returns the smallest value from a and b."),(0,r.kt)("h2",{id:"greatesta-b"},"greatest(a, b)"),(0,r.kt)("p",null,"Returns the largest value of a and b."),(0,r.kt)("h2",{id:"uptime"},"uptime()"),(0,r.kt)("p",null,"Returns the server\u2019s uptime in seconds.\nIf it is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise it produces a constant value."),(0,r.kt)("h2",{id:"version"},"version()"),(0,r.kt)("p",null,"Returns the version of the server as a string.\nIf it is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise it produces a constant value."),(0,r.kt)("h2",{id:"buildid"},"buildId()"),(0,r.kt)("p",null,"Returns the build ID generated by a compiler for the running ClickHouse server binary.\nIf it is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise it produces a constant value."),(0,r.kt)("h2",{id:"blocknumber"},"blockNumber"),(0,r.kt)("p",null,"Returns the sequence number of the data block where the row is located."),(0,r.kt)("h2",{id:"function-rownumberinblock"},"rowNumberInBlock"),(0,r.kt)("p",null,"Returns the ordinal number of the row in the data block. Different data blocks are always recalculated."),(0,r.kt)("h2",{id:"rownumberinallblocks"},"rowNumberInAllBlocks()"),(0,r.kt)("p",null,"Returns the ordinal number of the row in the data block. This function only considers the affected data blocks."),(0,r.kt)("h2",{id:"neighbor"},"neighbor"),(0,r.kt)("p",null,"The window function that provides access to a row at a specified offset which comes before or after the current row of a given column."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"neighbor(column, offset[, default_value])\n")),(0,r.kt)("p",null,"The result of the function depends on the affected data blocks and the order of data in the block."),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It can reach the neighbor rows only inside the currently processed data block."))),(0,r.kt)("p",null,"The rows order used during the calculation of ",(0,r.kt)("inlineCode",{parentName:"p"},"neighbor")," can differ from the order of rows returned to the user.\nTo prevent that you can make a subquery with ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/select/order-by"},"ORDER BY")," and call the function from outside the subquery."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"column")," \u2014 A column name or scalar expression."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offset")," \u2014 The number of rows forwards or backwards from the current row of ",(0,r.kt)("inlineCode",{parentName:"li"},"column"),". ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"Int64"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"default_value")," \u2014 Optional. The value to be returned if offset goes beyond the scope of the block. Type of data blocks affected.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Value for ",(0,r.kt)("inlineCode",{parentName:"li"},"column")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"offset")," distance from current row if ",(0,r.kt)("inlineCode",{parentName:"li"},"offset")," value is not outside block bounds."),(0,r.kt)("li",{parentName:"ul"},"Default value for ",(0,r.kt)("inlineCode",{parentName:"li"},"column")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"offset")," value is outside block bounds. If ",(0,r.kt)("inlineCode",{parentName:"li"},"default_value")," is given, then it will be used.")),(0,r.kt)("p",null,"Type: type of data blocks affected or default value type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT number, neighbor(number, 2) FROM system.numbers LIMIT 10;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u252c\u2500neighbor(number, 2)\u2500\u2510\n\u2502      0 \u2502                   2 \u2502\n\u2502      1 \u2502                   3 \u2502\n\u2502      2 \u2502                   4 \u2502\n\u2502      3 \u2502                   5 \u2502\n\u2502      4 \u2502                   6 \u2502\n\u2502      5 \u2502                   7 \u2502\n\u2502      6 \u2502                   8 \u2502\n\u2502      7 \u2502                   9 \u2502\n\u2502      8 \u2502                   0 \u2502\n\u2502      9 \u2502                   0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT number, neighbor(number, 2, 999) FROM system.numbers LIMIT 10;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u252c\u2500neighbor(number, 2, 999)\u2500\u2510\n\u2502      0 \u2502                        2 \u2502\n\u2502      1 \u2502                        3 \u2502\n\u2502      2 \u2502                        4 \u2502\n\u2502      3 \u2502                        5 \u2502\n\u2502      4 \u2502                        6 \u2502\n\u2502      5 \u2502                        7 \u2502\n\u2502      6 \u2502                        8 \u2502\n\u2502      7 \u2502                        9 \u2502\n\u2502      8 \u2502                      999 \u2502\n\u2502      9 \u2502                      999 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"This function can be used to compute year-over-year metric value:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH toDate('2018-01-01') AS start_date\nSELECT\n    toStartOfMonth(start_date + (number * 32)) AS month,\n    toInt32(month) % 100 AS money,\n    neighbor(money, -12) AS prev_year,\n    round(prev_year / money, 2) AS year_over_year\nFROM numbers(16)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500month\u2500\u252c\u2500money\u2500\u252c\u2500prev_year\u2500\u252c\u2500year_over_year\u2500\u2510\n\u2502 2018-01-01 \u2502    32 \u2502         0 \u2502              0 \u2502\n\u2502 2018-02-01 \u2502    63 \u2502         0 \u2502              0 \u2502\n\u2502 2018-03-01 \u2502    91 \u2502         0 \u2502              0 \u2502\n\u2502 2018-04-01 \u2502    22 \u2502         0 \u2502              0 \u2502\n\u2502 2018-05-01 \u2502    52 \u2502         0 \u2502              0 \u2502\n\u2502 2018-06-01 \u2502    83 \u2502         0 \u2502              0 \u2502\n\u2502 2018-07-01 \u2502    13 \u2502         0 \u2502              0 \u2502\n\u2502 2018-08-01 \u2502    44 \u2502         0 \u2502              0 \u2502\n\u2502 2018-09-01 \u2502    75 \u2502         0 \u2502              0 \u2502\n\u2502 2018-10-01 \u2502     5 \u2502         0 \u2502              0 \u2502\n\u2502 2018-11-01 \u2502    36 \u2502         0 \u2502              0 \u2502\n\u2502 2018-12-01 \u2502    66 \u2502         0 \u2502              0 \u2502\n\u2502 2019-01-01 \u2502    97 \u2502        32 \u2502           0.33 \u2502\n\u2502 2019-02-01 \u2502    28 \u2502        63 \u2502           2.25 \u2502\n\u2502 2019-03-01 \u2502    56 \u2502        91 \u2502           1.62 \u2502\n\u2502 2019-04-01 \u2502    87 \u2502        22 \u2502           0.25 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"other_functions-runningdifference"},"runningDifference(x)"),(0,r.kt)("p",null,"Calculates the difference between successive row values \u200b\u200bin the data block.\nReturns 0 for the first row and the difference from the previous row for each subsequent row."),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It can reach the previous row only inside the currently processed data block."))),(0,r.kt)("p",null,"The result of the function depends on the affected data blocks and the order of data in the block."),(0,r.kt)("p",null,"The rows order used during the calculation of ",(0,r.kt)("inlineCode",{parentName:"p"},"runningDifference")," can differ from the order of rows returned to the user.\nTo prevent that you can make a subquery with ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/select/order-by"},"ORDER BY")," and call the function from outside the subquery."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    EventID,\n    EventTime,\n    runningDifference(EventTime) AS delta\nFROM\n(\n    SELECT\n        EventID,\n        EventTime\n    FROM events\n    WHERE EventDate = '2016-11-24'\n    ORDER BY EventTime ASC\n    LIMIT 5\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500EventID\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500EventTime\u2500\u252c\u2500delta\u2500\u2510\n\u2502    1106 \u2502 2016-11-24 00:00:04 \u2502     0 \u2502\n\u2502    1107 \u2502 2016-11-24 00:00:05 \u2502     1 \u2502\n\u2502    1108 \u2502 2016-11-24 00:00:05 \u2502     0 \u2502\n\u2502    1109 \u2502 2016-11-24 00:00:09 \u2502     4 \u2502\n\u2502    1110 \u2502 2016-11-24 00:00:10 \u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Please note - block size affects the result. With each new block, the ",(0,r.kt)("inlineCode",{parentName:"p"},"runningDifference")," state is reset."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    number,\n    runningDifference(number + 1) AS diff\nFROM numbers(100000)\nWHERE diff != 1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u252c\u2500diff\u2500\u2510\n\u2502      0 \u2502    0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500number\u2500\u252c\u2500diff\u2500\u2510\n\u2502  65536 \u2502    0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"set max_block_size=100000 -- default value is 65536!\n\nSELECT\n    number,\n    runningDifference(number + 1) AS diff\nFROM numbers(100000)\nWHERE diff != 1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u252c\u2500diff\u2500\u2510\n\u2502      0 \u2502    0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"runningdifferencestartingwithfirstvalue"},"runningDifferenceStartingWithFirstValue"),(0,r.kt)("p",null,"Same as for ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/functions/other-functions#other_functions-runningdifference"},"runningDifference"),", the difference is the value of the first row, returned the value of the first row, and each subsequent row returns the difference from the previous row."),(0,r.kt)("h2",{id:"runningconcurrency"},"runningConcurrency"),(0,r.kt)("p",null,"Calculates the number of concurrent events.\nEach event has a start time and an end time. The start time is included in the event, while the end time is excluded. Columns with a start time and an end time must be of the same data type.\nThe function calculates the total number of active (concurrent) events for each event start time."),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Events must be ordered by the start time in ascending order. If this requirement is violated the function raises an exception. Every data block is processed separately. If events from different data blocks overlap then they can not be processed correctly."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"runningConcurrency(start, end)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start")," \u2014 A column with the start time of events. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/date"},"Date"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/datetime"},"DateTime"),", or ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/datetime64"},"DateTime64"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end")," \u2014 A column with the end time of events.  ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/date"},"Date"),", ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/datetime"},"DateTime"),", or ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/datetime64"},"DateTime64"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of concurrent events at each event start time.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt32")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Consider the table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500start\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500end\u2500\u2510\n\u2502 2021-03-03 \u2502 2021-03-11 \u2502\n\u2502 2021-03-06 \u2502 2021-03-12 \u2502\n\u2502 2021-03-07 \u2502 2021-03-08 \u2502\n\u2502 2021-03-11 \u2502 2021-03-12 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT start, runningConcurrency(start, end) FROM example_table;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500start\u2500\u252c\u2500runningConcurrency(start, end)\u2500\u2510\n\u2502 2021-03-03 \u2502                              1 \u2502\n\u2502 2021-03-06 \u2502                              2 \u2502\n\u2502 2021-03-07 \u2502                              3 \u2502\n\u2502 2021-03-11 \u2502                              2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"macnumtostringnum"},"MACNumToString(num)"),(0,r.kt)("p",null,"Accepts a UInt64 number. Interprets it as a MAC address in big endian. Returns a string containing the corresponding MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form)."),(0,r.kt)("h2",{id:"macstringtonums"},"MACStringToNum(s)"),(0,r.kt)("p",null,"The inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0."),(0,r.kt)("h2",{id:"macstringtoouis"},"MACStringToOUI(s)"),(0,r.kt)("p",null,"Accepts a MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form). Returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0."),(0,r.kt)("h2",{id:"getsizeofenumtype"},"getSizeOfEnumType"),(0,r.kt)("p",null,"Returns the number of fields in ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/enum"},"Enum"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"getSizeOfEnumType(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Value of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Enum"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of fields with ",(0,r.kt)("inlineCode",{parentName:"li"},"Enum")," input values."),(0,r.kt)("li",{parentName:"ul"},"An exception is thrown if the type is not ",(0,r.kt)("inlineCode",{parentName:"li"},"Enum"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT getSizeOfEnumType( CAST('a' AS Enum8('a' = 1, 'b' = 2) ) ) AS x\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500x\u2500\u2510\n\u2502 2 \u2502\n\u2514\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"blockserializedsize"},"blockSerializedSize"),(0,r.kt)("p",null,"Returns size on disk (without taking into account compression)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"blockSerializedSize(value[, value[, ...]])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Any value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of bytes that will be written to disk for block of values (without compression).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT blockSerializedSize(maxState(1)) as x\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500x\u2500\u2510\n\u2502 2 \u2502\n\u2514\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"tocolumntypename"},"toColumnTypeName"),(0,r.kt)("p",null,"Returns the name of the class that represents the data type of the column in RAM."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"toColumnTypeName(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Any type of value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string with the name of the class that is used for representing the ",(0,r.kt)("inlineCode",{parentName:"li"},"value")," data type in RAM.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example of the difference between",(0,r.kt)("inlineCode",{parentName:"strong"},"toTypeName ' and ' toColumnTypeName"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toTypeName(CAST('2018-01-01 01:02:03' AS DateTime))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toTypeName(CAST('2018-01-01 01:02:03', 'DateTime'))\u2500\u2510\n\u2502 DateTime                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT toColumnTypeName(CAST('2018-01-01 01:02:03' AS DateTime))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500toColumnTypeName(CAST('2018-01-01 01:02:03', 'DateTime'))\u2500\u2510\n\u2502 Const(UInt32)                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The example shows that the ",(0,r.kt)("inlineCode",{parentName:"p"},"DateTime")," data type is stored in memory as ",(0,r.kt)("inlineCode",{parentName:"p"},"Const(UInt32)"),"."),(0,r.kt)("h2",{id:"dumpcolumnstructure"},"dumpColumnStructure"),(0,r.kt)("p",null,"Outputs a detailed description of data structures in RAM"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"dumpColumnStructure(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," \u2014 Any type of value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A string describing the structure that is used for representing the ",(0,r.kt)("inlineCode",{parentName:"li"},"value")," data type in RAM.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT dumpColumnStructure(CAST('2018-01-01 01:02:03', 'DateTime'))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dumpColumnStructure(CAST('2018-01-01 01:02:03', 'DateTime'))\u2500\u2510\n\u2502 DateTime, Const(size = 1, UInt32(size = 1))                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"defaultvalueofargumenttype"},"defaultValueOfArgumentType"),(0,r.kt)("p",null,"Outputs the default value for the data type."),(0,r.kt)("p",null,"Does not include default values for custom columns set by the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"defaultValueOfArgumentType(expression)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expression")," \u2014 Arbitrary type of value or an expression that results in a value of an arbitrary type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," for numbers."),(0,r.kt)("li",{parentName:"ul"},"Empty string for strings."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\u1d3a\u1d41\u1d38\u1d38")," for ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/nullable"},"Nullable"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT defaultValueOfArgumentType( CAST(1 AS Int8) )\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500defaultValueOfArgumentType(CAST(1, 'Int8'))\u2500\u2510\n\u2502                                           0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT defaultValueOfArgumentType( CAST(1 AS Nullable(Int8) ) )\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500defaultValueOfArgumentType(CAST(1, 'Nullable(Int8)'))\u2500\u2510\n\u2502                                                  \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"defaultvalueoftypename"},"defaultValueOfTypeName"),(0,r.kt)("p",null,"Outputs the default value for given type name."),(0,r.kt)("p",null,"Does not include default values for custom columns set by the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"defaultValueOfTypeName(type)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," \u2014 A string representing a type name.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," for numbers."),(0,r.kt)("li",{parentName:"ul"},"Empty string for strings."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\u1d3a\u1d41\u1d38\u1d38")," for ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/nullable"},"Nullable"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT defaultValueOfTypeName('Int8')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500defaultValueOfTypeName('Int8')\u2500\u2510\n\u2502                              0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT defaultValueOfTypeName('Nullable(Int8)')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500defaultValueOfTypeName('Nullable(Int8)')\u2500\u2510\n\u2502                                     \u1d3a\u1d41\u1d38\u1d38 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"indexhint"},"indexHint"),(0,r.kt)("p",null,"The function is intended for debugging and introspection purposes. The function ignores it's argument and always returns 1. Arguments are not even evaluated."),(0,r.kt)("p",null,"But for the purpose of index analysis, the argument of this function is analyzed as if it was present directly without being wrapped inside ",(0,r.kt)("inlineCode",{parentName:"p"},"indexHint")," function. This allows to select data in index ranges by the corresponding condition but without further filtering by this condition. The index in ClickHouse is sparse and using ",(0,r.kt)("inlineCode",{parentName:"p"},"indexHint")," will yield more data than specifying the same condition directly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM table WHERE indexHint(<expression>)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Type: ",(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/data_types/int_uint/#diapazony-uint"},"Uint8"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Here is the example of test data from the table ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/example-datasets/ontime"},"ontime"),"."),(0,r.kt)("p",null,"Input table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT count() FROM ontime\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500count()\u2500\u2510\n\u2502 4276457 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The table has indexes on the fields ",(0,r.kt)("inlineCode",{parentName:"p"},"(FlightDate, (Year, FlightDate))"),"."),(0,r.kt)("p",null,"Create a query, where the index is not used."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT FlightDate AS k, count() FROM ontime GROUP BY k ORDER BY k\n")),(0,r.kt)("p",null,"ClickHouse processed the entire table (",(0,r.kt)("inlineCode",{parentName:"p"},"Processed 4.28 million rows"),")."),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500k\u2500\u252c\u2500count()\u2500\u2510\n\u2502 2017-01-01 \u2502   13970 \u2502\n\u2502 2017-01-02 \u2502   15882 \u2502\n........................\n\u2502 2017-09-28 \u2502   16411 \u2502\n\u2502 2017-09-29 \u2502   16384 \u2502\n\u2502 2017-09-30 \u2502   12520 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"To apply the index, select a specific date."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT FlightDate AS k, count() FROM ontime WHERE k = '2017-09-15' GROUP BY k ORDER BY k\n")),(0,r.kt)("p",null,"By using the index, ClickHouse processed a significantly smaller number of rows (",(0,r.kt)("inlineCode",{parentName:"p"},"Processed 32.74 thousand rows"),")."),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500k\u2500\u252c\u2500count()\u2500\u2510\n\u2502 2017-09-15 \u2502   16428 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Now wrap the expression ",(0,r.kt)("inlineCode",{parentName:"p"},"k = '2017-09-15'")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"indexHint")," function."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    FlightDate AS k,\n    count()\nFROM ontime\nWHERE indexHint(k = '2017-09-15')\nGROUP BY k\nORDER BY k ASC\n")),(0,r.kt)("p",null,"ClickHouse used the index in the same way as the previous time (",(0,r.kt)("inlineCode",{parentName:"p"},"Processed 32.74 thousand rows"),").\nThe expression ",(0,r.kt)("inlineCode",{parentName:"p"},"k = '2017-09-15'")," was not used when generating the result.\nIn examle the ",(0,r.kt)("inlineCode",{parentName:"p"},"indexHint")," function allows to see adjacent dates."),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500k\u2500\u252c\u2500count()\u2500\u2510\n\u2502 2017-09-14 \u2502    7071 \u2502\n\u2502 2017-09-15 \u2502   16428 \u2502\n\u2502 2017-09-16 \u2502    1077 \u2502\n\u2502 2017-09-30 \u2502    8167 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"other-functions-replicate"},"replicate"),(0,r.kt)("p",null,"Creates an array with a single value."),(0,r.kt)("p",null,"Used for internal implementation of ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/functions/array-join#functions_arrayjoin"},"arrayJoin"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT replicate(x, arr);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Original array. ClickHouse creates a new array of the same length as the original and fills it with the value ",(0,r.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 The value that the resulting array will be filled with.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"An array filled with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("p",null,"Type: ",(0,r.kt)("inlineCode",{parentName:"p"},"Array"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT replicate(1, ['a', 'b', 'c'])\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500replicate(1, ['a', 'b', 'c'])\u2500\u2510\n\u2502 [1,1,1]                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"filesystemavailable"},"filesystemAvailable"),(0,r.kt)("p",null,"Returns amount of remaining space on the filesystem where the files of the databases located. It is always smaller than total free space (",(0,r.kt)("a",{parentName:"p",href:"#filesystemfree"},"filesystemFree"),") because some space is reserved for OS."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"filesystemAvailable()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The amount of remaining space available in bytes.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT formatReadableSize(filesystemAvailable()) AS "Available space", toTypeName(filesystemAvailable()) AS "Type";\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500Available space\u2500\u252c\u2500Type\u2500\u2500\u2500\u2510\n\u2502 30.75 GiB       \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"filesystemfree"},"filesystemFree"),(0,r.kt)("p",null,"Returns total amount of the free space on the filesystem where the files of the databases located. See also ",(0,r.kt)("inlineCode",{parentName:"p"},"filesystemAvailable")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"filesystemFree()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Amount of free space in bytes.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT formatReadableSize(filesystemFree()) AS "Free space", toTypeName(filesystemFree()) AS "Type";\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500Free space\u2500\u252c\u2500Type\u2500\u2500\u2500\u2510\n\u2502 32.39 GiB  \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"filesystemcapacity"},"filesystemCapacity"),(0,r.kt)("p",null,"Returns the capacity of the filesystem in bytes. For evaluation, the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-path"},"path")," to the data directory must be configured."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"filesystemCapacity()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Capacity information of the filesystem in bytes.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt64"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT formatReadableSize(filesystemCapacity()) AS "Capacity", toTypeName(filesystemCapacity()) AS "Type"\n')),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500Capacity\u2500\u2500\u252c\u2500Type\u2500\u2500\u2500\u2510\n\u2502 39.32 GiB \u2502 UInt64 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"initializeaggregation"},"initializeAggregation"),(0,r.kt)("p",null,"Calculates result of aggregate function based on single value. It is intended to use this function to initialize aggregate functions with combinator ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/aggregate-functions/combinators#agg-functions-combinator-state"},"-State"),". You can create states of aggregate functions and insert them to columns of type ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/aggregatefunction#data-type-aggregatefunction"},"AggregateFunction")," or use initialized aggregates as default values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"initializeAggregation (aggregate_function, arg1, arg2, ..., argN)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"aggregate_function")," \u2014 Name of the aggregation function to initialize. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arg")," \u2014 Arguments of aggregate function.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Result of aggregation for every row passed to the function.")),(0,r.kt)("p",null,"The return type is the same as the return type of function, that ",(0,r.kt)("inlineCode",{parentName:"p"},"initializeAgregation")," takes as first argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT uniqMerge(state) FROM (SELECT initializeAggregation('uniqState', number % 3) AS state FROM numbers(10000));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500uniqMerge(state)\u2500\u2510\n\u2502                3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT finalizeAggregation(state), toTypeName(state) FROM (SELECT initializeAggregation('sumState', number % 3) AS state FROM numbers(5));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500finalizeAggregation(state)\u2500\u252c\u2500toTypeName(state)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          0 \u2502 AggregateFunction(sum, UInt8) \u2502\n\u2502                          1 \u2502 AggregateFunction(sum, UInt8) \u2502\n\u2502                          2 \u2502 AggregateFunction(sum, UInt8) \u2502\n\u2502                          0 \u2502 AggregateFunction(sum, UInt8) \u2502\n\u2502                          1 \u2502 AggregateFunction(sum, UInt8) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Example with ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregatingMergeTree")," table engine and ",(0,r.kt)("inlineCode",{parentName:"p"},"AggregateFunction")," column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE metrics\n(\n    key UInt64,\n    value AggregateFunction(sum, UInt64) DEFAULT initializeAggregation('sumState', toUInt64(0))\n)\nENGINE = AggregatingMergeTree\nORDER BY key\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO metrics VALUES (0, initializeAggregation('sumState', toUInt64(42)))\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/functions/array-functions#arrayreduce"},"arrayReduce"))),(0,r.kt)("h2",{id:"function-finalizeaggregation"},"finalizeAggregation"),(0,r.kt)("p",null,"Takes state of aggregate function. Returns result of aggregation (or finalized state when using",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/aggregate-functions/combinators#agg-functions-combinator-state"},"-State")," combinator)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"finalizeAggregation(state)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," \u2014 State of aggregation. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/aggregatefunction#data-type-aggregatefunction"},"AggregateFunction"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Value/values that was aggregated.")),(0,r.kt)("p",null,"Type: Value of any types that was aggregated."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT finalizeAggregation(( SELECT countState(number) FROM numbers(10)));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500finalizeAggregation(_subquery16)\u2500\u2510\n\u2502                               10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT finalizeAggregation(( SELECT sumState(number) FROM numbers(10)));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500finalizeAggregation(_subquery20)\u2500\u2510\n\u2502                               45 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," values are ignored."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT finalizeAggregation(arrayReduce('anyState', [NULL, 2, 3]));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500finalizeAggregation(arrayReduce('anyState', [NULL, 2, 3]))\u2500\u2510\n\u2502                                                          2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Combined example:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH initializeAggregation('sumState', number) AS one_row_sum_state\nSELECT\n    number,\n    finalizeAggregation(one_row_sum_state) AS one_row_sum,\n    runningAccumulate(one_row_sum_state) AS cumulative_sum\nFROM numbers(10);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500number\u2500\u252c\u2500one_row_sum\u2500\u252c\u2500cumulative_sum\u2500\u2510\n\u2502      0 \u2502           0 \u2502              0 \u2502\n\u2502      1 \u2502           1 \u2502              1 \u2502\n\u2502      2 \u2502           2 \u2502              3 \u2502\n\u2502      3 \u2502           3 \u2502              6 \u2502\n\u2502      4 \u2502           4 \u2502             10 \u2502\n\u2502      5 \u2502           5 \u2502             15 \u2502\n\u2502      6 \u2502           6 \u2502             21 \u2502\n\u2502      7 \u2502           7 \u2502             28 \u2502\n\u2502      8 \u2502           8 \u2502             36 \u2502\n\u2502      9 \u2502           9 \u2502             45 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/functions/array-functions#arrayreduce"},"arrayReduce")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#initializeaggregation"},"initializeAggregation"))),(0,r.kt)("h2",{id:"runningaccumulate"},"runningAccumulate"),(0,r.kt)("p",null,"Accumulates states of an aggregate function for each row of a data block."),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The state is reset for each new data block."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"runningAccumulate(agg_state[, grouping]);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"agg_state")," \u2014 State of the aggregate function. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/aggregatefunction#data-type-aggregatefunction"},"AggregateFunction"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"grouping")," \u2014 Grouping key. Optional. The state of the function is reset if the ",(0,r.kt)("inlineCode",{parentName:"li"},"grouping")," value is changed. It can be any of the ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/"},"supported data types")," for which the equality operator is defined.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each resulting row contains a result of the aggregate function, accumulated for all the input rows from 0 to the current position. ",(0,r.kt)("inlineCode",{parentName:"li"},"runningAccumulate")," resets states for each new data block or when the ",(0,r.kt)("inlineCode",{parentName:"li"},"grouping")," value changes.")),(0,r.kt)("p",null,"Type depends on the aggregate function used."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("p",null,"Consider how you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"runningAccumulate")," to find the cumulative sum of numbers without and with grouping."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT k, runningAccumulate(sum_k) AS res FROM (SELECT number as k, sumState(k) AS sum_k FROM numbers(10) GROUP BY k ORDER BY k);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500k\u2500\u252c\u2500res\u2500\u2510\n\u2502 0 \u2502   0 \u2502\n\u2502 1 \u2502   1 \u2502\n\u2502 2 \u2502   3 \u2502\n\u2502 3 \u2502   6 \u2502\n\u2502 4 \u2502  10 \u2502\n\u2502 5 \u2502  15 \u2502\n\u2502 6 \u2502  21 \u2502\n\u2502 7 \u2502  28 \u2502\n\u2502 8 \u2502  36 \u2502\n\u2502 9 \u2502  45 \u2502\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"The subquery generates ",(0,r.kt)("inlineCode",{parentName:"p"},"sumState")," for every number from ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"9"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"sumState")," returns the state of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/aggregate-functions/reference/sum"},"sum")," function that contains the sum of a single number."),(0,r.kt)("p",null,"The whole query does the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"For the first row, ",(0,r.kt)("inlineCode",{parentName:"li"},"runningAccumulate")," takes ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(0)")," and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ol"},"For the second row, the function merges ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(0)")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(1)")," resulting in ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(0 + 1)"),", and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," as a result."),(0,r.kt)("li",{parentName:"ol"},"For the third row, the function merges ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(0 + 1)")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(2)")," resulting in ",(0,r.kt)("inlineCode",{parentName:"li"},"sumState(0 + 1 + 2)"),", and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"3")," as a result."),(0,r.kt)("li",{parentName:"ol"},"The actions are repeated until the block ends.")),(0,r.kt)("p",null,"The following example shows the ",(0,r.kt)("inlineCode",{parentName:"p"},"groupping")," parameter usage:"),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    grouping,\n    item,\n    runningAccumulate(state, grouping) AS res\nFROM\n(\n    SELECT\n        toInt8(number / 4) AS grouping,\n        number AS item,\n        sumState(number) AS state\n    FROM numbers(15)\n    GROUP BY item\n    ORDER BY item ASC\n);\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500grouping\u2500\u252c\u2500item\u2500\u252c\u2500res\u2500\u2510\n\u2502        0 \u2502    0 \u2502   0 \u2502\n\u2502        0 \u2502    1 \u2502   1 \u2502\n\u2502        0 \u2502    2 \u2502   3 \u2502\n\u2502        0 \u2502    3 \u2502   6 \u2502\n\u2502        1 \u2502    4 \u2502   4 \u2502\n\u2502        1 \u2502    5 \u2502   9 \u2502\n\u2502        1 \u2502    6 \u2502  15 \u2502\n\u2502        1 \u2502    7 \u2502  22 \u2502\n\u2502        2 \u2502    8 \u2502   8 \u2502\n\u2502        2 \u2502    9 \u2502  17 \u2502\n\u2502        2 \u2502   10 \u2502  27 \u2502\n\u2502        2 \u2502   11 \u2502  38 \u2502\n\u2502        3 \u2502   12 \u2502  12 \u2502\n\u2502        3 \u2502   13 \u2502  25 \u2502\n\u2502        3 \u2502   14 \u2502  39 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"As you can see, ",(0,r.kt)("inlineCode",{parentName:"p"},"runningAccumulate")," merges states for each group of rows separately."),(0,r.kt)("h2",{id:"joinget"},"joinGet"),(0,r.kt)("p",null,"The function lets you extract data from the table the same way as from a ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/dictionaries/"},"dictionary"),"."),(0,r.kt)("p",null,"Gets data from ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/engines/table-engines/special/join#creating-a-table"},"Join")," tables using the specified join key."),(0,r.kt)("p",null,"Only supports tables created with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ENGINE = Join(ANY, LEFT, <join_keys>)")," statement."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"joinGet(join_storage_table_name, `value_column`, join_keys)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"join_storage_table_name")," \u2014 an ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/syntax#syntax-identifiers"},"identifier")," indicates where search is performed. The identifier is searched in the default database (see parameter ",(0,r.kt)("inlineCode",{parentName:"li"},"default_database")," in the config file). To override the default database, use the ",(0,r.kt)("inlineCode",{parentName:"li"},"USE db_name")," or specify the database and the table through the separator ",(0,r.kt)("inlineCode",{parentName:"li"},"db_name.db_table"),", see the example."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value_column")," \u2014 name of the column of the table that contains required data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"join_keys")," \u2014 list of keys.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"Returns list of values corresponded to list of keys."),(0,r.kt)("p",null,"If certain does not exist in source table then ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," will be returned based on ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/settings/#join_use_nulls"},"join_use_nulls")," setting."),(0,r.kt)("p",null,"More info about ",(0,r.kt)("inlineCode",{parentName:"p"},"join_use_nulls")," in ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/engines/table-engines/special/join"},"Join operation"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Input table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db_test\nCREATE TABLE db_test.id_val(`id` UInt32, `val` UInt32) ENGINE = Join(ANY, LEFT, id) SETTINGS join_use_nulls = 1\nINSERT INTO db_test.id_val VALUES (1,11)(2,12)(4,13)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500id\u2500\u252c\u2500val\u2500\u2510\n\u2502  4 \u2502  13 \u2502\n\u2502  2 \u2502  12 \u2502\n\u2502  1 \u2502  11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT joinGet(db_test.id_val,'val',toUInt32(number)) from numbers(4) SETTINGS join_use_nulls = 1\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500joinGet(db_test.id_val, 'val', toUInt32(number))\u2500\u2510\n\u2502                                                0 \u2502\n\u2502                                               11 \u2502\n\u2502                                               12 \u2502\n\u2502                                                0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"function-modelevaluate"},"modelEvaluate(model_name, \u2026)"),(0,r.kt)("p",null,"Evaluate external model.\nAccepts a model name and model arguments. Returns Float64."),(0,r.kt)("h2",{id:"throwifx-custom-message"},"throwIf(x","[",", custom_message","]",")"),(0,r.kt)("p",null,"Throw an exception if the argument is non zero.\ncustom_message - is an optional parameter: a constant string, provides an error message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT throwIf(number = 3, 'Too many') FROM numbers(10);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u2199 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) Received exception from server (version 19.14.1):\nCode: 395. DB::Exception: Received from localhost:9000. DB::Exception: Too many.\n")),(0,r.kt)("h2",{id:"identity"},"identity"),(0,r.kt)("p",null,"Returns the same value that was used as its argument. Used for debugging and testing, allows to cancel using index, and get the query performance of a full scan. When query is analyzed for possible use of index, the analyzer does not look inside ",(0,r.kt)("inlineCode",{parentName:"p"},"identity")," functions. Also constant folding is not applied too."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"identity(x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT identity(42)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500identity(42)\u2500\u2510\n\u2502           42 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"randomascii"},"randomPrintableASCII"),(0,r.kt)("p",null,"Generates a string with a random set of ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ASCII#Printable_characters"},"ASCII")," printable characters."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"randomPrintableASCII(length)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"length")," \u2014 Resulting string length. Positive integer."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"If you pass `length < 0`, behavior of the function is undefined.\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String with a random set of ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ASCII#Printable_characters"},"ASCII")," printable characters.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT number, randomPrintableASCII(30) as str, length(str) FROM system.numbers LIMIT 3\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'\u250c\u2500number\u2500\u252c\u2500str\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500length(randomPrintableASCII(30))\u2500\u2510\n\u2502      0 \u2502 SuiCOSTvC0csfABSw=UcSzp2.`rv8x \u2502                               30 \u2502\n\u2502      1 \u2502 1Ag NlJ &RCN:*>HVPG;PE-nO"SUFD \u2502                               30 \u2502\n\u2502      2 \u2502 /"+<"wUTh:=LjJ Vm!c&hI*m#XTfzz \u2502                               30 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n')),(0,r.kt)("h2",{id:"randomstring"},"randomString"),(0,r.kt)("p",null,"Generates a binary string of the specified length filled with random bytes (including zero bytes)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"randomString(length)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"length")," \u2014 String length. Positive integer.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String filled with random bytes.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT randomString(30) AS str, length(str) AS len FROM numbers(2) FORMAT Vertical;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nstr: 3 G  :   pT ?w \u0442i  k aV f6\nlen: 30\n\nRow 2:\n\u2500\u2500\u2500\u2500\u2500\u2500\nstr: 9 ,]    ^   )  ]??  8\nlen: 30\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/table-functions/generate#generaterandom"},"generateRandom")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/functions/other-functions#randomascii"},"randomPrintableASCII"))),(0,r.kt)("h2",{id:"randomfixedstring"},"randomFixedString"),(0,r.kt)("p",null,"Generates a binary string of the specified length filled with random bytes (including zero bytes)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"randomFixedString(length);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"length")," \u2014 String length in bytes. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt64"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"String filled with random bytes.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT randomFixedString(13) as rnd, toTypeName(rnd)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500rnd\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(randomFixedString(13))\u2500\u2510\n\u2502 j\u2592h\u32d6H\u0268Z'\u2592 \u2502 FixedString(13)                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"randomstringutf8"},"randomStringUTF8"),(0,r.kt)("p",null,"Generates a random string of a specified length. Result string contains valid UTF-8 code points. The value of code points may be outside of the range of assigned Unicode."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"randomStringUTF8(length);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"length")," \u2014 Required length of the resulting string in code points. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt64"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"UTF-8 random string.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT randomStringUTF8(13)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500randomStringUTF8(13)\u2500\u2510\n\u2502 \ud822\udd17\ud824\ude5d\u0434\u5160\u5e87\udb44\udd74\udb87\udc4e\udb59\udc2a\ue5a5\udbc9\udd4c\ue619\ud810\udeb9\ud80f\udc1b   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,r.kt)("h2",{id:"getSetting"},"getSetting"),(0,r.kt)("p",null,"Returns the current value of a ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/settings/index#custom_settings"},"custom setting"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"getSetting('custom_setting');\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"custom_setting")," \u2014 The setting name. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The setting current value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SET custom_a = 123;\nSELECT getSetting('custom_a');\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"123\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/operations/settings/index#custom_settings"},"Custom Settings"))),(0,r.kt)("h2",{id:"is-decimal-overflow"},"isDecimalOverflow"),(0,r.kt)("p",null,"Checks whether the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/decimal"},"Decimal")," value is out of its (or specified) precision."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"isDecimalOverflow(d, [p])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"d")," \u2014 value. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/decimal"},"Decimal"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"p")," \u2014 precision. Optional. If omitted, the initial precision of the first argument is used. Using of this paratemer could be helpful for data extraction to another DBMS or file. ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint#uint-ranges"},"UInt8"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," \u2014 Decimal value has more digits then it's precision allow,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," \u2014 Decimal value satisfies the specified precision.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT isDecimalOverflow(toDecimal32(1000000000, 0), 9),\n       isDecimalOverflow(toDecimal32(1000000000, 0)),\n       isDecimalOverflow(toDecimal32(-1000000000, 0), 9),\n       isDecimalOverflow(toDecimal32(-1000000000, 0));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"1   1   1   1\n")),(0,r.kt)("h2",{id:"count-digits"},"countDigits"),(0,r.kt)("p",null,"Returns number of decimal digits you need to represent the value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"countDigits(x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u2014 ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"Int")," or ",(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/sql-reference/data-types/decimal"},"Decimal")," value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"Number of digits."),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint#uint-ranges"},"UInt8"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"For ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal")," values takes into account their scales: calculates result over underlying integer type which is ",(0,r.kt)("inlineCode",{parentName:"p"},"(value * scale)"),". For example: ",(0,r.kt)("inlineCode",{parentName:"p"},"countDigits(42) = 2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"countDigits(42.000) = 5"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"countDigits(0.04200) = 4"),". I.e. you may check decimal overflow for ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal64")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"countDecimal(x) > 18"),". It's a slow variant of ",(0,r.kt)("a",{parentName:"p",href:"#is-decimal-overflow"},"isDecimalOverflow"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countDigits(toDecimal32(1, 9)), countDigits(toDecimal32(-1, 9)),\n       countDigits(toDecimal64(1, 18)), countDigits(toDecimal64(-1, 18)),\n       countDigits(toDecimal128(1, 38)), countDigits(toDecimal128(-1, 38));\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"10  10  19  19  39  39\n")),(0,r.kt)("h2",{id:"error-code-to-name"},"errorCodeToName"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Variable name for the error code.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/lowcardinality"},"LowCardinality(String)"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"errorCodeToName(1)\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"UNSUPPORTED_METHOD\n")),(0,r.kt)("h2",{id:"tcpPort"},"tcpPort"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/interfaces/tcp"},"native interface")," TCP port number listened by this server.\nIf it is executed in the context of a distributed table, then it generates a normal column, otherwise it produces a constant value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"tcpPort()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The TCP port number.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt16"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tcpPort();\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tcpPort()\u2500\u2510\n\u2502      9000 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-tcp_port"},"tcp_port"))),(0,r.kt)("h2",{id:"current-profiles"},"currentProfiles"),(0,r.kt)("p",null,"Returns a list of the current ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/access-rights#settings-profiles-management"},"settings profiles")," for the current user. "),(0,r.kt)("p",null,"The command ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/set#query-set"},"SET PROFILE")," could be used to change the current setting profile. If the command ",(0,r.kt)("inlineCode",{parentName:"p"},"SET PROFILE")," was not used the function returns the profiles specified at the current user's definition (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/create/user#create-user-statement"},"CREATE USER"),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"currentProfiles()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of the current user settings profiles. ")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),")."),(0,r.kt)("h2",{id:"enabled-profiles"},"enabledProfiles"),(0,r.kt)("p",null," Returns settings profiles, assigned to the current user both explicitly and implicitly. Explicitly assigned profiles are the same as returned by the ",(0,r.kt)("a",{parentName:"p",href:"#current-profiles"},"currentProfiles")," function. Implicitly assigned profiles include parent profiles of other assigned profiles, profiles assigned via granted roles, profiles assigned via their own settings, and the main default profile (see the ",(0,r.kt)("inlineCode",{parentName:"p"},"default_profile")," section in the main server configuration file)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"enabledProfiles()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of the enabled settings profiles. ")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),")."),(0,r.kt)("h2",{id:"default-profiles"},"defaultProfiles"),(0,r.kt)("p",null,"Returns all the profiles specified at the current user's definition (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/create/user#create-user-statement"},"CREATE USER")," statement)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"defaultProfiles()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of the default settings profiles. ")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),")."),(0,r.kt)("h2",{id:"current-roles"},"currentRoles"),(0,r.kt)("p",null,"Returns the names of the roles which are current for the current user. The current roles can be changed by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/set-role#set-role-statement"},"SET ROLE")," statement. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"SET ROLE")," statement was not used, the function ",(0,r.kt)("inlineCode",{parentName:"p"},"currentRoles")," returns the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultRoles"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"currentRoles()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of the current roles for the current user. ")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),")."),(0,r.kt)("h2",{id:"enabled-roles"},"enabledRoles"),(0,r.kt)("p",null,"Returns the names of the current roles and the roles, granted to some of the current roles."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"enabledRoles()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of the enabled roles for the current user. ")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),")."),(0,r.kt)("h2",{id:"default-roles"},"defaultRoles"),(0,r.kt)("p",null,"Returns the names of the roles which are enabled by default for the current user when he logins. Initially these are all roles granted to the current user (see ",(0,r.kt)("a",{parentName:"p",href:"../../sql-reference/statements/grant/#grant-select"},"GRANT"),"), but that can be changed with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/statements/set-role#set-default-role-statement"},"SET DEFAULT ROLE")," statement. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"defaultRoles()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of the default roles for the current user. ")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),")."),(0,r.kt)("h2",{id:"getserverport"},"getServerPort"),(0,r.kt)("p",null,"Returns the number of the server port. When the port is not used by the server, throws an exception."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"getServerPort(port_name)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"port_name")," \u2014 The name of the server port. ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string#string"},"String"),". Possible values:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"'tcp_port'"),(0,r.kt)("li",{parentName:"ul"},"'tcp_port_secure'"),(0,r.kt)("li",{parentName:"ul"},"'http_port'"),(0,r.kt)("li",{parentName:"ul"},"'https_port'"),(0,r.kt)("li",{parentName:"ul"},"'interserver_http_port'"),(0,r.kt)("li",{parentName:"ul"},"'interserver_https_port'"),(0,r.kt)("li",{parentName:"ul"},"'mysql_port'"),(0,r.kt)("li",{parentName:"ul"},"'postgresql_port'"),(0,r.kt)("li",{parentName:"ul"},"'grpc_port'"),(0,r.kt)("li",{parentName:"ul"},"'prometheus.port'")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of the server port.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt16"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT getServerPort('tcp_port');\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500getServerPort('tcp_port')\u2500\u2510\n\u2502 9000                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"query-id"},"queryID"),(0,r.kt)("p",null,"Returns the ID of the current query. Other parameters of a query can be extracted from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/system-tables/query_log"},"system.query_log")," table via ",(0,r.kt)("inlineCode",{parentName:"p"},"query_id"),"."),(0,r.kt)("p",null,"In contrast to ",(0,r.kt)("a",{parentName:"p",href:"#initial-query-id"},"initialQueryID")," function, ",(0,r.kt)("inlineCode",{parentName:"p"},"queryID")," can return different results on different shards (see example)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"queryID()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ID of the current query.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE tmp (str String) ENGINE = Log;\nINSERT INTO tmp (*) VALUES ('a');\nSELECT count(DISTINCT t) FROM (SELECT queryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500count()\u2500\u2510\n\u2502 3       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"initial-query-id"},"initialQueryID"),(0,r.kt)("p",null,"Returns the ID of the initial current query. Other parameters of a query can be extracted from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/system-tables/query_log"},"system.query_log")," table via ",(0,r.kt)("inlineCode",{parentName:"p"},"initial_query_id"),"."),(0,r.kt)("p",null,"In contrast to ",(0,r.kt)("a",{parentName:"p",href:"#query-id"},"queryID")," function, ",(0,r.kt)("inlineCode",{parentName:"p"},"initialQueryID")," returns the same results on different shards (see example)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"initialQueryID()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ID of the initial current query.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE tmp (str String) ENGINE = Log;\nINSERT INTO tmp (*) VALUES ('a');\nSELECT count(DISTINCT t) FROM (SELECT initialQueryID() AS t FROM remote('127.0.0.{1..3}', currentDatabase(), 'tmp') GROUP BY queryID());\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500count()\u2500\u2510\n\u2502 1       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"shard-num"},"shardNum"),(0,r.kt)("p",null,"Returns the index of a shard which processes a part of data for a distributed query. Indices are started from ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),".\nIf a query is not distributed then constant value ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"shardNum()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Shard index or constant ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt32"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"In the following example a configuration with two shards is used. The query is executed on the ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/operations/system-tables/one"},"system.one")," table on every shard."),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE shard_num_example (dummy UInt8) \n    ENGINE=Distributed(test_cluster_two_shards_localhost, system, one, dummy);\nSELECT dummy, shardNum(), shardCount() FROM shard_num_example;\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500dummy\u2500\u252c\u2500shardNum()\u2500\u252c\u2500shardCount()\u2500\u2510\n\u2502     0 \u2502          2 \u2502            2 \u2502\n\u2502     0 \u2502          1 \u2502            2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/staging6/docs/en/engines/table-engines/special/distributed"},"Distributed Table Engine"))),(0,r.kt)("h2",{id:"shard-count"},"shardCount"),(0,r.kt)("p",null,"Returns the total number of shards for a distributed query.\nIf a query is not distributed then constant value ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"shardCount()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Total number of shards or ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt32"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See Also")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#shard-num"},"shardNum()")," function example also contains ",(0,r.kt)("inlineCode",{parentName:"li"},"shardCount()")," function call.")),(0,r.kt)("h2",{id:"getoskernelversion"},"getOSKernelVersion"),(0,r.kt)("p",null,"Returns a string with the current OS kernel version."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"getOSKernelVersion()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The current OS kernel version.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/string"},"String"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT getOSKernelVersion();\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500getOSKernelVersion()\u2500\u2500\u2500\u2500\u2510\n\u2502 Linux 4.15.0-55-generic \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.kt)("h2",{id:"zookeepersessionuptime"},"zookeeperSessionUptime"),(0,r.kt)("p",null,"Returns the uptime of the current ZooKeeper session in seconds."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"zookeeperSessionUptime()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Uptime of the current ZooKeeper session in seconds.")),(0,r.kt)("p",null,"Type: ",(0,r.kt)("a",{parentName:"p",href:"/docs/staging6/docs/en/sql-reference/data-types/int-uint"},"UInt32"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("p",null,"Query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT zookeeperSessionUptime();\n")),(0,r.kt)("p",null,"Result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500zookeeperSessionUptime()\u2500\u2510\n\u2502                      286 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}c.isMDXComponent=!0}}]);