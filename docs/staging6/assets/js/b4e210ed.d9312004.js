"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[56824],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return g}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,D=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return t?r.createElement(D,o(o({ref:n},c),{},{components:t})):r.createElement(D,o({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},79319:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],l={sidebar_label:"OnTime Airline Flight Data",description:"Dataset containing the on-time performance of airline flights"},s="OnTime",p={unversionedId:"en/example-datasets/ontime",id:"en/example-datasets/ontime",title:"OnTime",description:"Dataset containing the on-time performance of airline flights",source:"@site/docs/en/example-datasets/ontime.md",sourceDirName:"en/example-datasets",slug:"/en/example-datasets/ontime",permalink:"/docs/staging6/docs/en/example-datasets/ontime",tags:[],version:"current",frontMatter:{sidebar_label:"OnTime Airline Flight Data",description:"Dataset containing the on-time performance of airline flights"},sidebar:"tutorialSidebar",previous:{title:"New York Taxi Data",permalink:"/docs/staging6/docs/en/example-datasets/nyc-taxi"},next:{title:"Air Traffic Data",permalink:"/docs/staging6/docs/en/example-datasets/opensky"}},c={},m=[{value:"Import from Raw Data",id:"import-from-raw-data",level:2},{value:"Download of Prepared Partitions",id:"download-of-prepared-partitions",level:2},{value:"Queries",id:"queries",level:2}],u={toc:m};function g(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ontime"},"OnTime"),(0,i.kt)("p",null,"This dataset can be obtained in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"import from raw data"),(0,i.kt)("li",{parentName:"ul"},"download of prepared partitions")),(0,i.kt)("h2",{id:"import-from-raw-data"},"Import from Raw Data"),(0,i.kt)("p",null,"Downloading data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wget --no-check-certificate --continue https://transtats.bts.gov/PREZIP/On_Time_Reporting_Carrier_On_Time_Performance_1987_present_{1987..2021}_{1..12}.zip\n")),(0,i.kt)("p",null,"Creating a table:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE `ontime`\n(\n    `Year`                            UInt16,\n    `Quarter`                         UInt8,\n    `Month`                           UInt8,\n    `DayofMonth`                      UInt8,\n    `DayOfWeek`                       UInt8,\n    `FlightDate`                      Date,\n    `Reporting_Airline`               String,\n    `DOT_ID_Reporting_Airline`        Int32,\n    `IATA_CODE_Reporting_Airline`     String,\n    `Tail_Number`                     String,\n    `Flight_Number_Reporting_Airline` String,\n    `OriginAirportID`                 Int32,\n    `OriginAirportSeqID`              Int32,\n    `OriginCityMarketID`              Int32,\n    `Origin`                          FixedString(5),\n    `OriginCityName`                  String,\n    `OriginState`                     FixedString(2),\n    `OriginStateFips`                 String,\n    `OriginStateName`                 String,\n    `OriginWac`                       Int32,\n    `DestAirportID`                   Int32,\n    `DestAirportSeqID`                Int32,\n    `DestCityMarketID`                Int32,\n    `Dest`                            FixedString(5),\n    `DestCityName`                    String,\n    `DestState`                       FixedString(2),\n    `DestStateFips`                   String,\n    `DestStateName`                   String,\n    `DestWac`                         Int32,\n    `CRSDepTime`                      Int32,\n    `DepTime`                         Int32,\n    `DepDelay`                        Int32,\n    `DepDelayMinutes`                 Int32,\n    `DepDel15`                        Int32,\n    `DepartureDelayGroups`            String,\n    `DepTimeBlk`                      String,\n    `TaxiOut`                         Int32,\n    `WheelsOff`                       Int32,\n    `WheelsOn`                        Int32,\n    `TaxiIn`                          Int32,\n    `CRSArrTime`                      Int32,\n    `ArrTime`                         Int32,\n    `ArrDelay`                        Int32,\n    `ArrDelayMinutes`                 Int32,\n    `ArrDel15`                        Int32,\n    `ArrivalDelayGroups`              Int32,\n    `ArrTimeBlk`                      String,\n    `Cancelled`                       UInt8,\n    `CancellationCode`                FixedString(1),\n    `Diverted`                        UInt8,\n    `CRSElapsedTime`                  Int32,\n    `ActualElapsedTime`               Int32,\n    `AirTime`                         Nullable(Int32),\n    `Flights`                         Int32,\n    `Distance`                        Int32,\n    `DistanceGroup`                   UInt8,\n    `CarrierDelay`                    Int32,\n    `WeatherDelay`                    Int32,\n    `NASDelay`                        Int32,\n    `SecurityDelay`                   Int32,\n    `LateAircraftDelay`               Int32,\n    `FirstDepTime`                    String,\n    `TotalAddGTime`                   String,\n    `LongestAddGTime`                 String,\n    `DivAirportLandings`              String,\n    `DivReachedDest`                  String,\n    `DivActualElapsedTime`            String,\n    `DivArrDelay`                     String,\n    `DivDistance`                     String,\n    `Div1Airport`                     String,\n    `Div1AirportID`                   Int32,\n    `Div1AirportSeqID`                Int32,\n    `Div1WheelsOn`                    String,\n    `Div1TotalGTime`                  String,\n    `Div1LongestGTime`                String,\n    `Div1WheelsOff`                   String,\n    `Div1TailNum`                     String,\n    `Div2Airport`                     String,\n    `Div2AirportID`                   Int32,\n    `Div2AirportSeqID`                Int32,\n    `Div2WheelsOn`                    String,\n    `Div2TotalGTime`                  String,\n    `Div2LongestGTime`                String,\n    `Div2WheelsOff`                   String,\n    `Div2TailNum`                     String,\n    `Div3Airport`                     String,\n    `Div3AirportID`                   Int32,\n    `Div3AirportSeqID`                Int32,\n    `Div3WheelsOn`                    String,\n    `Div3TotalGTime`                  String,\n    `Div3LongestGTime`                String,\n    `Div3WheelsOff`                   String,\n    `Div3TailNum`                     String,\n    `Div4Airport`                     String,\n    `Div4AirportID`                   Int32,\n    `Div4AirportSeqID`                Int32,\n    `Div4WheelsOn`                    String,\n    `Div4TotalGTime`                  String,\n    `Div4LongestGTime`                String,\n    `Div4WheelsOff`                   String,\n    `Div4TailNum`                     String,\n    `Div5Airport`                     String,\n    `Div5AirportID`                   Int32,\n    `Div5AirportSeqID`                Int32,\n    `Div5WheelsOn`                    String,\n    `Div5TotalGTime`                  String,\n    `Div5LongestGTime`                String,\n    `Div5WheelsOff`                   String,\n    `Div5TailNum`                     String\n) ENGINE = MergeTree\n      PARTITION BY Year\n      ORDER BY (IATA_CODE_Reporting_Airline, FlightDate)\n      SETTINGS index_granularity = 8192;\n")),(0,i.kt)("p",null,"Loading data with multiple threads:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ls -1 *.zip | xargs -I{} -P $(nproc) bash -c \"echo {}; unzip -cq {} '*.csv' | sed 's/\\.00//g' | clickhouse-client --input_format_with_names_use_header=0 --query='INSERT INTO ontime FORMAT CSVWithNames'\"\n")),(0,i.kt)("p",null,"(if you will have memory shortage or other issues on your server, remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"-P $(nproc)")," part)"),(0,i.kt)("h2",{id:"download-of-prepared-partitions"},"Download of Prepared Partitions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl -O https://datasets.clickhouse.com/ontime/partitions/ontime.tar\n$ tar xvf ontime.tar -C /var/lib/clickhouse # path to ClickHouse data directory\n$ # check permissions of unpacked data, fix if required\n$ sudo service clickhouse-server restart\n$ clickhouse-client --query "select count(*) from datasets.ontime"\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you will run the queries described below, you have to use the full table name, ",(0,i.kt)("inlineCode",{parentName:"p"},"datasets.ontime"),"."))),(0,i.kt)("h2",{id:"queries"},"Queries"),(0,i.kt)("p",null,"Q0."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT avg(c1)\nFROM\n(\n    SELECT Year, Month, count(*) AS c1\n    FROM ontime\n    GROUP BY Year, Month\n);\n")),(0,i.kt)("p",null,"Q1. The number of flights per day from the year 2000 to 2008"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DayOfWeek, count(*) AS c\nFROM ontime\nWHERE Year>=2000 AND Year<=2008\nGROUP BY DayOfWeek\nORDER BY c DESC;\n")),(0,i.kt)("p",null,"Q2. The number of flights delayed by more than 10 minutes, grouped by the day of the week, for 2000-2008"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DayOfWeek, count(*) AS c\nFROM ontime\nWHERE DepDelay>10 AND Year>=2000 AND Year<=2008\nGROUP BY DayOfWeek\nORDER BY c DESC;\n")),(0,i.kt)("p",null,"Q3. The number of delays by the airport for 2000-2008"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Origin, count(*) AS c\nFROM ontime\nWHERE DepDelay>10 AND Year>=2000 AND Year<=2008\nGROUP BY Origin\nORDER BY c DESC\nLIMIT 10;\n")),(0,i.kt)("p",null,"Q4. The number of delays by carrier for 2007"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT IATA_CODE_Reporting_Airline AS Carrier, count(*)\nFROM ontime\nWHERE DepDelay>10 AND Year=2007\nGROUP BY Carrier\nORDER BY count(*) DESC;\n")),(0,i.kt)("p",null,"Q5. The percentage of delays by carrier for 2007"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Carrier, c, c2, c*100/c2 as c3\nFROM\n(\n    SELECT\n        IATA_CODE_Reporting_Airline AS Carrier,\n        count(*) AS c\n    FROM ontime\n    WHERE DepDelay>10\n        AND Year=2007\n    GROUP BY Carrier\n) q\nJOIN\n(\n    SELECT\n        IATA_CODE_Reporting_Airline AS Carrier,\n        count(*) AS c2\n    FROM ontime\n    WHERE Year=2007\n    GROUP BY Carrier\n) qq USING Carrier\nORDER BY c3 DESC;\n")),(0,i.kt)("p",null,"Better version of the same query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT IATA_CODE_Reporting_Airline AS Carrier, avg(DepDelay>10)*100 AS c3\nFROM ontime\nWHERE Year=2007\nGROUP BY Carrier\nORDER BY c3 DESC\n")),(0,i.kt)("p",null,"Q6. The previous request for a broader range of years, 2000-2008"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Carrier, c, c2, c*100/c2 as c3\nFROM\n(\n    SELECT\n        IATA_CODE_Reporting_Airline AS Carrier,\n        count(*) AS c\n    FROM ontime\n    WHERE DepDelay>10\n        AND Year>=2000 AND Year<=2008\n    GROUP BY Carrier\n) q\nJOIN\n(\n    SELECT\n        IATA_CODE_Reporting_Airline AS Carrier,\n        count(*) AS c2\n    FROM ontime\n    WHERE Year>=2000 AND Year<=2008\n    GROUP BY Carrier\n) qq USING Carrier\nORDER BY c3 DESC;\n")),(0,i.kt)("p",null,"Better version of the same query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT IATA_CODE_Reporting_Airline AS Carrier, avg(DepDelay>10)*100 AS c3\nFROM ontime\nWHERE Year>=2000 AND Year<=2008\nGROUP BY Carrier\nORDER BY c3 DESC;\n")),(0,i.kt)("p",null,"Q7. Percentage of flights delayed for more than 10 minutes, by year"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Year, c1/c2\nFROM\n(\n    select\n        Year,\n        count(*)*100 as c1\n    from ontime\n    WHERE DepDelay>10\n    GROUP BY Year\n) q\nJOIN\n(\n    select\n        Year,\n        count(*) as c2\n    from ontime\n    GROUP BY Year\n) qq USING (Year)\nORDER BY Year;\n")),(0,i.kt)("p",null,"Better version of the same query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Year, avg(DepDelay>10)*100\nFROM ontime\nGROUP BY Year\nORDER BY Year;\n")),(0,i.kt)("p",null,"Q8. The most popular destinations by the number of directly connected cities for various year ranges"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DestCityName, uniqExact(OriginCityName) AS u\nFROM ontime\nWHERE Year >= 2000 and Year <= 2010\nGROUP BY DestCityName\nORDER BY u DESC LIMIT 10;\n")),(0,i.kt)("p",null,"Q9."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Year, count(*) AS c1\nFROM ontime\nGROUP BY Year;\n")),(0,i.kt)("p",null,"Q10."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n   min(Year), max(Year), IATA_CODE_Reporting_Airline AS Carrier, count(*) AS cnt,\n   sum(ArrDelayMinutes>30) AS flights_delayed,\n   round(sum(ArrDelayMinutes>30)/count(*),2) AS rate\nFROM ontime\nWHERE\n   DayOfWeek NOT IN (6,7) AND OriginState NOT IN ('AK', 'HI', 'PR', 'VI')\n   AND DestState NOT IN ('AK', 'HI', 'PR', 'VI')\n   AND FlightDate < '2010-01-01'\nGROUP by Carrier\nHAVING cnt>100000 and max(Year)>1990\nORDER by rate DESC\nLIMIT 1000;\n")),(0,i.kt)("p",null,"Bonus:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT avg(cnt)\nFROM\n(\n    SELECT Year,Month,count(*) AS cnt\n    FROM ontime\n    WHERE DepDel15=1\n    GROUP BY Year,Month\n);\n\nSELECT avg(c1) FROM\n(\n    SELECT Year,Month,count(*) AS c1\n    FROM ontime\n    GROUP BY Year,Month\n);\n\nSELECT DestCityName, uniqExact(OriginCityName) AS u\nFROM ontime\nGROUP BY DestCityName\nORDER BY u DESC\nLIMIT 10;\n\nSELECT OriginCityName, DestCityName, count() AS c\nFROM ontime\nGROUP BY OriginCityName, DestCityName\nORDER BY c DESC\nLIMIT 10;\n\nSELECT OriginCityName, count() AS c\nFROM ontime\nGROUP BY OriginCityName\nORDER BY c DESC\nLIMIT 10;\n")),(0,i.kt)("p",null,"You can also play with the data in Playground, ",(0,i.kt)("a",{parentName:"p",href:"https://gh-api.clickhouse.com/play?user=play#U0VMRUNUIERheU9mV2VlaywgY291bnQoKikgQVMgYwpGUk9NIG9udGltZQpXSEVSRSBZZWFyPj0yMDAwIEFORCBZZWFyPD0yMDA4CkdST1VQIEJZIERheU9mV2VlawpPUkRFUiBCWSBjIERFU0M7Cg=="},"example"),"."),(0,i.kt)("p",null,"This performance test was created by Vadim Tkachenko. See:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.percona.com/blog/2009/10/02/analyzing-air-traffic-performance-with-infobright-and-monetdb/"},"https://www.percona.com/blog/2009/10/02/analyzing-air-traffic-performance-with-infobright-and-monetdb/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.percona.com/blog/2009/10/26/air-traffic-queries-in-luciddb/"},"https://www.percona.com/blog/2009/10/26/air-traffic-queries-in-luciddb/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.percona.com/blog/2009/11/02/air-traffic-queries-in-infinidb-early-alpha/"},"https://www.percona.com/blog/2009/11/02/air-traffic-queries-in-infinidb-early-alpha/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.percona.com/blog/2014/04/21/using-apache-hadoop-and-impala-together-with-mysql-for-data-analysis/"},"https://www.percona.com/blog/2014/04/21/using-apache-hadoop-and-impala-together-with-mysql-for-data-analysis/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.percona.com/blog/2016/01/07/apache-spark-with-air-ontime-performance-data/"},"https://www.percona.com/blog/2016/01/07/apache-spark-with-air-ontime-performance-data/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://nickmakos.blogspot.ru/2012/08/analyzing-air-traffic-performance-with.html"},"http://nickmakos.blogspot.ru/2012/08/analyzing-air-traffic-performance-with.html"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/getting_started/example_datasets/ontime/"},"Original article")," "))}g.isMDXComponent=!0}}]);