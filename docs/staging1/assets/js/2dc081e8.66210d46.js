"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[85856],{3905:function(e,t,n){n.d(t,{Zo:function(){return g},kt:function(){return k}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),o=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=o(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),c=o(n),k=r,m=c["".concat(i,".").concat(k)]||c[k]||u[k]||s;return n?a.createElement(m,l(l({ref:t},g),{},{components:n})):a.createElement(m,l({ref:t},g))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=c;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var o=2;o<s;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},95687:function(e,t,n){n.r(t),n.d(t,{assets:function(){return g},contentTitle:function(){return i},default:function(){return k},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return u}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),l=["components"],p={sidebar_position:47,sidebar_label:"Splitting and Merging Strings and Arrays"},i="Functions for Splitting and Merging Strings and Arrays",o={unversionedId:"en/sql-reference/functions/splitting-merging-functions",id:"en/sql-reference/functions/splitting-merging-functions",title:"Functions for Splitting and Merging Strings and Arrays",description:"functions-for-splitting-and-merging-strings-and-arrays}",source:"@site/docs/en/sql-reference/functions/splitting-merging-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/splitting-merging-functions",permalink:"/docs/staging1/docs/en/sql-reference/functions/splitting-merging-functions",tags:[],version:"current",sidebarPosition:47,frontMatter:{sidebar_position:47,sidebar_label:"Splitting and Merging Strings and Arrays"},sidebar:"tutorialSidebar",previous:{title:"Working with maps",permalink:"/docs/staging1/docs/en/sql-reference/functions/tuple-map-functions"},next:{title:"Bit",permalink:"/docs/staging1/docs/en/sql-reference/functions/bit-functions"}},g={},u=[{value:"splitByChar(separator, s)",id:"splitbycharseparator-s",level:2},{value:"splitByString(separator, s)",id:"splitbystringseparator-s",level:2},{value:"splitByRegexp(regexp, s)",id:"splitbyregexpseparator-s",level:2},{value:"splitByWhitespace(s)",id:"splitbywhitespaceseparator-s",level:2},{value:"splitByNonAlpha(s)",id:"splitbynonalphaseparator-s",level:2},{value:"arrayStringConcat(arr[, separator])",id:"arraystringconcatarr-separator",level:2},{value:"alphaTokens(s)",id:"alphatokenss",level:2},{value:"extractAllGroups(text, regexp)",id:"extractallgroups",level:2},{value:"ngrams",id:"ngrams",level:2},{value:"tokens",id:"tokens",level:2}],c={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"functions-for-splitting-and-merging-strings-and-arrays"},"Functions for Splitting and Merging Strings and Arrays"),(0,s.kt)("h2",{id:"splitbycharseparator-s"},"splitByChar(separator, s)"),(0,s.kt)("p",null,"Splits a string into substrings separated by a specified character. It uses a constant string ",(0,s.kt)("inlineCode",{parentName:"p"},"separator")," which consisting of exactly one character.\nReturns an array of selected substrings. Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"splitByChar(separator, s)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"separator")," \u2014 The separator which should contain exactly one character. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," \u2014 The string to split. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,s.kt)("p",null,"Returns an array of selected substrings. Empty substrings may be selected when:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A separator occurs at the beginning or end of the string;"),(0,s.kt)("li",{parentName:"ul"},"There are multiple consecutive separators;"),(0,s.kt)("li",{parentName:"ul"},"The original string ",(0,s.kt)("inlineCode",{parentName:"li"},"s")," is empty.")),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),")."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByChar(',', '1,2,3,abcde');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByChar(',', '1,2,3,abcde')\u2500\u2510\n\u2502 ['1','2','3','abcde']           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"splitbystringseparator-s"},"splitByString(separator, s)"),(0,s.kt)("p",null,"Splits a string into substrings separated by a string. It uses a constant string ",(0,s.kt)("inlineCode",{parentName:"p"},"separator")," of multiple characters as the separator. If the string ",(0,s.kt)("inlineCode",{parentName:"p"},"separator")," is empty, it will split the string ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," into an array of single characters."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"splitByString(separator, s)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"separator")," \u2014 The separator. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," \u2014 The string to split. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,s.kt)("p",null,"Returns an array of selected substrings. Empty substrings may be selected when:"),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),")."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A non-empty separator occurs at the beginning or end of the string;"),(0,s.kt)("li",{parentName:"ul"},"There are multiple consecutive non-empty separators;"),(0,s.kt)("li",{parentName:"ul"},"The original string ",(0,s.kt)("inlineCode",{parentName:"li"},"s")," is empty while the separator is not empty.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByString(', ', '1, 2 3, 4,5, abcde');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByString(', ', '1, 2 3, 4,5, abcde')\u2500\u2510\n\u2502 ['1','2 3','4,5','abcde']                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByString('', 'abcde');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByString('', 'abcde')\u2500\u2510\n\u2502 ['a','b','c','d','e']      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"splitbyregexpseparator-s"},"splitByRegexp(regexp, s)"),(0,s.kt)("p",null,"Splits a string into substrings separated by a regular expression. It uses a regular expression string ",(0,s.kt)("inlineCode",{parentName:"p"},"regexp")," as the separator. If the ",(0,s.kt)("inlineCode",{parentName:"p"},"regexp")," is empty, it will split the string ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," into an array of single characters. If no match is found for this regular expression, the string ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," won't be split."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"splitByRegexp(regexp, s)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"regexp")," \u2014 Regular expression. Constant. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String")," or ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," \u2014 The string to split. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,s.kt)("p",null,"Returns an array of selected substrings. Empty substrings may be selected when:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A non-empty regular expression match occurs at the beginning or end of the string;"),(0,s.kt)("li",{parentName:"ul"},"There are multiple consecutive non-empty regular expression matches;"),(0,s.kt)("li",{parentName:"ul"},"The original string ",(0,s.kt)("inlineCode",{parentName:"li"},"s")," is empty while the regular expression is not empty.")),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),")."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByRegexp('\\\\d+', 'a12bc23de345f');\n")),(0,s.kt)("p",null,"Result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByRegexp('\\\\d+', 'a12bc23de345f')\u2500\u2510\n\u2502 ['a','bc','de','f']                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByRegexp('', 'abcde');\n")),(0,s.kt)("p",null,"Result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByRegexp('', 'abcde')\u2500\u2510\n\u2502 ['a','b','c','d','e']      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"splitbywhitespaceseparator-s"},"splitByWhitespace(s)"),(0,s.kt)("p",null,"Splits a string into substrings separated by whitespace characters.\nReturns an array of selected substrings."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"splitByWhitespace(s)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," \u2014 The string to split. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,s.kt)("p",null,"Returns an array of selected substrings."),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),")."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByWhitespace('  1!  a,  b.  ');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByWhitespace('  1!  a,  b.  ')\u2500\u2510\n\u2502 ['1!','a,','b.']                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"splitbynonalphaseparator-s"},"splitByNonAlpha(s)"),(0,s.kt)("p",null,"Splits a string into substrings separated by whitespace and punctuation characters.\nReturns an array of selected substrings."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"splitByNonAlpha(s)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," \u2014 The string to split. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned value(s)")),(0,s.kt)("p",null,"Returns an array of selected substrings."),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),")."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT splitByNonAlpha('  1!  a,  b.  ');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500splitByNonAlpha('  1!  a,  b.  ')\u2500\u2510\n\u2502 ['1','a','b']                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"arraystringconcatarr-separator"},"arrayStringConcat(arr","[",", separator","]",")"),(0,s.kt)("p",null,"Concatenates string representations of values listed in the array with the separator. ",(0,s.kt)("inlineCode",{parentName:"p"},"separator")," is an optional parameter: a constant string, set to an empty string by default.\nReturns the string."),(0,s.kt)("h2",{id:"alphatokenss"},"alphaTokens(s)"),(0,s.kt)("p",null,"Selects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT alphaTokens('abca1abc');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500alphaTokens('abca1abc')\u2500\u2510\n\u2502 ['abca','abc']          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"extractallgroups"},"extractAllGroups(text, regexp)"),(0,s.kt)("p",null,"Extracts all groups from non-overlapping substrings matched by a regular expression."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"extractAllGroups(text, regexp)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"text")," \u2014 ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String")," or ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"regexp")," \u2014 Regular expression. Constant. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String")," or ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned values")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"If the function finds at least one matching group, it returns ",(0,s.kt)("inlineCode",{parentName:"p"},"Array(Array(String))")," column, clustered by group_id (1 to N, where N is number of capturing groups in ",(0,s.kt)("inlineCode",{parentName:"p"},"regexp"),").")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"If there is no matching group, returns an empty array."))),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT extractAllGroups(\'abc=123, 8="hkl"\', \'("[^"]+"|\\\\w+)=("[^"]+"|\\\\w+)\');\n')),(0,s.kt)("p",null,"Result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500extractAllGroups('abc=123, 8=\"hkl\"', '(\"[^\"]+\"|\\\\w+)=(\"[^\"]+\"|\\\\w+)')\u2500\u2510\n\u2502 [['abc','123'],['8','\"hkl\"']]                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"ngrams"},"ngrams"),(0,s.kt)("p",null,"Splits the UTF-8 string into n-grams of ",(0,s.kt)("inlineCode",{parentName:"p"},"ngramsize")," symbols."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Syntax")," "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"ngrams(string, ngramsize)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"string")," \u2014 String. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String")," or ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/fixedstring"},"FixedString"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ngramsize")," \u2014 The size of an n-gram. ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/int-uint"},"UInt"),".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned values")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Array with n-grams.")),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"(",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String"),")."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ngrams('ClickHouse', 3);\n")),(0,s.kt)("p",null,"Result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500ngrams('ClickHouse', 3)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['Cli','lic','ick','ckH','kHo','Hou','ous','use'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,s.kt)("h2",{id:"tokens"},"tokens"),(0,s.kt)("p",null,"Splits a string into tokens using non-alphanumeric ASCII characters as separators."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"input_string")," \u2014 Any set of bytes represented as the ",(0,s.kt)("a",{parentName:"li",href:"/docs/staging1/docs/en/sql-reference/data-types/string"},"String")," data type object.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returned value")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The resulting array of tokens from input string.")),(0,s.kt)("p",null,"Type: ",(0,s.kt)("a",{parentName:"p",href:"/docs/staging1/docs/en/sql-reference/data-types/array"},"Array"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tokens('test1,;\\\\ test2,;\\\\ test3,;\\\\   test4') AS tokens;\n")),(0,s.kt)("p",null,"Result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500tokens\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['test1','test2','test3','test4'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}k.isMDXComponent=!0}}]);