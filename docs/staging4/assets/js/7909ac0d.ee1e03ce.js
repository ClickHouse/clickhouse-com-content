"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[49903],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return d}});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),o=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},u=function(e){var a=o(e.components);return n.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=o(t),d=r,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return t?n.createElement(k,s(s({ref:a},u),{},{components:t})):n.createElement(k,s({ref:a},u))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=c;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var o=2;o<l;o++)s[o]=t[o];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},95789:function(e,a,t){t.r(a),t.d(a,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return m}});var n=t(87462),r=t(63366),l=(t(67294),t(3905)),s=["components"],i={sidebar_position:35,sidebar_label:"Arrays"},p="Array Functions",o={unversionedId:"en/sql-reference/functions/array-functions",id:"en/sql-reference/functions/array-functions",title:"Array Functions",description:"functions-for-working-with-arrays}",source:"@site/docs/en/sql-reference/functions/array-functions.md",sourceDirName:"en/sql-reference/functions",slug:"/en/sql-reference/functions/array-functions",permalink:"/docs/staging/docs/en/sql-reference/functions/array-functions",tags:[],version:"current",sidebarPosition:35,frontMatter:{sidebar_position:35,sidebar_label:"Arrays"},sidebar:"tutorialSidebar",previous:{title:"Arithmetic",permalink:"/docs/staging/docs/en/sql-reference/functions/arithmetic-functions"},next:{title:"Comparison",permalink:"/docs/staging/docs/en/sql-reference/functions/comparison-functions"}},u={},m=[{value:"empty",id:"function-empty",level:2},{value:"notEmpty",id:"function-notempty",level:2},{value:"length",id:"array_functions-length",level:2},{value:"emptyArrayUInt8, emptyArrayUInt16, emptyArrayUInt32, emptyArrayUInt64",id:"emptyarrayuint8-emptyarrayuint16-emptyarrayuint32-emptyarrayuint64",level:2},{value:"emptyArrayInt8, emptyArrayInt16, emptyArrayInt32, emptyArrayInt64",id:"emptyarrayint8-emptyarrayint16-emptyarrayint32-emptyarrayint64",level:2},{value:"emptyArrayFloat32, emptyArrayFloat64",id:"emptyarrayfloat32-emptyarrayfloat64",level:2},{value:"emptyArrayDate, emptyArrayDateTime",id:"emptyarraydate-emptyarraydatetime",level:2},{value:"emptyArrayString",id:"emptyarraystring",level:2},{value:"emptyArrayToSingle",id:"emptyarraytosingle",level:2},{value:"range(end), range([start, ] end [, step])",id:"range",level:2},{value:"array(x1, \u2026), operator [x1, \u2026]",id:"arrayx1-operator-x1",level:2},{value:"arrayConcat",id:"arrayconcat",level:2},{value:"arrayElement(arr, n), operator arr[n]",id:"arrayelementarr-n-operator-arrn",level:2},{value:"has(arr, elem)",id:"hasarr-elem",level:2},{value:"hasAll",id:"hasall",level:2},{value:"hasAny",id:"hasany",level:2},{value:"hasSubstr",id:"hassubstr",level:2},{value:"indexOf(arr, x)",id:"indexofarr-x",level:2},{value:"arrayCount([func,] arr1, \u2026)",id:"array-count",level:2},{value:"countEqual(arr, x)",id:"countequalarr-x",level:2},{value:"arrayEnumerate(arr)",id:"array_functions-arrayenumerate",level:2},{value:"arrayEnumerateUniq(arr, \u2026)",id:"arrayenumerateuniqarr",level:2},{value:"arrayPopBack",id:"arraypopback",level:2},{value:"arrayPopFront",id:"arraypopfront",level:2},{value:"arrayPushBack",id:"arraypushback",level:2},{value:"arrayPushFront",id:"arraypushfront",level:2},{value:"arrayResize",id:"arrayresize",level:2},{value:"arraySlice",id:"arrayslice",level:2},{value:"arraySort([func,] arr, \u2026)",id:"array_functions-sort",level:2},{value:"arrayReverseSort([func,] arr, \u2026)",id:"array_functions-reverse-sort",level:2},{value:"arrayUniq(arr, \u2026)",id:"arrayuniqarr",level:2},{value:"arrayJoin(arr)",id:"array-functions-join",level:2},{value:"arrayDifference",id:"arraydifference",level:2},{value:"arrayDistinct",id:"arraydistinct",level:2},{value:"arrayEnumerateDense(arr)",id:"array_functions-arrayenumeratedense",level:2},{value:"arrayIntersect(arr)",id:"array-functions-arrayintersect",level:2},{value:"arrayReduce",id:"arrayreduce",level:2},{value:"arrayReduceInRanges",id:"arrayreduceinranges",level:2},{value:"arrayReverse(arr)",id:"arrayreverse",level:2},{value:"reverse(arr)",id:"array-functions-reverse",level:2},{value:"arrayFlatten",id:"arrayflatten",level:2},{value:"arrayCompact",id:"arraycompact",level:2},{value:"arrayZip",id:"arrayzip",level:2},{value:"arrayAUC",id:"arrayauc",level:2},{value:"arrayMap(func, arr1, \u2026)",id:"array-map",level:2},{value:"arrayFilter(func, arr1, \u2026)",id:"array-filter",level:2},{value:"arrayFill(func, arr1, \u2026)",id:"array-fill",level:2},{value:"arrayReverseFill(func, arr1, \u2026)",id:"array-reverse-fill",level:2},{value:"arraySplit(func, arr1, \u2026)",id:"array-split",level:2},{value:"arrayReverseSplit(func, arr1, \u2026)",id:"array-reverse-split",level:2},{value:"arrayExists([func,] arr1, \u2026)",id:"arrayexistsfunc-arr1",level:2},{value:"arrayAll([func,] arr1, \u2026)",id:"arrayallfunc-arr1",level:2},{value:"arrayFirst(func, arr1, \u2026)",id:"array-first",level:2},{value:"arrayLast(func, arr1, \u2026)",id:"array-last",level:2},{value:"arrayFirstIndex(func, arr1, \u2026)",id:"array-first-index",level:2},{value:"arrayLastIndex(func, arr1, \u2026)",id:"array-last-index",level:2},{value:"arrayMin",id:"array-min",level:2},{value:"arrayMax",id:"array-max",level:2},{value:"arraySum",id:"array-sum",level:2},{value:"arrayAvg",id:"array-avg",level:2},{value:"arrayCumSum([func,] arr1, \u2026)",id:"arraycumsumfunc-arr1",level:2},{value:"arrayCumSumNonNegative(arr)",id:"arraycumsumnonnegativearr",level:2},{value:"arrayProduct",id:"arrayproduct",level:2}],c={toc:m};function d(e){var a=e.components,t=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"functions-for-working-with-arrays"},"Array Functions"),(0,l.kt)("h2",{id:"function-empty"},"empty"),(0,l.kt)("p",null,"Checks whether the input array is empty."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"empty([x])\n")),(0,l.kt)("p",null,"An array is considered empty if it does not contain any elements."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Can be optimized by enabling the ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/operations/settings/#optimize-functions-to-subcolumns"},"optimize_functions_to_subcolumns")," setting. With ",(0,l.kt)("inlineCode",{parentName:"p"},"optimize_functions_to_subcolumns = 1")," the function reads only ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array#array-size"},"size0")," subcolumn instead of reading and processing the whole array column. The query ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT empty(arr) FROM TABLE;")," transforms to ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT arr.size0 = 0 FROM TABLE;"),"."))),(0,l.kt)("p",null,"The function also works for ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/string-functions#empty"},"strings")," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/uuid-functions#empty"},"UUID"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[x]")," \u2014 Input array. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," for an empty array or ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," for a non-empty array.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT empty([]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500empty(array())\u2500\u2510\n\u2502              1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"function-notempty"},"notEmpty"),(0,l.kt)("p",null,"Checks whether the input array is non-empty."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"notEmpty([x])\n")),(0,l.kt)("p",null,"An array is considered non-empty if it contains at least one element."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Can be optimized by enabling the ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/operations/settings/#optimize-functions-to-subcolumns"},"optimize_functions_to_subcolumns")," setting. With ",(0,l.kt)("inlineCode",{parentName:"p"},"optimize_functions_to_subcolumns = 1")," the function reads only ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array#array-size"},"size0")," subcolumn instead of reading and processing the whole array column. The query ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT notEmpty(arr) FROM table")," transforms to ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT arr.size0 != 0 FROM TABLE"),"."))),(0,l.kt)("p",null,"The function also works for ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/string-functions#notempty"},"strings")," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/uuid-functions#notempty"},"UUID"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[x]")," \u2014 Input array. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Returns ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," for a non-empty array or ",(0,l.kt)("inlineCode",{parentName:"li"},"0")," for an empty array.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"UInt8"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT notEmpty([1,2]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500notEmpty([1, 2])\u2500\u2510\n\u2502                1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array_functions-length"},"length"),(0,l.kt)("p",null,"Returns the number of items in the array.\nThe result type is UInt64.\nThe function also works for strings."),(0,l.kt)("p",null,"Can be optimized by enabling the ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/operations/settings/#optimize-functions-to-subcolumns"},"optimize_functions_to_subcolumns")," setting. With ",(0,l.kt)("inlineCode",{parentName:"p"},"optimize_functions_to_subcolumns = 1")," the function reads only ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array#array-size"},"size0")," subcolumn instead of reading and processing the whole array column. The query ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT length(arr) FROM table")," transforms to ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT arr.size0 FROM TABLE"),"."),(0,l.kt)("h2",{id:"emptyarrayuint8-emptyarrayuint16-emptyarrayuint32-emptyarrayuint64"},"emptyArrayUInt8, emptyArrayUInt16, emptyArrayUInt32, emptyArrayUInt64"),(0,l.kt)("h2",{id:"emptyarrayint8-emptyarrayint16-emptyarrayint32-emptyarrayint64"},"emptyArrayInt8, emptyArrayInt16, emptyArrayInt32, emptyArrayInt64"),(0,l.kt)("h2",{id:"emptyarrayfloat32-emptyarrayfloat64"},"emptyArrayFloat32, emptyArrayFloat64"),(0,l.kt)("h2",{id:"emptyarraydate-emptyarraydatetime"},"emptyArrayDate, emptyArrayDateTime"),(0,l.kt)("h2",{id:"emptyarraystring"},"emptyArrayString"),(0,l.kt)("p",null,"Accepts zero arguments and returns an empty array of the appropriate type."),(0,l.kt)("h2",{id:"emptyarraytosingle"},"emptyArrayToSingle"),(0,l.kt)("p",null,"Accepts an empty array and returns a one-element array that is equal to the default value."),(0,l.kt)("h2",{id:"range"},"range(end), range(","[","start, ","]"," end ","[",", step","]",")"),(0,l.kt)("p",null,"Returns an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt")," numbers from ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"end - 1")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"step"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"range([start, ] end [, step])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"start")," \u2014 The first element of the array. Optional, required if ",(0,l.kt)("inlineCode",{parentName:"li"},"step")," is used. Default value: 0. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"UInt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"end")," \u2014 The number before which the array is constructed. Required. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"UInt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"step")," \u2014 Determines the incremental step between each element in the array. Optional. Default value: 1. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"UInt"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Array of ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt")," numbers from ",(0,l.kt)("inlineCode",{parentName:"li"},"start")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"end - 1")," by ",(0,l.kt)("inlineCode",{parentName:"li"},"step"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Implementation details")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"All arguments must be positive values: ",(0,l.kt)("inlineCode",{parentName:"li"},"start"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"end"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"step")," are ",(0,l.kt)("inlineCode",{parentName:"li"},"UInt")," data types, as well as elements of the returned array."),(0,l.kt)("li",{parentName:"ul"},"An exception is thrown if query results in arrays with a total length of more than number of elements specified by the ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/operations/settings/#settings-function_range_max_elements_in_block"},"function_range_max_elements_in_block")," setting.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT range(5), range(1, 5), range(1, 5, 2);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-txt"},"\u250c\u2500range(5)\u2500\u2500\u2500\u2500\u252c\u2500range(1, 5)\u2500\u252c\u2500range(1, 5, 2)\u2500\u2510\n\u2502 [0,1,2,3,4] \u2502 [1,2,3,4]   \u2502 [1,3]          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayx1-operator-x1"},"array(x1, \u2026), operator ","[","x1, \u2026","]"),(0,l.kt)("p",null,"Creates an array from the function arguments.\nThe arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn\u2019t clear which type of array to create. That is, you can\u2019t use this function to create an empty array (to do that, use the \u2018emptyArray","*","\u2019 function described above).\nReturns an \u2018Array(T)\u2019 type result, where \u2018T\u2019 is the smallest common type out of the passed arguments."),(0,l.kt)("h2",{id:"arrayconcat"},"arrayConcat"),(0,l.kt)("p",null,"Combines arrays passed as arguments."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayConcat(arrays)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arrays")," \u2013 Arbitrary number of arguments of ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array")," type.\n",(0,l.kt)("strong",{parentName:"li"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,3,4,5,6] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayelementarr-n-operator-arrn"},"arrayElement(arr, n), operator arr","[","n","]"),(0,l.kt)("p",null,"Get the element with the index ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," from the array ",(0,l.kt)("inlineCode",{parentName:"p"},"arr"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," must be any integer type.\nIndexes in an array begin from one.\nNegative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"arr[-1]")," is the last item in the array."),(0,l.kt)("p",null,"If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error ",(0,l.kt)("inlineCode",{parentName:"p"},"Array indices are 1-based"),")."),(0,l.kt)("h2",{id:"hasarr-elem"},"has(arr, elem)"),(0,l.kt)("p",null,"Checks whether the \u2018arr\u2019 array has the \u2018elem\u2019 element.\nReturns 0 if the element is not in the array, or 1 if it is."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," is processed as a value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT has([1, 2, NULL], NULL)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500has([1, 2, NULL], NULL)\u2500\u2510\n\u2502                       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"hasall"},"hasAll"),(0,l.kt)("p",null,"Checks whether one array is a subset of another."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"hasAll(set, subset)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set")," \u2013 Array of any type with a set of elements."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"subset")," \u2013 Array of any type with elements that should be tested to be a subset of ",(0,l.kt)("inlineCode",{parentName:"li"},"set"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", if ",(0,l.kt)("inlineCode",{parentName:"li"},"set")," contains all of the elements from ",(0,l.kt)("inlineCode",{parentName:"li"},"subset"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", otherwise.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Peculiar properties")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"An empty array is a subset of any array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Null")," processed as a value."),(0,l.kt)("li",{parentName:"ul"},"Order of values in both of arrays does not matter.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll([], [])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll([1, Null], [Null])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll([1.0, 2, 3, 4], [1, 3])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll(['a', 'b'], ['a'])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll([1], ['a'])")," returns 0."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [3, 5]])")," returns 0."),(0,l.kt)("h2",{id:"hasany"},"hasAny"),(0,l.kt)("p",null,"Checks whether two arrays have intersection by some elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"hasAny(array1, array2)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array1")," \u2013 Array of any type with a set of elements."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array2")," \u2013 Array of any type with a set of elements.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", if ",(0,l.kt)("inlineCode",{parentName:"li"},"array1")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"array2")," have one similar element at least."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", otherwise.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Peculiar properties")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Null")," processed as a value."),(0,l.kt)("li",{parentName:"ul"},"Order of values in both of arrays does not matter.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAny([1], [])")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAny([Null], [Null, 1])")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAny([-128, 1., 512], [1])")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAny([[1, 2], [3, 4]], ['a', 'c'])")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [1, 2]])")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("h2",{id:"hassubstr"},"hasSubstr"),(0,l.kt)("p",null,"Checks whether all the elements of array2 appear in array1 in the same exact order. Therefore, the function will return 1, if and only if ",(0,l.kt)("inlineCode",{parentName:"p"},"array1 = prefix + array2 + suffix"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"hasSubstr(array1, array2)\n")),(0,l.kt)("p",null,"In other words, the functions will check whether all the elements of ",(0,l.kt)("inlineCode",{parentName:"p"},"array2")," are contained in ",(0,l.kt)("inlineCode",{parentName:"p"},"array1")," like\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"hasAll")," function. In addition, it will check that the elements are observed in the same order in both ",(0,l.kt)("inlineCode",{parentName:"p"},"array1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"array2"),"."),(0,l.kt)("p",null,"For Example:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hasSubstr([1,2,3,4], [2,3])")," returns 1. However, ",(0,l.kt)("inlineCode",{parentName:"li"},"hasSubstr([1,2,3,4], [3,2])")," will return ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hasSubstr([1,2,3,4], [1,2,3])")," returns 1. However, ",(0,l.kt)("inlineCode",{parentName:"li"},"hasSubstr([1,2,3,4], [1,2,4])")," will return ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array1")," \u2013 Array of any type with a set of elements."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array2")," \u2013 Array of any type with a set of elements.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return values")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1"),", if ",(0,l.kt)("inlineCode",{parentName:"li"},"array1")," contains ",(0,l.kt)("inlineCode",{parentName:"li"},"array2"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0"),", otherwise.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Peculiar properties")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The function will return ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," if ",(0,l.kt)("inlineCode",{parentName:"li"},"array2")," is empty."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Null")," processed as a value. In other words ",(0,l.kt)("inlineCode",{parentName:"li"},"hasSubstr([1, 2, NULL, 3, 4], [2,3])")," will return ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),". However, ",(0,l.kt)("inlineCode",{parentName:"li"},"hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3])")," will return ",(0,l.kt)("inlineCode",{parentName:"li"},"1")),(0,l.kt)("li",{parentName:"ul"},"Order of values in both of arrays does matter.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr([], [])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr([1, Null], [Null])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr([1.0, 2, 3, 4], [1, 3])")," returns 0."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr(['a', 'b'], ['a'])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'b'])")," returns 1."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'c'])")," returns 0."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT hasSubstr([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])")," returns 1."),(0,l.kt)("h2",{id:"indexofarr-x"},"indexOf(arr, x)"),(0,l.kt)("p",null,"Returns the index of the first \u2018x\u2019 element (starting from 1) if it is in the array, or 0 if it is not."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT indexOf([1, 3, NULL, NULL], NULL)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500indexOf([1, 3, NULL, NULL], NULL)\u2500\u2510\n\u2502                                 3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Elements set to ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," are handled as normal values."),(0,l.kt)("h2",{id:"array-count"},"arrayCount(","[","func,","]"," arr1, \u2026)"),(0,l.kt)("p",null,"Returns the number of elements in the arr array for which func returns something other than 0. If \u2018func\u2019 is not specified, it returns the number of non-zero elements in the array."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayCount")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("h2",{id:"countequalarr-x"},"countEqual(arr, x)"),(0,l.kt)("p",null,"Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem -",">"," elem = x, arr)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," elements are handled as separate values."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT countEqual([1, 2, NULL, NULL], NULL)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500countEqual([1, 2, NULL, NULL], NULL)\u2500\u2510\n\u2502                                    2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array_functions-arrayenumerate"},"arrayEnumerate(arr)"),(0,l.kt)("p",null,"Returns the array ","[","1, 2, 3, \u2026, length (arr) ","]"),(0,l.kt)("p",null,"This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN. Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    count() AS Reaches,\n    countIf(num = 1) AS Hits\nFROM test.hits\nARRAY JOIN\n    GoalsReached,\n    arrayEnumerate(GoalsReached) AS num\nWHERE CounterID = 160656\nLIMIT 10\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\n\u2502   95606 \u2502 31406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"In this example, Reaches is the number of conversions (the strings received after applying ARRAY JOIN), and Hits is the number of pageviews (strings before ARRAY JOIN). In this particular case, you can get the same result in an easier way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    sum(length(GoalsReached)) AS Reaches,\n    count() AS Hits\nFROM test.hits\nWHERE (CounterID = 160656) AND notEmpty(GoalsReached)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\n\u2502   95606 \u2502 31406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition."),(0,l.kt)("h2",{id:"arrayenumerateuniqarr"},"arrayEnumerateUniq(arr, \u2026)"),(0,l.kt)("p",null,"Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.\nFor example: arrayEnumerateUniq(","[","10, 20, 10, 30","]",") = ","[","1, 1, 2, 1","]","."),(0,l.kt)("p",null,"This function is useful when using ARRAY JOIN and aggregation of array elements.\nExample:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    Goals.ID AS GoalID,\n    sum(Sign) AS Reaches,\n    sumIf(Sign, num = 1) AS Visits\nFROM test.visits\nARRAY JOIN\n    Goals,\n    arrayEnumerateUniq(Goals.ID) AS num\nWHERE CounterID = 160656\nGROUP BY GoalID\nORDER BY Reaches DESC\nLIMIT 10\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500GoalID\u2500\u252c\u2500Reaches\u2500\u252c\u2500Visits\u2500\u2510\n\u2502   53225 \u2502    3214 \u2502   1097 \u2502\n\u2502 2825062 \u2502    3188 \u2502   1097 \u2502\n\u2502   56600 \u2502    2803 \u2502    488 \u2502\n\u2502 1989037 \u2502    2401 \u2502    365 \u2502\n\u2502 2830064 \u2502    2396 \u2502    910 \u2502\n\u2502 1113562 \u2502    2372 \u2502    373 \u2502\n\u2502 3270895 \u2502    2262 \u2502    812 \u2502\n\u2502 1084657 \u2502    2262 \u2502    345 \u2502\n\u2502   56599 \u2502    2260 \u2502    799 \u2502\n\u2502 3271094 \u2502    2256 \u2502    812 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"In this example, each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion) and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case, the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the value of the arrayEnumerateUniq(Goals.ID) function."),(0,l.kt)("p",null,"The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,1,1,2,1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure."),(0,l.kt)("h2",{id:"arraypopback"},"arrayPopBack"),(0,l.kt)("p",null,"Removes the last item from the array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPopBack(array)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPopBack([1, 2, 3]) AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 [1,2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arraypopfront"},"arrayPopFront"),(0,l.kt)("p",null,"Removes the first item from the array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPopFront(array)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPopFront([1, 2, 3]) AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 [2,3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arraypushback"},"arrayPushBack"),(0,l.kt)("p",null,"Adds one item to the end of the array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPushBack(array, single_value)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"single_value")," \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the ",(0,l.kt)("inlineCode",{parentName:"li"},"single_value")," type for the data type of the array. For more information about the types of data in ClickHouse, see \u201c",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/#data_types"},"Data types"),"\u201d. Can be ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),". The function adds a ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," element to an array, and the type of array elements converts to ",(0,l.kt)("inlineCode",{parentName:"li"},"Nullable"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPushBack(['a'], 'b') AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['a','b'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arraypushfront"},"arrayPushFront"),(0,l.kt)("p",null,"Adds one element to the beginning of the array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayPushFront(array, single_value)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"single_value")," \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the ",(0,l.kt)("inlineCode",{parentName:"li"},"single_value")," type for the data type of the array. For more information about the types of data in ClickHouse, see \u201c",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/#data_types"},"Data types"),"\u201d. Can be ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),". The function adds a ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," element to an array, and the type of array elements converts to ",(0,l.kt)("inlineCode",{parentName:"li"},"Nullable"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayPushFront(['b'], 'a') AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['a','b'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayresize"},"arrayResize"),(0,l.kt)("p",null,"Changes the length of the array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayResize(array, size[, extender])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2014 Array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size")," \u2014 Required length of the array.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"size")," is less than the original size of the array, the array is truncated from the right."))),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"size")," is larger than the initial size of the array, the array is extended to the right with ",(0,l.kt)("inlineCode",{parentName:"li"},"extender")," values or default values for the data type of the array items."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extender")," \u2014 Value for extending an array. Can be ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value:")),(0,l.kt)("p",null,"An array of length ",(0,l.kt)("inlineCode",{parentName:"p"},"size"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples of calls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayResize([1], 3);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayResize([1], 3)\u2500\u2510\n\u2502 [1,0,0]             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayResize([1], 3, NULL);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayResize([1], 3, NULL)\u2500\u2510\n\u2502 [1,NULL,NULL]             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayslice"},"arraySlice"),(0,l.kt)("p",null,"Returns a slice of the array."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arraySlice(array, offset[, length])\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 Array of data."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"offset")," \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"length")," \u2013 The length of the required slice. If you specify a negative value, the function returns an open slice ",(0,l.kt)("inlineCode",{parentName:"li"},"[offset, array_length - length)"),". If you omit the value, the function returns the slice ",(0,l.kt)("inlineCode",{parentName:"li"},"[offset, the_end_of_array]"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2,NULL,4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Array elements set to ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," are handled as normal values."),(0,l.kt)("h2",{id:"array_functions-sort"},"arraySort(","[","func,","]"," arr, \u2026)"),(0,l.kt)("p",null,"Sorts the elements of the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr")," array in ascending order. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, sorting order is determined by the result of the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function applied to the elements of the array. If ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," accepts multiple arguments, the ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySort")," function is passed several arrays that the arguments of ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," will correspond to. Detailed examples are shown at the end of ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySort")," description."),(0,l.kt)("p",null,"Example of integer values sorting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort([1, 3, 3, 0]);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arraySort([1, 3, 3, 0])\u2500\u2510\n\u2502 [0,1,3,3]               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Example of string values sorting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort(['hello', 'world', '!']);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arraySort(['hello', 'world', '!'])\u2500\u2510\n\u2502 ['!','hello','world']              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Consider the following sorting order for the ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Inf")," values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf])\u2500\u2510\n\u2502 [-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Inf")," values are first in the array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," values are last in the array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," values are right before ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Inf")," values are right before ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN"),".")),(0,l.kt)("p",null,"Note that ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySort")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument. In this case, sorting order is determined by the result of the lambda function applied to the elements of the array."),(0,l.kt)("p",null,"Let\u2019s consider the following example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x) -> -x, [1, 2, 3]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [3,2,1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"For each element of the source array, the lambda function returns the sorting key, that is, ","[","1 \u2013",">"," -1, 2 \u2013",">"," -2, 3 \u2013",">"," -3","]",". Since the ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySort")," function sorts the keys in ascending order, the result is ","[","3, 2, 1","]",". Thus, the ",(0,l.kt)("inlineCode",{parentName:"p"},"(x) \u2013> -x")," lambda function sets the ",(0,l.kt)("a",{parentName:"p",href:"#array_functions-reverse-sort"},"descending order")," in a sorting."),(0,l.kt)("p",null,"The lambda function can accept multiple arguments. In this case, you need to pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySort")," function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['world', 'hello'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Here, the elements that are passed in the second array (","[","2, 1","]",") define a sorting key for the corresponding element from the source array (","[","\u2018hello\u2019, \u2018world\u2019","]","), that is, ","[","\u2018hello\u2019 \u2013",">"," 2, \u2018world\u2019 \u2013",">"," 1","]",". Since the lambda function does not use ",(0,l.kt)("inlineCode",{parentName:"p"},"x"),", actual values of the source array do not affect the order in the result. So, \u2018hello\u2019 will be the second element in the result, and \u2018world\u2019 will be the first."),(0,l.kt)("p",null,"Other examples are shown below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x, y) -> y, [0, 1, 2], ['c', 'b', 'a']) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2,1,0] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySort((x, y) -> -y, [0, 1, 2], [1, 2, 3]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2,1,0] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"To improve sorting efficiency, the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Schwartzian_transform"},"Schwartzian transform")," is used."))),(0,l.kt)("h2",{id:"array_functions-reverse-sort"},"arrayReverseSort(","[","func,","]"," arr, \u2026)"),(0,l.kt)("p",null,"Sorts the elements of the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr")," array in descending order. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, ",(0,l.kt)("inlineCode",{parentName:"p"},"arr")," is sorted according to the result of the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function applied to the elements of the array, and then the sorted array is reversed. If ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," accepts multiple arguments, the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," function is passed several arrays that the arguments of ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," will correspond to. Detailed examples are shown at the end of ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," description."),(0,l.kt)("p",null,"Example of integer values sorting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort([1, 3, 3, 0]);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayReverseSort([1, 3, 3, 0])\u2500\u2510\n\u2502 [3,3,1,0]                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Example of string values sorting:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort(['hello', 'world', '!']);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayReverseSort(['hello', 'world', '!'])\u2500\u2510\n\u2502 ['world','hello','!']                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Consider the following sorting order for the ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"NaN")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Inf")," values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [inf,3,2,1,-4,-inf,nan,nan,NULL,NULL] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Inf")," values are first in the array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," values are last in the array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," values are right before ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Inf")," values are right before ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN"),".")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument. Example is shown below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x) -> -x, [1, 2, 3]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"The array is sorted in the following way:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"At first, the source array (","[","1, 2, 3","]",") is sorted according to the result of the lambda function applied to the elements of the array. The result is an array ","[","3, 2, 1","]","."),(0,l.kt)("li",{parentName:"ol"},"Array that is obtained on the previous step, is reversed. So, the final result is ","[","1, 2, 3","]",".")),(0,l.kt)("p",null,"The lambda function can accept multiple arguments. In this case, you need to pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReverseSort")," function several arrays of identical length that the arguments of lambda function will correspond to. The resulting array will consist of elements from the first input array; elements from the next input array(s) specify the sorting keys. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x, y) -> y, ['hello', 'world'], [2, 1]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['hello','world'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"In this example, the array is sorted in the following way:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"At first, the source array (","[","\u2018hello\u2019, \u2018world\u2019","]",") is sorted according to the result of the lambda function applied to the elements of the arrays. The elements that are passed in the second array (","[","2, 1","]","), define the sorting keys for corresponding elements from the source array. The result is an array ","[","\u2018world\u2019, \u2018hello\u2019","]","."),(0,l.kt)("li",{parentName:"ol"},"Array that was sorted on the previous step, is reversed. So, the final result is ","[","\u2018hello\u2019, \u2018world\u2019","]",".")),(0,l.kt)("p",null,"Other examples are shown below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [5,3,4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [4,3,5] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayuniqarr"},"arrayUniq(arr, \u2026)"),(0,l.kt)("p",null,"If one argument is passed, it counts the number of different elements in the array.\nIf multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays."),(0,l.kt)("p",null,"If you want to get a list of unique items in an array, you can use arrayReduce(\u2018groupUniqArray\u2019, arr)."),(0,l.kt)("h2",{id:"array-functions-join"},"arrayJoin(arr)"),(0,l.kt)("p",null,"A special function. See the section ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/array-join#functions_arrayjoin"},"\u201cArrayJoin function\u201d"),"."),(0,l.kt)("h2",{id:"arraydifference"},"arrayDifference"),(0,l.kt)("p",null,"Calculates the difference between adjacent array elements. Returns an array where the first element will be 0, the second is the difference between ",(0,l.kt)("inlineCode",{parentName:"p"},"a[1] - a[0]"),", etc. The type of elements in the resulting array is determined by the type inference rules for subtraction (e.g.\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"UInt8")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"UInt8")," = ",(0,l.kt)("inlineCode",{parentName:"p"},"Int16"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayDifference(array)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 ",(0,l.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/data_types/array/"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("p",null,"Returns an array of differences between adjacent elements."),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/data_types/int_uint/#uint-ranges"},"UInt","*"),", ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/data_types/int_uint/#int-ranges"},"Int","*"),", ",(0,l.kt)("a",{parentName:"p",href:"https://clickhouse.com/docs/en/data_types/float/"},"Float","*"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayDifference([1, 2, 3, 4]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayDifference([1, 2, 3, 4])\u2500\u2510\n\u2502 [0,1,1,1]                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Example of the overflow due to result type Int64:"),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayDifference([0, 10000000000000000000]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayDifference([0, 10000000000000000000])\u2500\u2510\n\u2502 [0,-8446744073709551616]                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arraydistinct"},"arrayDistinct"),(0,l.kt)("p",null,"Takes an array, returns an array containing the distinct elements only."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayDistinct(array)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array")," \u2013 ",(0,l.kt)("a",{parentName:"li",href:"https://clickhouse.com/docs/en/data_types/array/"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned values")),(0,l.kt)("p",null,"Returns an array containing the distinct elements."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayDistinct([1, 2, 2, 3, 1]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayDistinct([1, 2, 2, 3, 1])\u2500\u2510\n\u2502 [1,2,3]                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array_functions-arrayenumeratedense"},"arrayEnumerateDense(arr)"),(0,l.kt)("p",null,"Returns an array of the same size as the source array, indicating where each element first appears in the source array."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayEnumerateDense([10, 20, 10, 30])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayEnumerateDense([10, 20, 10, 30])\u2500\u2510\n\u2502 [1,2,1,3]                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array-functions-arrayintersect"},"arrayIntersect(arr)"),(0,l.kt)("p",null,"Takes multiple arrays, returns an array with elements that are present in all source arrays."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayIntersect([1, 2], [1, 3], [2, 3]) AS no_intersect,\n    arrayIntersect([1, 2], [1, 3], [1, 4]) AS intersect\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500no_intersect\u2500\u252c\u2500intersect\u2500\u2510\n\u2502 []           \u2502 [1]       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayreduce"},"arrayReduce"),(0,l.kt)("p",null,"Applies an aggregate function to array elements and returns its result. The name of the aggregation function is passed as a string in single quotes ",(0,l.kt)("inlineCode",{parentName:"p"},"'max'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'sum'"),". When using parametric aggregate functions, the parameter is indicated after the function name in parentheses ",(0,l.kt)("inlineCode",{parentName:"p"},"'uniqUpTo(6)'"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayReduce(agg_func, arr1, arr2, ..., arrN)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"agg_func")," \u2014 The name of an aggregate function which should be a constant ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/string"},"string"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Any number of ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"array")," type columns as the parameters of the aggregation function.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduce('max', [1, 2, 3]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayReduce('max', [1, 2, 3])\u2500\u2510\n\u2502                             3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"If an aggregate function takes multiple arguments, then this function must be applied to multiple arrays of the same size."),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduce('maxIf', [3, 5], [1, 0]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayReduce('maxIf', [3, 5], [1, 0])\u2500\u2510\n\u2502                                    3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Example with a parametric aggregate function:"),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\u2500\u2510\n\u2502                                                           4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayreduceinranges"},"arrayReduceInRanges"),(0,l.kt)("p",null,"Applies an aggregate function to array elements in given ranges and returns an array containing the result corresponding to each range. The function will return the same result as multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReduce(agg_func, arraySlice(arr1, index, length), ...)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayReduceInRanges(agg_func, ranges, arr1, arr2, ..., arrN)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"agg_func")," \u2014 The name of an aggregate function which should be a constant ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/string"},"string"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ranges")," \u2014 The ranges to aggretate which should be an ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"array")," of ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/tuple"},"tuples")," which containing the index and the length of each range."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Any number of ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array")," type columns as the parameters of the aggregation function.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Array containing results of the aggregate function over specified ranges.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReduceInRanges(\n    'sum',\n    [(1, 5), (2, 3), (3, 4), (4, 4)],\n    [1000000, 200000, 30000, 4000, 500, 60, 7]\n) AS res\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1234500,234000,34560,4567] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayreverse"},"arrayReverse(arr)"),(0,l.kt)("p",null,"Returns an array of the same size as the original array containing the elements in reverse order."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverse([1, 2, 3])\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayReverse([1, 2, 3])\u2500\u2510\n\u2502 [3,2,1]                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array-functions-reverse"},"reverse(arr)"),(0,l.kt)("p",null,"Synonym for ",(0,l.kt)("a",{parentName:"p",href:"#arrayreverse"},"\u201carrayReverse\u201d")),(0,l.kt)("h2",{id:"arrayflatten"},"arrayFlatten"),(0,l.kt)("p",null,"Converts an array of arrays to a flat array."),(0,l.kt)("p",null,"Function:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Applies to any depth of nested arrays."),(0,l.kt)("li",{parentName:"ul"},"Does not change arrays that are already flat.")),(0,l.kt)("p",null,"The flattened array contains all the elements from all source arrays."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"flatten(array_of_arrays)\n")),(0,l.kt)("p",null,"Alias: ",(0,l.kt)("inlineCode",{parentName:"p"},"flatten"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"array_of_arrays")," \u2014 ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array")," of arrays. For example, ",(0,l.kt)("inlineCode",{parentName:"li"},"[[1,2,3], [4,5]]"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT flatten([[[1]], [[2], [3]]]);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500flatten(array(array([1]), array([2], [3])))\u2500\u2510\n\u2502 [1,2,3]                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arraycompact"},"arrayCompact"),(0,l.kt)("p",null,"Removes consecutive duplicate elements from an array. The order of result values is determined by the order in the source array."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayCompact(arr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"arr")," \u2014 The ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"array")," to inspect."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"The array without duplicate."),(0,l.kt)("p",null,"Type: ",(0,l.kt)("inlineCode",{parentName:"p"},"Array"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayCompact([1, 1, nan, nan, 2, 3, 3, 3])\u2500\u2510\n\u2502 [1,nan,nan,2,3]                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayzip"},"arrayZip"),(0,l.kt)("p",null,"Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayZip(arr1, arr2, ..., arrN)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arrN")," \u2014 ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,"The function can take any number of arrays of different types. All the input arrays must be of equal size."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Array with elements from the source arrays grouped into ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/tuple"},"tuples"),". Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayZip(['a', 'b', 'c'], [5, 2, 1]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayZip(['a', 'b', 'c'], [5, 2, 1])\u2500\u2510\n\u2502 [('a',5),('b',2),('c',1)]            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arrayauc"},"arrayAUC"),(0,l.kt)("p",null,"Calculate AUC (Area Under the Curve, which is a concept in machine learning, see more details: ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve"},"https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve"),")."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayAUC(arr_scores, arr_labels)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr_scores")," \u2014 scores prediction model gives."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr_labels")," \u2014 labels of samples, usually 1 for positive sample and 0 for negtive sample.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("p",null,"Returns AUC value with type Float64."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500arrayAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1])\u2500\u2510\n\u2502                                          0.75 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array-map"},"arrayMap(func, arr1, \u2026)"),(0,l.kt)("p",null,"Returns an array obtained from the original application of the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function to each element in the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr")," array."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [3,4,5] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"The following example shows how to create a tuple of elements from different arrays:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [(1,4),(2,5),(3,6)] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayMap")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-filter"},"arrayFilter(func, arr1, \u2026)"),(0,l.kt)("p",null,"Returns an array containing only the elements in ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," for which ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ['abc World'] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    arrayFilter(\n        (i, x) -> x LIKE '%World%',\n        arrayEnumerate(arr),\n        ['Hello', 'abc World'] AS arr)\n    AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502 [2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayFilter")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-fill"},"arrayFill(func, arr1, \u2026)"),(0,l.kt)("p",null,"Scan through ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," from the first element to the last element and replace ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1[i]")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1[i - 1]")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns 0. The first element of ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," will not be replaced."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,1,3,11,12,12,12,5,6,14,14,14] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayFill")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-reverse-fill"},"arrayReverseFill(func, arr1, \u2026)"),(0,l.kt)("p",null,"Scan through ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," from the last element to the first element and replace ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1[i]")," by ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1[i + 1]")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns 0. The last element of ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," will not be replaced."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseFill(x -> not isNull(x), [1, null, 3, 11, 12, null, null, 5, 6, 14, null, null]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,3,3,11,12,5,5,5,6,14,NULL,NULL] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReverseFill")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-split"},"arraySplit(func, arr1, \u2026)"),(0,l.kt)("p",null,"Split ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," into multiple arrays. When ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0, the array will be split on the left hand side of the element. The array will not be split before the first element."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [[1,2,3],[4,5]] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySplit")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-reverse-split"},"arrayReverseSplit(func, arr1, \u2026)"),(0,l.kt)("p",null,"Split ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," into multiple arrays. When ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0, the array will be split on the right hand side of the element. The array will not be split after the last element."),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [[1],[2,3,4],[5]] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayReverseSplit")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"arrayexistsfunc-arr1"},"arrayExists(","[","func,","]"," arr1, \u2026)"),(0,l.kt)("p",null,"Returns 1 if there is at least one element in ",(0,l.kt)("inlineCode",{parentName:"p"},"arr")," for which ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0. Otherwise, it returns 0."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayExists")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("h2",{id:"arrayallfunc-arr1"},"arrayAll(","[","func,","]"," arr1, \u2026)"),(0,l.kt)("p",null,"Returns 1 if ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0 for all the elements in ",(0,l.kt)("inlineCode",{parentName:"p"},"arr"),". Otherwise, it returns 0."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayAll")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("h2",{id:"array-first"},"arrayFirst(func, arr1, \u2026)"),(0,l.kt)("p",null,"Returns the first element in the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," array for which ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayFirst")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-last"},"arrayLast(func, arr1, \u2026)"),(0,l.kt)("p",null,"Returns the last element in the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," array for which ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayLast")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-first-index"},"arrayFirstIndex(func, arr1, \u2026)"),(0,l.kt)("p",null,"Returns the index of the first element in the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," array for which ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayFirstIndex")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-last-index"},"arrayLastIndex(func, arr1, \u2026)"),(0,l.kt)("p",null,"Returns the index of the last element in the ",(0,l.kt)("inlineCode",{parentName:"p"},"arr1")," array for which ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," returns something other than 0."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayLastIndex")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You must pass a lambda function to it as the first argument, and it can\u2019t be omitted."),(0,l.kt)("h2",{id:"array-min"},"arrayMin"),(0,l.kt)("p",null,"Returns the minimum of elements in the source array."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, returns the mininum of elements converted by this function."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayMin")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayMin([func,] arr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"func")," \u2014 Function. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/special-data-types/expression"},"Expression"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The minimum of function values (or the array minimum).")),(0,l.kt)("p",null,"Type: if ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," is specified, matches ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," return value type, else matches the array elements type."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMin([1, 2, 4]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502   1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMin(x -> (-x), [1, 2, 4]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502  -4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array-max"},"arrayMax"),(0,l.kt)("p",null,"Returns the maximum of elements in the source array."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, returns the maximum of elements converted by this function."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayMax")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayMax([func,] arr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"func")," \u2014 Function. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/special-data-types/expression"},"Expression"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The maximum of function values (or the array maximum).")),(0,l.kt)("p",null,"Type: if ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," is specified, matches ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," return value type, else matches the array elements type."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMax([1, 2, 4]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502   4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayMax(x -> (-x), [1, 2, 4]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502  -1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array-sum"},"arraySum"),(0,l.kt)("p",null,"Returns the sum of elements in the source array."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, returns the sum of elements converted by this function."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySum")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arraySum([func,] arr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"func")," \u2014 Function. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/special-data-types/expression"},"Expression"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The sum of the function values (or the array sum).")),(0,l.kt)("p",null,"Type: for decimal numbers in source array (or for converted values, if ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," is specified) \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/decimal"},"Decimal128"),", for floating point numbers \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/float"},"Float64"),", for numeric unsigned \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"UInt64"),", and for numeric signed \u2014 ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/int-uint"},"Int64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySum([2, 3]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502   5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arraySum(x -> x*x, [2, 3]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502  13 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"array-avg"},"arrayAvg"),(0,l.kt)("p",null,"Returns the average of elements in the source array."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, returns the average of elements converted by this function."),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayAvg")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayAvg([func,] arr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"func")," \u2014 Function. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/special-data-types/expression"},"Expression"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 Array. ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The average of function values (or the array average).")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/float"},"Float64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayAvg([1, 2, 4]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res\u2500\u2510\n\u2502 2.3333333333333335 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayAvg(x -> (x * x), [2, 4]) AS res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2510\n\u2502  10 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("h2",{id:"arraycumsumfunc-arr1"},"arrayCumSum(","[","func,","]"," arr1, \u2026)"),(0,l.kt)("p",null,"Returns an array of partial sums of elements in the source array (a running sum). If the ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," function is specified, then the values of the array elements are converted by this function before summing."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCumSum([1, 1, 1, 1]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 3, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayCumSum")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("h2",{id:"arraycumsumnonnegativearr"},"arrayCumSumNonNegative(arr)"),(0,l.kt)("p",null,"Same as ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayCumSum"),", returns an array of partial sums of elements in the source array (a running sum). Different ",(0,l.kt)("inlineCode",{parentName:"p"},"arrayCumSum"),", when then returned value contains a value less than zero, the value is replace with zero and the subsequent calculation is performed with zero parameters. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,0,1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"arraySumNonNegative")," is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/functions/#higher-order-functions"},"higher-order function"),". You can pass a lambda function to it as the first argument."),(0,l.kt)("h2",{id:"arrayproduct"},"arrayProduct"),(0,l.kt)("p",null,"Multiplies elements of an ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"array"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"arrayProduct(arr)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arr")," \u2014 ",(0,l.kt)("a",{parentName:"li",href:"/docs/staging/docs/en/sql-reference/data-types/array"},"Array")," of numeric values.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returned value")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A product of array's elements.")),(0,l.kt)("p",null,"Type: ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/float"},"Float64"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayProduct([1,2,3,4,5,6]) as res;\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 720   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,l.kt)("p",null,"Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as res, toTypeName(res);\n")),(0,l.kt)("p",null,"Return value type is always ",(0,l.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/sql-reference/data-types/float"},"Float64"),". Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"\u250c\u2500res\u2500\u252c\u2500toTypeName(arrayProduct(array(toDecimal64(1, 8), toDecimal64(2, 8), toDecimal64(3, 8))))\u2500\u2510\n\u2502 6   \u2502 Float64                                                                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")))}d.isMDXComponent=!0}}]);