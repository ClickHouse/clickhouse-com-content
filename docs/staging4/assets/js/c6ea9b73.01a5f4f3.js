"use strict";(self.webpackChunkclickhouse=self.webpackChunkclickhouse||[]).push([[3851],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85200:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={sidebar_label:"Connect PostgreSQL and ClickHouse",sidebar_position:10,keywords:["clickhouse","postgres","postgresql","connect","integrate","table","engine"]},s="Connecting ClickHouse to PostgreSQL using the PostgreSQL Table Engine",p={unversionedId:"integrations/postgresql/postgres-with-clickhouse",id:"integrations/postgresql/postgres-with-clickhouse",title:"Connecting ClickHouse to PostgreSQL using the PostgreSQL Table Engine",description:"The PostgreSQL table engine allows SELECT and INSERT operations on data stored on the remote PostgreSQL server from ClickHouse.",source:"@site/docs/integrations/postgresql/postgres-with-clickhouse.md",sourceDirName:"integrations/postgresql",slug:"/integrations/postgresql/postgres-with-clickhouse",permalink:"/docs/staging/docs/integrations/postgresql/postgres-with-clickhouse",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Connect PostgreSQL and ClickHouse",sidebar_position:10,keywords:["clickhouse","postgres","postgresql","connect","integrate","table","engine"]},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL",permalink:"/docs/staging/docs/integrations/postgresql"},next:{title:"PostgreSQL Database Engine",permalink:"/docs/staging/docs/integrations/postgresql/postgres-with-clickhouse-database-engine"}},c={},m=[{value:"1. Setting up PostgreSQL",id:"1-setting-up-postgresql",level:2},{value:"2. Define a Table in ClickHouse",id:"2-define-a-table-in-clickhouse",level:2},{value:"3 Test the Integration",id:"3-test-the-integration",level:2},{value:"Summary",id:"summary",level:2}],u={toc:m};function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connecting-clickhouse-to-postgresql-using-the-postgresql-table-engine"},"Connecting ClickHouse to PostgreSQL using the PostgreSQL Table Engine"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"PostgreSQL")," table engine allows ",(0,o.kt)("strong",{parentName:"p"},"SELECT")," and ",(0,o.kt)("strong",{parentName:"p"},"INSERT")," operations on data stored on the remote PostgreSQL server from ClickHouse.\nThis article is to illustrate basic methods of integration using one table."),(0,o.kt)("h2",{id:"1-setting-up-postgresql"},"1. Setting up PostgreSQL"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql.conf"),", add the following entry to enable PostgreSQL to listen on the network interfaces:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"listen_addresses = '*' \n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a user to connect from ClickHouse. For demonstration purposes, this example grants full superuser rights."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE ROLE clickhouse_user SUPERUSER LOGIN PASSWORD 'ClickHouse_123';\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a new database in PostgreSQL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db_in_psg;\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a new table:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE table1 (\n    id         integer primary key,\n    column1    varchar(10)\n);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's add a few rows for testing:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table1\n  (id, column1)\nVALUES\n  (1, 'abc'),\n  (2, 'def');\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To configure PostgreSQL to allow connections to the new database with the new user for replication, add the following entry to the ",(0,o.kt)("inlineCode",{parentName:"p"},"pg_hba.conf")," file. Update the address line with either the subnet or IP address of your PostgreSQL server:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    db_in_psg             clickhouse_user 192.168.1.0/24          password\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Reload the ",(0,o.kt)("inlineCode",{parentName:"p"},"pg_hba.conf")," configuration (adjust this command depending on your version):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"/usr/pgsql-12/bin/pg_ctl reload\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Verify the new ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse_user")," can login:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"psql -U clickhouse_user -W -d db_in_psg -h <your_postgresql_host>\n")))),(0,o.kt)("h2",{id:"2-define-a-table-in-clickhouse"},"2. Define a Table in ClickHouse"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Login to the ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-client"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"clickhouse-client --user default --password ClickHouse123!\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's create a new database:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE db_in_ch;\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a table that uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"PostgreSQL"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE db_in_ch.table1\n(\n    id UInt64,\n    column1 String\n) \nENGINE = PostgreSQL('postgres-host.domain.com:5432', 'db_in_psg', 'table1', 'clickhouse_user', 'ClickHouse_123');\n")),(0,o.kt)("p",{parentName:"li"},"The minimum parameters needed are:"),(0,o.kt)("table",{parentName:"li"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"host:port"),(0,o.kt)("td",{parentName:"tr",align:null},"hostname or IP and port"),(0,o.kt)("td",{parentName:"tr",align:null},"postgres-host.domain.com:5432")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"database"),(0,o.kt)("td",{parentName:"tr",align:null},"PostgreSQL database name"),(0,o.kt)("td",{parentName:"tr",align:null},"db_in_psg")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"user"),(0,o.kt)("td",{parentName:"tr",align:null},"username to connect to postgres"),(0,o.kt)("td",{parentName:"tr",align:null},"clickhouse_user")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"password"),(0,o.kt)("td",{parentName:"tr",align:null},"password to connect to postgres"),(0,o.kt)("td",{parentName:"tr",align:null},"ClickHouse_123")))),(0,o.kt)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"View the ",(0,o.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/engines/table-engines/integrations/postgresql"},"PostgreSQL table engine")," doc page for a complete list of parameters. "))))),(0,o.kt)("h2",{id:"3-test-the-integration"},"3 Test the Integration"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In ClickHouse, view initial rows:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM db_in_ch.table1\n")),(0,o.kt)("p",{parentName:"li"},"The ClickHouse table should automatically be populated with the two rows that already existed in the table in PostgreSQL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"Query id: 34193d31-fe21-44ac-a182-36aaefbd78bf\n\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  1 \u2502 abc     \u2502\n\u2502  2 \u2502 def     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Back in PostgreSQL, add a couple of rows to the table:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table1 \n  (id, column1) \nVALUES \n  (3, 'ghi'),\n  (4, 'jkl');\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Those two new rows should appear in your ClickHouse table:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM db_in_ch.table1\n")),(0,o.kt)("p",{parentName:"li"},"The response should be:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-response"},"Query id: 86fa2c62-d320-4e47-b564-47ebf3d5d27b\n\n\u250c\u2500id\u2500\u252c\u2500column1\u2500\u2510\n\u2502  1 \u2502 abc     \u2502\n\u2502  2 \u2502 def     \u2502\n\u2502  3 \u2502 ghi     \u2502\n\u2502  4 \u2502 jkl     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's see what happens when you add rows to the ClickHouse table:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO db_in_ch.table1\n  (id, column1)\nVALUES\n  (5, 'mno'),\n  (6, 'pqr');\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The rows added in ClickHouse should appear in the table in PostgreSQL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"db_in_psg=# SELECT * FROM table1;\nid | column1\n----+---------\n  1 | abc\n  2 | def\n  3 | ghi\n  4 | jkl\n  5 | mno\n  6 | pqr\n(6 rows)\n")))),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"This example demonstrated the basic integration between PostgreSQL and ClickHouse using the ",(0,o.kt)("inlineCode",{parentName:"p"},"PostrgeSQL")," table engine.\nCheck out the ",(0,o.kt)("a",{parentName:"p",href:"/docs/staging/docs/en/engines/table-engines/integrations/postgresql"},"doc page for the PostgreSQL table engine")," for more features, such as specifying schemas, returning only a subset of columns, and connecting to multiple replicas."))}g.isMDXComponent=!0}}]);